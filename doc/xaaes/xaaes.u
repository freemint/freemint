########################################
# @(#) XaAES-userguide
# @(#) Helmut Karlowski, 07.08.2010
# @(#) Lars Schmidbauer, 03.03.2020
########################################
!language english

# Target
!ifdest [stg]
  !code_target [tos]
  !parwidth 75
!else
  !code_target [utf-8]
!endif

!universal_charset [on]

#special preamble for dvipdfm, dvips
!no_preamble [tex]

#!use_label_inside_index [html]
#!use_udo_index           [all]

!use_nodes_inside_index  [all]
!use_label_inside_index  [all]
!use_alias_inside_index  [all]

!no_headlines [html]
!html_merge_nodes
!html_merge_subnodes
!html_merge_subsubnodes

#
!tex_tetex
!tex_2e

!code_source [tos]


#####################################################
#######START###################
############

!docinfo [title]   Documentation for
!docinfo [program] XaAES
!docinfo [date]    (!today)
!docinfo [version] Version 1.6.4 beta
!docinfo [author]  Helmut Karlowski, Latzmaster et.al.
!docinfo [stgdatabase] XaAES

!ifdest [stg]
!begin_raw
@options "+i +z"
@subject "System"
!end_raw
!endif

#!use_auto_subtocs    [info,html,stg,tvh,win,aqv]
#!use_auto_subsubtocs [info,html,stg,tvh,win,aqv]
!no_effects          [asc]
!use_justification   [asc]

########################################

!begin_document

!raw [stg] @$VER: 1.1 (@:"__DATE__")

!maketitle
!tableofcontents

!begin_node Preface

Parts of this document have been copied from the sample xaaes.cnf, the old user
guide, and the xaaes sources. As not everything is clear, some items have been
marked with ?. Perhaps there are some things missing in this documentation
but those that are new to the user since version 0.998 should be mostly there.

Please assign your webbrowser for opening "http*" files in your desktop so that
the weblinks in this document will be opened directly by clicking on them.

You will find additional information here:

!begin_itemize !compressed
!item (!url [XaAES wiki on GitHub] [https://github.com/freemint/freemint/wiki/XaAES])
!item (!url [The unofficial XaAES] [http://xaaes.gokmase.com/docs.php])
!end_itemize

!end_node # Preface


!begin_node Installation

XaAES is normally included in the standard FreeMiNT distribution. It's files
are located in the subdirectory /xaaes/ in the FreeMiNT system folder.
To start XaAES you need to run the program /xaaes/xaloader.prg.
There are three common ways of starting XaAES.

XaAES can be started by running the XaAES loader from any of the
following locations:

!begin_xlist [From the command line] !compressed
!item [From mint.cnf] - The keyword GEM or keyword INIT points to xaloader.prg.
                 FreeMiNT will now start XaAES automatically. (!nl)
                 Examples: GEM = <sysdir>\xaaes\xaloader.prg or (!nl)
                           INIT = <sysdir>\xaaes\xaloader.prg

!item [By init] - As it is configured in an EasyMiNT installation. This allows more
           distro specific tasks to be completed before hand.

!item [From the command line] - In this case you may quit XaAES with ALT + Q from the
                         taskmanager to return to the commandline.

!item [By the TOS desktop] - Sometimes quitting XaAES also works here.
!end_xlist

XALOADER.PRG will then load and runs the appropriate kernel module, (!nl)
<sysdir>/xaaes/xaaes.km by default.

<sysdir> defaults to "<bootdrive>/mint/<VERSION>" or, if this directory
doesn't exist, "<bootdrive>/mint". <VERSION> is the version of the kernel
where dots are replaced by minus, e.g. 1.17.0 gives 1-17-0. Any version
compiled from cvs, including the snapshots replaces the last point value
with "cur", e.g. 1-18-cur.
Since FreeMinT is on GitHub, the last value of the per-cpu builds is "cur",
the one of the pre-configured builds is a build number, e.g. 1-19-8f2.

You may specify any .km file on the commandline, e.g.:

!begin_sourcecode
sh> cd /c/mint/1-19-cur/xaaes/
sh> xaloader.prg xaaes030.km
!end_sourcecode

!end_node # Installation

!begin_node Files

On startup, XaAES uses various files, some of them can be changed at
load time.

!begin_itemize !compressed
!item Resource Files
!item IMG Files
!item Mouse Drivers
!item Help File
!item Config Files
!end_itemize

!begin_node Resource Files
There are 3 mandatory resource-files located in the xaaes startup-
directory:

!begin_description
!item [xaaes.rsc]	- Standard resource file for XaAES.
!item [xaaeswdg.rsc] 	- Special resource file for widgets.
!item [xa_xtobj.rsc]	- Resource containing the extended AES object icons.
!end_description

There is also a resource file for monochrome display (xa_mono.rsc) that
reportedly saves memory, but it has not yet been updated for the
latest XaAES-version.

You can define to use other resource files in xaaes.cnf.
For example to get different widgets, there are some in the widgets folder.

There are also checkbox and tickbox widget alternatives to the xa_xtobj.rsc
in the folder /xaaes/xobj/.

For more information on widget and extended widget object file, see 
Widgets and Buttons in the section on Theming and Extended Textures .

!end_node # Resource Files

!begin_node IMG Files

XaAES also reads IMG files from the folder /xaaes/img/. This is needed if you
want the textured look. If not present, you get the default rendering.
This does not affect the use of the gradient setting in xaaes.cnf.
If you use gradients or don't want to use the textures at all, set option
"textures = 0" in xaaes.cnf, so XaAES will boot faster. However using the
cache enabled with "textures_cache = yes" makes the speed difference
neglible.

For more information on texture files, see Theming and Extended Textures.
!end_node # IMG Files

!begin_node Mouse Drivers

!begin_description
!item [moose.adi]
!item [moose_w.adi]
!end_description

For mouse control, one of moose.adi or moose_w.adi is needed in the XaAES
folder. The "_w" version is needed for mouse wheel support, but also works if
there is no wheel on the mouse.
If both drivers are present, moose_w.adi is used.

For more information on configurations, see Mouse Configuration

!end_node # Mouse Drivers

!begin_node Help File
If the help file (!B)xa_help.txt(!b) is found, its content is displayed in the
About window, accessible from XaAES menu or with keyboard shortcut
CTRL + ALT + HELP.

The default help file is in English language. There also are help files for
CS, DE, ES, FR, HU and RU which are loaded accordingly the language setting in
xaaes.cnf.
!end_node # Help File

!begin_node Config Files

!begin_description

!item [xaaes.cnf] This file contains the configuration for XaAES. See next topic.

!item [xaaes.inf] This file is not present in default installation. It will be created with
keyboard shortcut CTRL + ALT + S and contain the positions/sizes of XaAES
dialog windows and XaAES fileselector settings.

!end_description

!end_node # Config Files

!end_node # Files

!begin_node xaaes.cnf

The XaAES configuration file is in the same format as the MiNT con!-fi!-gu!-ra!-tion
file (mint.cnf). It lets you set several runtime options for XaAES, global or
environment variables, application specific settings for clients, programs to
be run automatically at start up, ...

Commands are not case sensitive unless stated otherwise. (!B)bool(!b) values
can be "true" or "false", "yes" or "no".

Lines starting with " # " (hash) are considered remarks, and are ignored.
If a command is not understood, it will get ignored.

Default values are false for bool, 0 for numbers or empty for strings unless
otherwise mentioned.


!begin_node Global Commands

!subtoc [all] !depth 2

!begin_node General

!begin_description

!item [INCLUDE <character-sequence>] (!nl)
Include another config file at this place. E.g. include c:\mint\network.cnf.

!item [MODECODE <mode> (default 0x0000)] (!nl)
See Video Modes

!item [SCREENDEV <device> (default 1)] (!nl)
See Video Modes

!item [SETENV <string>] (!nl)
Set an environment variable, or override one previously set. May be used
   multiple times. Same format as for mint.cnf. This is also used in
   combination with "shell" to correctly run most dektops.
   E.g. setenv TOSRUN c:\toswin\tw-call.app
   See Setting a Desktop.

!item [VIDEO <number> (default 1)] (!nl)
Deprecated; see Video Modes

!label USEHOME
!item [USEHOME <bool> (default true)] (!nl)
Use the contents of the $HOME environment variable in shell_find function.
E.g. usehome = false

!item [CANCEL <comma-separated string-list>] (!nl)
List of words that XaAES interprets as Cancel. A button containing a word
from this list in a dialog or alert will be selected if Undo is pressed.
E.g. cancel = cancel,abbruch,annuler,avbryt,anuluj,afbryd,undo

!item [FILTERS <comma-separated string-list>] (!nl)
List of patterns that will be contained in the filter-menu of
the fileselector.

!item [LOGFILE <filename> (default /xaaes/xa_boot.log)] (!nl)
Set the name of the logfile. If empty, debug-output to file is dis!-abled.
   Examples:
   !begin_itemize !compressed
   !item logfile = ("")
   !item logfile = C:\xaaes.log
   !item logfile = my.log
   !end_itemize

!item [LOGLVL <positive number> (default: 1 in snapshot, 0 in release)] (!nl)
Set verbosity of debug-output, the higher the more gets printed.
   Bit 1 (value 2) of loglvl causes all debug-output also to go to console.
   A value of 0 disables debug-output.
   Examples:
   !begin_itemize !compressed
   !item loglvl = 1 : Debug-output to file
   !item loglvl = 2 : Debug-output to console
   !item loglvl = 3 : Debug-output to console and file
   !item loglvl = 0 : No debug-output
   !end_itemize

!item [SAVE_WINDOWS  = <bool> (default is 'no')] (!nl)
Save XaAES-windows settings when exiting XaAES.
Windows are saved in file /xaaes/xaaes.inf.

!item [ALLOW_SETEXC (default:-1)] (!nl)
 Restrict calls to Setexc by programs started after XaAES.
   !begin_xlist [-1:] !compressed
   !item [-1:] no change
   !item [ 0:] deny all
   !item [ 1:] deny trap-changes (numbers 0-15)
   !item [ 2:] allow all
   !end_xlist

# !item [CLOSE_LASTWIND	<'client' or 'window'>	(default 'window')] (!nl)
#	DEPRECIATED - OBSOLETE (!nl)
#	close_lastwind = 'client' or 'window'

#	Selects what to do when the last window of a client is closed.

#	Setting to 'client' will keep the application whose
#	last window is closed as the top application. This prevents
#	XaAES from putting infront another application when the last
#	window of the application currently infront is closed.

#	Setting to 'window' will make XaAES put the application
#	who owns the foremost window infront, making it active.
#	This is the normal behaviour done by other AES's we thinks.


!end_description

!end_node # General

!begin_node Mouse

See Mouse Configuration for more details on setting specific options.

!begin_description

!item [LRMB_SWAP <bool> (default false)] (!nl)
Swap left and right mouse buttons. If you are left handed, this setting will
   make using XaAES and user desktop more natural. E.g. lrmb_swap = true

!item [DC_TIME <number/ms> (default 50)] (!nl)
Double click time in milliseconds. E.g. dc_time = 35

!item [MP_TIMEGAP <number/ms> (default 3)] (!nl)
Mouse packet time-gap. This is the time (in 200hz timer ticks) that
must pass after a button-release event before a new button-press
event is accepted by the mouse driver (moose.adi). Because of unstable mouse-buttons,
a button-press may follow immediately after a button-release, creating
an "extra" mouse-click. This is especially annoying when releasing
the right-button after a drag-session (Thing's directory-window, for
example), and the "extra-click" fires some unwanted action.

!item [VERTICAL_WHEEL_ID (default 0)] (!nl)
Set which mouse wheel to use for veritcal scrolling.
   E.g. vertical_wheel_id = 1

!item [HORIZONTAL_WHEEL_ID (default 1)] (!nl)
Set which mouse wheel to use for horizontal scrolling.
   E.g. horizontal_wheel_id = 0

!item [VERTICAL_WHEEL_AMOUNT (default 1)] (!nl)
The number of text lines to scroll up or down.
   E.g. vertical_wheel_amount = 3

!item [HORIZONTAL_WHEEL_AMOUNT (default 1)] (!nl)
The number of text characters to scroll left or right.
   E.g. horizontal_wheel_amount = 5

!item [EIFFEL_SUPPORT (default false)] (!nl)
If set F-keys > 10 cause eiffel mouse wheel events.
   E.g. eiffel_support = true


!end_description

!end_node # Mouse

!begin_node Look

!begin_description

!item [RESOURCE <character-sequence> (default xaaes.rsc)] (!nl)
Dialog resource filename E.g. resource = xamno.rsc

!item [WIDGETS <character-sequence> (default xaaeswdg.rsc)] (!nl)
Window widgets resource filename E.g. widgets = widgets/magicwdg.rsc

!item [REMAP_CICONS <bool> (default false)] (!nl)
Use the palette defined in the resource to remap colour icons.
   E.g. remap_cicons = true

!item [SET_RSC_PALETTE <bool> (default false)] (!nl)
Use the palette defined in the resource as the screen palette.
   E.g. set_rsc_palette = true

!item [WIDGET_AUTO_HIGHLIGHT <bool> (default false)] (!nl)
When true, standard window widget are automatically highlighted when the
   mouse hovers over them. This is still very experimental, and widgets are not
   actually highlighted, they are just animated, that is, redrawn in SELECTED
   state. E.g. widget_auto_highlight = true

!item [GRADIENTS <name|[0|1]> (default 0)] (!nl)
Setting gradients to (!B)default(!b)/(!B)1(!b), or the name of a file in the gradients
   folder (/XAAES/GRADIENT/*.GRD). This allows the use of colour gradients
   in the window widgets/AES object renderer in hicolour or truecolour video
   modes. This replaces the use of texture images. E.g. gradients = n_yellow

!item [TEXTURES <name|[0|1]> (default 0)] (!nl)
Setting textures to a nonzero value or a name turns on the use of textures
   in the window widget and aes object renderer in color modes.
   This is the name of a texture-folder in /xaaes/ directory.
   If you use gradients, set this to 0, XaAES boots faster then.
   E.g. textures = img or textures = 0

!item [TEXTURES_CACHE <bool> (default false)] (!nl)
Cache textures for current bit depth in <aes_home>/cache. If you update
   the texture files or change the palette, delete the cache folder, too.
   E.g. textures_cache = yes

!item [PALETTE <character-sequence> (default (!I)internal(!i))] (!nl)
Load a specific palette from /XAAES/PAL/*.PAL, resulting in a tra!-di!-ti!-onal
   GEM look. E.g. palette = gem

!item [BACK_COL <number> (default 13)] (!nl)
Change the default background colour, colour numbers are in standard colour
   palette order. E.g. back_col = 13

!item [MENUBAR <number> (default 2)] (!nl)
Hideable menubar, where "0" is off, "1" is on, and "2" is always on (default).
   E.g. menubar = 0

!item [MENU_LAYOUT <bool> (default 0)] (!nl)
Menubar style, where "1" is short and "0" is long, the traditional GEM look.
   E.g. menu_layout = 1

!item [MENU_ONTOP <bool> (default 1)] (!nl)
Menubar may be overwritten (0) or not (1). E.g. menu_ontop = 0

!item [LANG = <two character language-code> (default from $LANG or AKP-cookie)] (!nl)
Set your preferred language for XaAES here.
   E.g. lang = de

   Currently supported two-character language-codes are:
   !begin_xlist !compressed
   !item [en]  english
   !item [de]  german
   !item [fr]  french  (Thanks to JFL)
   !item [es]  spanish  (Thanks to David)
   !item [it]  italian  (Thanks to Lodovico)
   !item [hu]  hungarian  (Thanks to Joszef)
   !item [ru]  russian  (Thanks to Dima)
   !item [cs]  czech  (Thanks to Bohdan)
   !end_xlist

   No resource-translation is performed for en (see Client Options/rsc_lang).

   All translations for XaAES are located in file xaaes*.rsl (in xaaes folder).

   English, german, french, spanish, italian and hungarian version can be used
   with default Atari charset (fonts).
   For russian version you have to install d_kyr_*.fnt set, located in
   ./fonts/ru/ as system fonts.
   For czech version you have to install iso2a-16.fnt, iso2a-8.fnt and
   iso2a-6-fnt as system fonts (located in ./fonts/cs/).

!end_description

!end_node # Look

!begin_node Feel

!begin_description

!item [MENU <'pull', 'push', 'leave', or 'nolocking'> (default leave)] (!nl)
Determines whether a menu opens by hovering or clicking. If set to push,
   menus have to be clicked to open. Pull is the same as leave, nolocking has
   no effect. (!nl)
   E.g. menu = pull

!item [MENUPOP_PIDS <bool> (default false)] (!nl)
Setting this to true makes XaAES list its clients in the client list menu
   popup using the following format: "PPID(RPPID) -> PID Client nice name"
   where 'PPID' is the physical parent-pid of the Client (which is the AESSYS).
   'RPPID' is the Process ID of the process that called shel_write() to start
   it, it is the "Real Parent PID". 'PID' is the Process ID of the client.
   If set to 'no' or 'false' process ID's are not listed, only the client's
   nice name if available, else its process name (proc_name).
   E.g. menupop_pids = true


!item [REDRAW_TIMEOUT <number/ms> (default 500)] (!nl)
This is the time in ms XaAES will wait for clients to service WM_REDRAW
   messages between actions that generate redraws, like
   moving/closing/opening/etc. windows. If a client is busy and this 'timeout'
   happens, it is marked as lagging and XaAES will service the redraws for it.
   When this happens, XaAES just draws the areas not serviced with dark grey
   colour until the client re-enters evnt_multi(). For slow machines, this
   timeout must be higher (longer) than on faster machines.
   E.g. redraw_timeout = 1500

!item [POPUP_TIMEOUT <number/ms> (default = 10)] (!nl)
Time in milliseconds before popups open. E.g. popup_timeout = 100

!item [POPOUT_TIMEOUT <number/ms> (default 1000)] (!nl)
Time in milliseconds before popups close. E.g. popuot_timeout = 800

!item [POPSCROLL <number> (default 0)] (!nl)
Set number of lines of a popup above which it will be made scrollable.
   E.g. popscroll = 5

!item [NEXT_ACTIVE <'client' or 'window'> (default 'window')] (!nl)
Selects whether the previous active application or the owner of the previous
   topped (or only) window should be set active upon client termination.
   E.g. next_active = client

!item [ALERT_WINDOWS <bitmask> default 0xffff] (!nl)
alert_window is a bitmask indicating which alerts coming via the alert pipe
   will be shown in a window. The idea is that this mask is used to tell the
   AES which alerts you want like this:
   !begin_description !compressed
   !item bit 0 set -> show alerts with no icon
   !item bit 1 set -> show alerts with INFO icon
   !item bit 2 set -> show alerts with QUESTION icon
   !item bit 3 set -> show alerts with STOP icon  etc., etc.
   !end_description
   Because there is no consideration as to which icon is used (for example,
   kernel's PROCESS KILLED alerts have icon #1, the same as used for other
   warnings/informative ALERTS), the implemention is not complete.

   So for now use this to either turn off or on alerts altogether. To turn on
   alert windows, use a mask where all bits are set, 0xffff, and to turn off
   clear all bits, 0x0000. E.g. alert_windows = 0x0000

   THIS IMPLEMENTATION IS NOT DEFINATE AND ONLY PARTIAL!

!item [NAES_COOKIE <bool> (default false)] (!nl)
Fake nAES cookie. Some applications need to think they are running
   under N.AES.

!item [LEAVE_TOP_BORDER <bool> (default false)] (!nl)
Define if windows are allowed to move over top of screen (crashes some VDI).
   E.g. leave_top_border = 1

!item [FOCUS <program>] (!nl)
Set first focus. The program given by <program> will be the first to receive
   input after startup and have the menu and top-window if any. The special
   name 'shell' sets the focus to the desktop given by the shell-directive.

!item [XA_BUBBLE <number> (default:0)] (!nl)
If you want to use the XaAES-builtin bubble-help, set this. You can
   deactivate any external bubble-app if you use xa_bubble.
   !begin_xlist !compressed
   !item [1:] windows-tooltip-style
   !item [2:] apple-ballon-help-style
   !end_xlist
   E.g. xa_bubble = 1

!item [DESCRIBE_WIDGETS <number> (default:0)] (!nl)
If set not 0, display name/function of a widget when the mouse is placed
   (not moved!) twice above a widget.
   !begin_xlist !compressed
   !item [1:] windows-tooltip-style (recommended)
   !item [2:] apple-ballon-help-style
   !end_xlist
   E.g. describe_widgets = 1

!item [KEYBOARDS = <key>, <layout1>, <layout2>, ...] (!nl)
If set, you can switch between different keyboard tables.
   !begin_xlist [<layout*>:] !compressed
   !item [<key>:]     ALT-CTRL shortcut key for switching between keyboard-tables.
              NOTE: The character you use should be present and equal in
                    ALL layouts.
   !item [<layout*>:] Names of keyboard.tbl files (without .tbl extension).
              Please copy the needed files from /keyboard/*/ to
              /mint/1-*-*/ folder.
   !end_xlist
   E.g. keyboards = <, british, german, french
 
!end_description

!end_node # Feel


!begin_node Iconify

There are some complex details regarding the use of the iconify settings
in XaAES. For more detailed information see section Iconifying.

!begin_description

!item [ICNFY_ORIENT <hex value> (default 3)] (!nl)
Screen start position and direction. E.g. icnfy_orient = 0x103

!item [ICNFY_WIDTH <number> (default 72)] (!nl)
Width in pixels before next icon is placed next to each other.
   E.g. icnfy_width = 80

!item [ICNFY_HEIGHT <number> (default 72)] (!nl)
Height in pixels of new row for iconified icons. E.g. icnfy_height = 64

!item [ICNFY_LEFT <number> (default 0)] (!nl)
Number of pixels from left edge of screen. E.g. icnfy_left = 100

!item [ICNFY_RIGHT <number> (default 0)] (!nl)
Number of pixels from right edge of screen. E.g. icnfy_right = 2

!item [ICNFY_TOP <number> (default 0)] (!nl)
Number of pixels from top edge of screen. E.g. icnfy_top = 20

!item [ICNFY_BOTTOM <number> (default 0)] (!nl)
Number of pixels from bottom edge of screen. E.g. icnfy_bottom = 32

!item [ICNFY_REORDER_TO <time in ms> (default is 0)] (!nl)
Setting this to a non zero value will make XaAES rearrange the cur!-rent!-ly
   iconified windows when an iconified window is uniconified or hidden. This
   will also, later on, reorder iconified windows when an application that
   quits had iconified windows. E.g. icnfy_reorder_to = 100
 
!end_description

!end_node # Iconify


!begin_node Font-settings

!begin_description

!item [FONT_ID <number> (default 1)] (!nl)
Standard GDOS font id for windows and stuff.

!item [STANDARD_POINT <number> (default 10)] (!nl)
Size of the 'standard' AES font (for window titles, etc) in high resolution.

!item [MEDIUM_POINT <number> (default 9)] (!nl)
Size of the 'standard' AES font for window titles, etc) in low resolution.

!item [SMALL_POINT <number> (default 8)] (!nl)
Size of the 'small' AES font.

!item [INFOLINE_POINT <number> (default 10)] (!nl)
Size of the AES font in window infoline.

!item [XAW_POINT <number> (default 10)] (!nl)
Define font-size for XaAES windows in points.

!end_description

Fonts for non-latin charsets like russian can be found in folder /fonts/.

!end_node # Font-settings


!begin_node Applications

!begin_description

!item [APP_OPTIONS <comma-separated string-list>] (!nl)
See Client Options

!item [CTLALTA_SURVIVORS <comma-separated string-list>] (!nl)
The strings are the filename part of the program file, padded with spaces
   to fit 8 characters. This is NOT the 'nice' name. So, if your Toswin2 binary
   is named "tw2.app", use "tw2~~~~~" (5 spaces). Each app-name is separated
   with comma.

This will allow you to specify which applications XaAES does not
   attempt to terminate when user presses CTRL + ALT + A to quit all
   applications. Normally, this keycombo quits all running applications leaving
   only XaAES. However, most of the time, keeping certain app!-li!-ca!-tions running
   is preferred, such as the desktop, the taskbar, av-server app!-li!-ca!-tion, etc.

   One special name is "_aes_shell_", which will prevent XaAES from
   terminating the desktop loaded via shell configuration variable.
   One can still use the name of the desktop program if it is known, but an
   easier way is to use "_aes_shell_", as that will work without further
   modifications when one changes desktop from, say, Thing to Jinnee.

   If you want to bypass this setting, and quit ALL applications, leaving only
   XaAES, you can press CTRL + SHIFT + ALT + A. Applications that do not act on
   AP_TERM will also survive. The following will keep the desktop, taskbar and
   toswin2 running after a CTRL + ALT + A action:

!begin_sourcecode
     ctlalta_survivors = "_aes_shell_", "taskbar ", "toswin2 "
!end_sourcecode

Applications that do not act on AP_TERM will also survive.

!item [KILL_WO_QUESTION	<comma-separated string-list>] (!nl)
Applications found in this list will be killed immediately during shutdown.
   The same rule as for CTLALTA_SURVIVORS applies to the strings.
   E.g. kill_wo_question = "procalc ", "mintsett", "st-guide", "xcontrol"

!end_description

!end_node # Applications


!begin_node Paths

!begin_description

!label LAUNCHPATH
!item [LAUNCHPATH <character-sequence> (default is XaAES directory)]

Define the initial directory that is opened by the XaAES launcher to start
   programs. A pattern to select typical executable files may be appended.
   E.g. launchpath = u:\usr\gem\|*.prg|*.app|!*.*|*.acc (!nl)
   See also: XaAES Pattern Matching

!item [CLIPBOARD <character-sequence> (default c:\clipbrd)] (!nl)
Set the GEM clipboard directory. E.g. clipboard = c:\home\clipbord

!item [ACCPATH <character-sequence> (default c:\)] (!nl)
Set the location that XaAES will try to load accessories from. When ACCPATH
   is present in the Environment this precedes the config va!-ri!-able. (!nl)
   E.g. accpath = c:\acc

!end_description

!end_node # Paths


!begin_node Programs

!begin_description

!label snapshot
!item [SNAPSHOT	<character-sequence>] (!nl)
Define a snapshot program or screen grabber. The external snapshot program
   is called with the arguments: ' 0 T 1 [x y w h] ' where T=0: full screen and
   T=2: top window. (!nl)
   If x, y, w, h are provided, this rectangle should be snapped. If XaAESSnap
   is not loaded, the here defined program is called, if present.
   E.g. snapshot = c:\apps\snapshot.prg

!item [HELPSERVER <comma-separated string-list>] (!nl)
Help file formats and where to find the program you want to handle them.
   This variable may be defined more than once to allow different programs for
   different file types. E.g. helpserver = HYP,ST-GUIDE,c:\st-guide.acc

!item [SHELL <string>] (!nl)
Path and filename of the program you wish to use as your desktop.
   E.g. shell = c:\teradesk\teradesk.prg

!item [RUN <string>] (!nl)
Runs a program at startup. Must be path and filename. Can be used more
   than once. E.g. run c:\taskbar\taskbar.prg


!end_description

!end_node # Programs


!begin_node Setting a Desktop

In order for a desktop to function correctly, certain environment variables
usually need to be set up first. The following are examples known to function
with that desktop, when the appropriate files are in the described locations.
The program set in "shell" will be run after all other programs set with "run"
have been executed.

  (!B)The use of replacement file selectors is not recommended!(!b)

The length on the string used to set AVSERVER and FONTSELECT is 8 cha!-rac!-ters
in total, padded with spaces. This information is usually available in the
documentation that comes with your chosen desktop.

(!U)Thing!:(!u)

!begin_sourcecode
shell = c:\thing\thing.app
setenv THINGDIR   u:\c\thing
setenv AVSERVER   "THING   "
!end_sourcecode

  optional:

!begin_sourcecode
setenv FONTSELECT "THING   "
!end_sourcecode

Note: When using thing, if THINGDIR is not set, $HOME will be used instead.


(!U)Jinnee:(!u)

!begin_sourcecode
setenv AVSERVER   "JINNEE  "
setenv FONTSELECT "JINNEE  "
shell = c:\jinnee\jinnee.app
!end_sourcecode


(!U)Teradesk:(!u)

!begin_sourcecode
shell = c:\teradesk\desktop.prg
setenv AVSERVER   "DESKTOP "
!end_sourcecode

  optional:

!begin_sourcecode
setenv FONTSELECT "DESKTOP "
!end_sourcecode

You can start Teradesk or Thing from the XaAES launcher as well. It is possible
to set console as the shell, but if these are not AV servers, there is however
a standalone AVSERVER available (oldish).
 
!end_node # Setting a Desktop

!end_node # Global Commands

!begin_node Client Options

XaAES allows for any application to be tweaked in how it acts, looks or feels.
XaAES itself can be modified by using the application name (!B)aessys(!b).

The syntax is:

!begin_sourcecode
<app_option>: app_options = <app-name>, <options-list>

<options-list>: <options-list>, <option>

<option>: <option-name> = <value>
!end_sourcecode

The app-name above is the filename part of the program file, 'default' affects
all applications. A 'default' configuration has to be specified first. With
appname being 'aessys', you can specify the configuration for the aessys's
windows, like taskmanager, etc.

!begin_description

!item [WINDOWNER <bool> (default false)] (!nl)
Will make XaAES show the name of the application owning the window in the
   window's title.

!item [NOHIDE <bool> (default false)] (!nl)
Windows will not have the HIDE widget, and thus cannot be hidden.

!item [XA_NOHIDE <bool> (default true)] (!nl)
Windows containing form_do() sessions will not have the HIDE widget and thus
   not be hidable. Autosort is one application that cannot have its form_do()
   session hidden (or moved).

!item [XA_NOMOVE <bool> (default true)] (!nl)
Windows containing a form_do() session will not be moveable. These are
   usually dialogs or Alertboxes. The XaAES file selector is affected by this
   setting, when the application is "aessys". Autosort is one such application
   that requires the setting "true".

!item [NOLEFT <bool> (default false)] (!nl)
Windows can not be moved off screen to the left.

!item [NOLIVE <bool> (default false)] (!nl)
Disables live window move, resize, etc.

!item [THINWORK <bool> (default false)] (!nl)
The "inner" 3d-effect is disabled. This 3d-effect 'frames' the work-area of
   windows in a 3d-ish frame.

!item [WHEEL_REVERSE <bool> (default false)]

!item [WINFRAME_SIZE <number> (default 1)] (!nl)
Set the size of window frame. A value of -1 sets "overscan windows", which
   contains no frame or shadowing. It is not recommended to set a value of -1
   yet! A value of 0 will make windows without any borders. Positive values
   make window-frames larger. Be aware that no window frame border usually
   means no window resizing by grabbing the brorder (because there is nothing
   to grab).

!item [NAESFF <bool> (default false)] (!nl)
N.AES Full Fix. When set to true, XaAES will send full WM_REDRAW message
   when all four window coordinates change, which happens when windows are
   FULLed maximized). This will fix redraw problems with apps like Jinnee.

!item [INHIBIT_HIDE <bool> (default false)] (!nl)
Setting this will prevent the app from being hidden by XaAES, which is very
   handy for applications like Taskbar, zTask, or FreeGEM. It can be considered
   the same an "always on top" setting found on other OS's.

!item [CLWTNA <number> (default 1)] (!nl)
(Close Last Window Tops Next App) Allows you to choose what to do when the
   last window of a client or application that is on top has been closed.
   This argument takes a value of 0, 1 or 2, which have the following meaning:

   !begin_blist
   !item [0] - This keep the client whose last window is closed from being untopped.
       This prevents XaAES from topping another application when the last
       window it owns is closed.

   !item [1] - This will top the owner of the window below the closed window. That is
       the owner of the window previously ontop will be topped. This is the
       normal behaviour found on other AESs.

   !item [2] - This will top the previously topped client, regardless of win!-dows. Even
       when the previously active client don't have any win!-dows, it will
       get topped.
   !end_blist

!item [ALT_SHORTCUTS <number> (default 3)] (!nl)
Controls how XaAES handles ALT-shortcuts. Since version 0.999 every
   standard GEM-application gets ALT-shortcuts for dialogs that use form_do,
   even when there are no shortcuts defined with WHITEBAK in the resource file.

   The shortcuts defined in the clients' resource file are always there.

!begin_itemize
!item  0: no shortcuts
!item  1: shortcuts for alerts
!item  2: shortcuts for dialogs
!item  3: shortcuts for dialogs and alerts
!end_itemize

!item [ICN_PAL_NAME = <string>] (!nl)
Set mapping-palette for icons. (!nl)
   Icon-colours for the app will be mapped according to the specified palette.
   The global command "palette" must be set. To remap widgets set icn_pal_name
   for aessys. (!nl)
   This only has an effect if icn_pal_name and pal differ. The palette
   specified by icn_pal_name has to be in the pal-dir. Currently only 8bit-
   icons are supported. (!nl)
   The palette given in the rsc-file precedes the palette set by icn_pal.
   App-option "remap_cicons" must be set to "true".
   Examples:
   !begin_itemize !compressed
   !item Set app-icon-palette for all apps: (!nl)
     app_options = default, ..., icn_pal_name = nvdi

   !item Set app-icon-palette for a specific app: (!nl)
     app_options = some-app, ..., icn_pal_name = gem

   !item Set widgets-palette: (!nl)
     app_options = aessys, ..., icn_pal_name = nvdi
   !end_itemize

item [RSC_LANG = <value> (default: 0)] (!nl)
If set, XaAES creates or uses a trans!-la!-tion file (.rsl) for
   this application.
   !begin_xlist !compressed
   !item [0] = No translation
   !item [1] = Read an existing translation file (or create, if not present)
   !item [2] = Always create a translation file (overwrite existing one)
   !end_xlist

   The .rsl file is created in the same folder where the rsc-file is, you can
   edit (translate) it and, at next program start, XaAES replaces the original
   resource strings with the translated ones (according to setting of option
   "lang =" in xaaes.cnf).

  If your translated string is longer than the original, you may replace the
  "nn:" by "nn+" before the original. Then the translation will be reallocated.

  Useful only for menus: (!nl)
  It's enough to use + before the menu-TITLE, e.g. "nn+ Options". The whole
  Options-menu will be resized then.

!item [IGNORE_RSC_SIZE = <bool> (default: false)] (!nl)
If true difference between resource-filesize and size given in rsc-header
   is no error.
 
item [SUBMENU_INDICATOR = <value> (default: 1)] (!nl)
Controls how the attachment of a submenu is indicated.
!begin_itemize !compressed
!item  0: Use "right arrow" (0x03). Same as AES4.1/N.AES, but might not be available in all fonts.
!item  1: Greater than sign ">" (Classic XaAES)
!end_itemize
 
!end_description

!end_node # Client Options

!begin_node Client Examples

Some working examples of applications. Some that function better, others are
more for visual effect.

Note the use the application named "aessys". This is the AES itself, and
any settings here will be used by default for all XaAES windows.

(!U)Examples:(!u)

 !begin_xlist [app_options =] !compressed
 !item [app_options =] default, thinwork = true, winframe_size = -1, xa_nomove = false,
               clwtna = 0
 !item [app_options =] aessys, thinwork = true, winframe_size = 0, xa_nomove = false,
               rsc_lang = 1
 !item [app_options =] autos401, xa_nomove = true
 !item [app_options =] ataricq, thinwork = true, winframe_size = 0
 !item [app_options =] jinnee, naesff = true
 !item [app_options =] taskbar, inhibit_hide = yes, clwtna = true, thinwork = true,
               winframe_size = 0
 !item [app_options =] DESKTOP, alt_shortcuts = 1
 !end_xlist

!end_node # Client Examples

!end_node # xaaes.cnf

!begin_node Ctrl-Alt-Shortcuts

By pressing certain letters together with CTRL + ALT, you can access nearly
every function of XaAES.

These shortcuts are defined in the file(s) "xa_help.*", according to the
selected language.

!begin_itemize
!item  CTRL + ALT + 0 : Switch menubar on/off (must be enabled in xaaes.cnf)

!item CTRL + ALT + [keyboard switch] : Defined in xaaes.cnf, this key combination
                                  switches between different keyboard layouts.

!item CTRL + ALT + . : Make current window-content full-screen

!item CTRL + ALT + : : Create a background image from current screen

!item CTRL + ALT + + : Increase log-level

!item CTRL + ALT + - : Decrease log-level

!item CTRL + ALT + A : Terminates all applications (a list of exceptions can
                  be specified)

!item CTRL + ALT + B : Open System window

!item CTRL + ALT + E : Open window sub menu

!item CTRL + ALT + D : Open the screenshot dialog - see snapshot config option

!item CTRL + ALT + F , CTRL + ALT + L : Open or refresh task-manager

!item CTRL + ALT + H : Halt system (and execute SDMASTER if set)

!item CTRL + ALT + HELP : Open about window

!item CTRL + ALT + I : (Un-)iconify current top window

!item CTRL + ALT + J : Restart XaAES

!item CTRL + ALT + K : Launch a program

!item CTRL + ALT + M : Recover mousepointer

!item CTRL + ALT + N : Load gradient

!item CTRL + ALT + SHIFT + N : Change background-image

!item CTRL + ALT + P : Restore palette in colour depth of 8-bits or less

!item CTRL + ALT + SHIFT + P : Load palette

!item CTRL + ALT + Q , CTRL + ALT + G : Quit XaAES (and execute SDMASTER if set)

!item CTRL + ALT + R : Attempt to recover a system that has locked up

!item CTRL + ALT + S : Save current XaAES-windows-settings in file xaaes.inf

!item CTRL + ALT + T, HOME : Redraw screen

!item CTRL + ALT + U : Close current window

!item CTRL + ALT + V : Unhide all applications

!item CTRL + ALT + W : Global window cycling

!item CTRL + ALT + SHIFT + W : Top top-window of previous application

!item CTRL + ALT + X : Hide all except the currently focused application

!item CTRL + ALT + Y : Hide currently focused application

!item CTRL + ALT + SPACE : Open main menu bar

!item CTRL + ALT + SHIFT + SPACE : Open menu in current window if it has one,
                              else open main menubar

!item CTRL + ALT + TAB : Cycle open applications

!item CTRL + ALT + SHIFT + TAB : Top previous application

!item CTRL + ALT + INSERT : Full current window
!item CTRL + ALT + CURSOR-UP : Grow current window
!item CTRL + ALT + CURSOR-DOWN : Shrink current window
!item CTRL + ALT + CURSOR-RIGHT : Grow width of current window
!item CTRL + ALT + CURSOR-LEFT : Shrink width of current window

!item CTRL + ALT + SHIFT +
   CURSOR-UP    Move current window up (!nl)
   CURSOR-DOWN  Move current window down (!nl)
   CURSOR-RIGHT Move current window right (!nl)
   CURSOR-LEFT  Move current window left (!nl)
!end_itemize

(!U)Shortcuts/navigation in XaAES fileselector:(!u)

!begin_itemize

!item CTRL + B : Realtime build directories

!item CTRL + T : Tree view

!item CTRL + N : Sort by name

!item CTRL + D : Sort by date

!item CTRL + S : Sort by size

!item CTRL + E : Sort by extension

!item CTRL + X : No sorting

!item CTRL + SPACE : Reverse sort-order

!item CTRL + I : Toggle case-sensitivity of search-pattern

!item CTRL + / : Toggle unix/TOS-style path-usage

!item CTRL + O : Open window menu (navigation with CURSOR keys and RETURN)

!item CTRL + C : The path and the marked file (if any) is copied to the Clipboard

!item CTRL + F : Create folder (type name in editbox)

!item CTRL + R : Rename selected file/folder (type new [path]name in editbox)

!item CTRL + V : View selected file

!item DELETE : Delete selected file/empty folder

!item ALT + " + " : Increase the fontsize in listbox

!item ALT + " - " : Decrease the fontsize in listbox

!end_itemize

(!U)Shortcuts in the taskmanager:(!u)

!begin_itemize

!item DELETE : Terminate selected program (same as trashcan)

!item SHIFT + DELETE : Kill selected program (same as skull)

!item TAB : Top selected program or window

!end_itemize

(!U)Shortcuts for all list-windows:(!u)

!begin_itemize

!item SHIFT + CURSOR-UP/DOWN : Page up/down

!item SHIFT + CURSOR-LEFT/RIGHT : Page left/right

!end_itemize

List-box selected:

!begin_itemize !compressed
!item CURSOR-RIGHT              Open tree
!item CURSOR-LEFT               Collapse tree
!item CURSOR UP/DOWN            Move the cursor
!item PageUp/Down(SHIFT+CU/CD)  Pages the filelist
!item CLEAR/HOME                Jump to top of list
!item SHIFT+CLEAR/HOME          Jump to end of list
!end_itemize

List-box not selected:

!begin_itemize !compressed
!item CURSOR-RIGHT              Scroll right
!item CURSOR-LEFT               Scroll left
!item CURSOR UP/DOWN            Scroll up/down
!end_itemize

If an entry is selected in the list-box, CURSOR-RIGHT focusses the edit-field,
so the selection can be edited.

!begin_node Remap shortcuts

It's possible to remap Ctrl-Alt-Shortcuts according to your needs. Edit the
respective xa_help.* file in texteditor QED, the synopsis is as follows:

!begin_blist [<original>#<new># :]
!item [<original>#<new># :] Assigns <new> to <original> while <original>
                              remains valid.

!item [<original># :] Invalidates <original>.
!end_blist

The keys # and \ must be quoted (write \# or \\).

The shortcut-mapping is evaluated when the about-window is opened, so after
editing no XaAES restart is necessary.

Examples:

!begin_blist [SHIFT+W#ESC# :]
 !item [SHIFT+W#ESC# :] Top top-window of previous application (!nl)
                -->  CTRL-ALT-ESC does the same as CTRL-ALT-SHIFT-W

 !item [SHIFT+W# :] --> Invalidate CTRL-ALT-SHIFT-W

 !item [L#\\# :] --> CTRL-ALT-\ is the same as CTRL-ALT-L
!end_blist

!end_node # Remap shortcuts

!end_node # Ctrl-Alt-Shortcuts

!begin_node XaAES Main-Menu

!subtoc [all] !depth 2

!begin_node About

(!U)The XaAES Aboutbox:(!u)

Instead of listing lots of contributors to XaAES and part of the GPL as in
previous versions, the main web address for MiNT and the GPL copyright are now
mentioned.

Additionally the file xa_help.txt is displayed if present.
This file may contain some special tags:

!begin_itemize
!item (!I)Italic:(!i) <i> <text> </i>

!item (!B)Bold:(!b) <b> <text> </b>

!item (!U)Underlined:(!u) <u> <text> </u>
!end_itemize

If a "less-than-sign" (<) is preceeded by backslash (escaped, eg. \< ),
is gets printed and not interpreted.

!end_node # About

!begin_node Launch Program

There is no desktop needed to launch programs as XaAES is able to start them
itself using the Launcher. It opens the fileselector in LAUNCHPATH. You may
also select any other directory from where to start a program.

If a client is launched from launchpath, and the entry is a symlink, home_path
for that client is set to the directory of the link-target. It behaves then as
if started from that directory, and finds its resource and other files.

!end_node # Launch Program

!begin_node Launch Desk

This option is used to restart the chosen desktop as defined in the XaAES
configuration file variable SHELL, e.g. shell=c:\teradesk\desktop.prg

!end_node # Launch Desk

!begin_node Taskmanager

In addition to the features described on the (!url [unofficial XaAES page] [http://xaaes.gokmase.com/docs.php?chapter=6.htm#6.4]),
the following has been added:

!begin_description

!item [List]
 List is a tree, whereas clients are parent and their windows the children.

!item [Select window or client]
 If exited with Ok, and a client is selected, this client is topped. If a
   window is selected, this window is topped. Unselect with (!B)Space(!b)
   or (!B)Insert(!b).

!item [Processes]
 Also lists non-AES apps

!item [Memory]
 Displays memory statistics found in /kern/meminfo

!item [Stop/Continue]
Similar to killing a process by clicking on the skull it may be stopped by
   clicking on the bed (the left one). Continue a stopped process by clicking
   on the right bed (the one with the alarm)

!item [Load]
Display actual CPU and RAM load and load-average. By selecting the
   "toggle load"-button this can be switched off and on.

!item [Process-Information]
Displays more process-information in a table:

!begin_description
   !item [ppid] - Process-ID of a processes parent

   !item [pgrp] - The program-group of a process

   !item [DOM] - Domain where 'M' is MiNT-domain, 'T' is TOS-domain.

   !item [STATE] - where...

      !begin_description !compressed
           !item [Cur] = Current process

           !item [Run] = Process is running

           !item [Wait] = Process is waiting

           !item [IO] = Process is waiting for IO

           !item [Zomb] = Zombie

           !item [TSR] = Terminated and resident

           !item [STOP] = Stopped

           !item [Slct] = Waiting in Fselect. (For more details refer to
               /doc/programmer/mint.txt)
      !end_description

   !item [SZ] - Size. This is the total amount of memory the process uses.

   !item [CPU] - CPU Time. Total count in 5ms Ticks of CPU usage by the process.

   !item [%] - Percentage of the above. Note that this will not sum up to 100 most of
       the time because terminated processes do not appear in the list.

   !item [args] - The commandline arguments, minus the process name.

!end_description
!end_description

The taskmanager is only updated when opened. It can be refreshed by pres!-sing
CTRL + ALT + F or CTRL + ALT + L.
 
!end_node # Taskmanager

!begin_node System-Window

In addition to the features described on the (!url [unofficial XaAES page] [http://xaaes.gokmase.com/docs.php?chapter=6.htm#6.2.2]),
the following has been added:

!begin_itemize
!item Alerts have a timestamp and no '|' inside

!item Environment , entries are sorted by name

!item New list-entry "System" with the entries

!begin_itemize
        !item Screen-layout (resolution, bit-depth, pixel-format)

        !item Display CPU information from /kern/cpuinfo

        !item Information about memory-protection

        !item Kernel version from /kern/version
!end_itemize
!end_itemize

!end_node # System-Window

!begin_node Quit All Apps

Closes all applications running under XaAES, which include those started from
the desktop shell.
 
!end_node # Quit All Apps


!begin_node Quit XaAES

This option quits XaAES.
 
!end_node # Quit XaAES

!end_node # XaAES Main-Menu

!begin_node Fileselector

Only changes from version 0.998 are described here. For extensive
do!-cu!-men!-ta!-tion of the fileselector see the (!url [unofficial XaAES page] [http://xaaes.gokmase.com/docs.php?chapter=6.htm#6.3])
online.
 
!begin_node File Listing and Matching

!begin_itemize

!item Sorting is case-sensitive, i.e. "Z" is placed before "a" (like command "ls"
  does on many systems).

!item File-Pattern is case-sensitive except the filesystem is uppercase like FAT)
  or the caller runs in TOS-domain. See also: XaAES Pattern Matching

!item  If the fileselector finds a match while typing that, match is returned to the
  caller on OK (Return key).
!end_itemize

!end_node # File Listing and Matching

!end_node # Fileselector

!begin_node XaAES Pattern Matching

XaAES supports the following meta-characters for pattern-matching:

!begin_itemize
!item Any character: '?'

!item Any count of any character: '*'

!item Character-class: '['<characters>'] '

!item Invert match: '!'

!item Concatenate patterns: '|' between patterns

!item Case-insensitivity of pattern: '|' as first character
!end_itemize

Matching *[] , *!, *![] , !<whole pattern> is possible. Patterns con!-ca!-te!-na!-ted 
with | will result in any pattern to be tested for a match.

This allows for example:

!begin_sourcecode
launchpath=<somepath>\*.prg|*.app|*.tos|*.ttp|*.acc|!*.*
!end_sourcecode

to filter for extensions typical for executable files.

If '|' is the first character the whole pattern list is handled case-
insensitive.

!end_node # XaAES Pattern Matching

!begin_node Environment

XaAES uses the following environment variables when available, but they do not
need to be present in xaaes.cnf:

!begin_blist [SDMASTER]
!item [ACCPATH]
 Set accessories path. See Paths

!item [TOSRUN]
Define application for running text mode (console) programs.

!item [HOME]
Set the home path, often set in mint.cnf. See Paths

!item [PATH]
Default search paths. Usually already set by mint.cnf or the system
   (console startup script). Used in shel_find for locating applications.

!item [SDMASTER]
 Shutdown master. If set to an existing program, it is executed when leaving
   XaAES by a hotkey. See Ctrl-Alt-Shortcuts

!end_blist

Environment variables are also used when setting a desktop to be used with
XaAES, see Setting a Desktop.

!begin_blist
!item [SDL_VIDEODRIVER]
Help control video rendering on ARAnyM when using fVDI.
   E.g. setenv SDL_VIDEODRIVER gem
!end_blist

Any environment variables set in (!B)mint.cnf(!b) can be over-ridden by setting the
same variable in (!B)xaaes.cnf(!b). You can also define any environment variables which
could be used in a console program or by any other application.
E.g. setenv GEMJINGPATH u:\c\gemjing\gemjing.prg
 
!end_node # Environment

!begin_node Mouse Configuration

In the XaAES configuration file xaaes.cnf, there are various configuration
settings available for the mouse and the mousewheel.
 
!begin_node Swapping Mouse Buttons

To swap the mouse buttons, because you are lefthanded, use this setting:

!begin_blist
!item [LRMB_SWAP <bool> (default false)] (!nl)
E.g. lrmb_swap = true
!end_blist
 
!end_node # Swapping Mouse Buttons

!begin_node Mouse Timings

The following setting can be useful in ensuring a more comfortable
user experience:

!begin_blist

!item [DC_TIME <number/ms> (default 50)] (!nl)
 Double click time in milliseconds. E.g. dc_time = 35

!item [MP_TIMEGAP <number/ms> (default 3)] (!nl)
Mouse packet time-gap. This is the time (in 200hz timer ticks) that must
   pass after a button-release event before a new button-press event is
   accepted by the mouse driver (moose.adi). Because of unstable mouse-buttons,
   a button-press may follow immediately after a button-release, creating an
   "extra" mouse-click. This is especially annoying when releasing the
   right-button after a drag-session (as in Thing's directory window), and the
   "extra click" fires some unwanted action. E.g. mp_timegap = 5
!end_blist
 
!end_node # Mouse Timings

!begin_node Using the Mousewheel

In order to use the mousewheel, (!B)moose_w.adi(!b) must be loaded. If your mouse!-wheel
is not working, check that the file is present in the XaAES folder and named as
described. If it is present and named correctly, it will be the first mouse
driver that XaAES looks for. Otherwise it will look for and load (!B)moose.adi(!b).
If both are present, the (!B)moose_w.adi(!b) is loaded.

There are currently four settings available that are used to set wheel
configuration:

!begin_blist
!item [VERTICAL_WHEEL_ID (default 0)] (!nl)
 Set which mouse wheel to use for veritcal scrolling.
   E.g. vertical_wheel_id = 1

!item [HORIZONTAL_WHEEL_ID (default 1)] (!nl)
 Set which mouse wheel to use for horizontal scrolling.
   E.g. horizontal_wheel_id = 0

!item [VERTICAL_WHEEL_AMOUNT (default 1)] (!nl)
 The number of text lines to scroll up or down.
   E.g. vertical_wheel_amount = 3

!item [HORIZONTAL_WHEEL_AMOUNT (default 1)] (!nl)
 The number of text characters to scroll left or right.
   E.g. horizontal_wheel_amount = 5
!end_blist

With (!B)vertical_wheel_id(!b) you can choose which wheel you want to use as
the vertical wheel. Likewise with (!B)horizontal_wheel_id(!b), you set the ID
of the wheel you want to define as the horizontal wheel. Do NOT set the same
value for both vertical and horizontal wheel ID's.

With (!B)vertical_wheel_amount(!b) you can set the amount of lines to scroll
per turn of the vertical wheel. Likewise, you can set the amount of columns to
scroll per turn of the horizontal wheel using (!B)horizontal_wheel_amount(!b).
The value for these configuration variables must be a number between 1 and 20.
Per now, this actually sets the number of WM_ARROWED messages send to the
application per turn of the wheel.

For those with mouse connected through an Eiffel interface, support for the
mousewheel is enabled with:

!begin_blist
!item [EIFFEL_SUPPORT (default false)] (!nl)
 If set, F-keys > 10 cause eiffel mouse wheel events.
   E.g. eiffel_support = true
!end_blist
 
!end_node # Using the Mousewheel

!end_node # Mouse Configuration

!begin_node Iconifying

!begin_blist
!item [ICNFY_REORDER_TO <time in ms> (default is 0)] (!nl)
 Setting this to a non zero value will make XaAES rearragne the currently
   iconified windows when an iconified window is uniconified or hidden. This
   will also, later on, reorder iconified windows when an application that
   quits had iconified windows. E.g. icnfy_reorder_to = 100
!end_blist

!begin_node Orientation and Direction

!begin_blist
!item [ICNFY_ORIENT <hex value> (default 3)] (!nl)
Screen start position and direction. This controls how XaAES arranges
   iconified windows. Currently the following orientations are available:

!item [0]
Iconified windows are stacked from top to bottom, starting at the top/left
   of the screen. When one column is full, the next column is used.

!item [1]
Iconified windows are stacked from top to bottom, starting at the top/right
   of the screen. When a column is full, windows are stacked in the column to
   the left of the filled one.

!item [2]
Iconified windows are placed in rows going left to right, starting at the
   top/left of the screen. When a row is full, the row below the current one
   is used.

!item [3]
Iconified windows are placed in rows going left to right starting at the
   bottom/left of the screen. When a row is full, the row above the current
   one is used.
!end_blist


If bit 8 in icnfy_orient value is set, then the starting position will be
reversed. This means that for orientation 0, the windows will be stacked bottom
to top, starting at the bottom-most position instead.
Using a hexadecimal value is easy for better readability.

Examples:

!begin_blist
!item [icnfy_orient = 0x003] (!nl)
 Start at left/bottom of the screen and go towards the right/bottom.

!item [icnfy_orient = 0x103] (!nl)
Start at right/bottom corner and go towards the left/bottom corner.
!end_blist
 
!end_node # Orientation and Direction

!begin_node Iconify Icon Size

!begin_blist
!item [ICNFY_WIDTH <nunber> (default 72)] (!nl)
 Width in pixels before next icon is placed next to each other.
   E.g. icnfy_width = 80

!item [ICNFY_HEIGHT <nunber> (default 72)] (!nl)
Height in pixels of new row for iconified icons. E.g. icnfy_height = 64
!end_blist

!end_node # Iconify Icon Size

!begin_node Edge of Screen

!begin_blist
!item [ICNFY_LEFT <number> (default 0)] (!nl)
 Number of pixels from left edge of screen. E.g. icnfy_left = 100

!item [ICNFY_RIGHT <number> (default 0)] (!nl)
Number of pixels from right edge of screen. E.g. icnfy_right = 2

!item [ICNFY_TOP <number> (default 0)] (!nl)
Number of pixels from top of screen. E.g. icnfy_top = 20

!item [ICNFY_BOTTOM <number> (default 0)] (!nl)
Number of pixels from bottom of screen. E.g. icnfy_bottom = 32
!end_blist

These variables define the distance from left, right, top and bottom edges of
the screen the iconified windows should be placed. This means if icnfy_left is
set to 4, iconified windows are always placed a minimum of 4 pixels from the
left edge of the screen. If you want to protect the area of the taskbar, for
example, you can use icnfy_bottom = 28, as that makes sure iconified windows
never get closer to the bottom of the screen than 28 pixels.

!end_node # Edge of Screen

!end_node # Iconifying

!begin_node Theming and Extended Textures

XaAES allows textures to be used in various parts of the GEM interface.
Individual IMG files may be changed according to your preference, or a complete
theme can be used. Some of the files and themes mentioned here may be available
on the unofficial XaAES website.

No IMG files or file names are absolutely required, as there are no pro!-blems
caused if any are missing. There is a specific layer order in which the
textures are used allowing certain textures to be automatically used when
others are missing.

XaAES has a specific naming convention for the different parts that are
textured, a system which was extended to allow individual parts of scroll bars
and unfocused windows to be textured as well. There are now skinning and
texture conversion tutorials available on the internet.

!begin_node Textures from Previous Versions

The texture images and naming conventions from previous versions are still
valid, for those who have created their own, or have a desired look they wish
to continue using with newer versions of XaAES. Sharing themes, textures or
screenshots will help to make more themes available in the future.
 
!end_node # Textures from Previous Versions

!begin_node Textures in Newer Versions

Some themes are now available that make better graphical use of GEM's interface
when rendered by XaAES. Previous themes can now be enhanced with specific
textures for individual parts of the window scroll bars, separate from those
used in the new Scrolling List Box object in XaAES, which is used in the
file selector.

The extended textures also allow different focused and unfocused themes.
A completely different look can be seen for the current window and any window
you are not currently using, allowing subtile colour differences with shading,
high contrast with completely different colours, or even different patterns,
the choice is now yours.
 
!end_node # Textures in Newer Versions

!begin_node Using Basic Textures

The following file names and what they affect are listed in the layered order
that XaAES uses to build various parts of GEM's interface. Any texture named
this way will also work with any XaAES version 0.998 that comes with version
1.16.3 of FreeMiNT or older.
All images are tiled left to right, top to bottom.

!begin_blist
!item [EXTERIOR.IMG] (!nl)
Affects the window box, within which all other parts are drawn on top,
   including the background before any window buttons or widgets are drawn.
   It is rendered from the top left position of most square objects, except for
   many text input types and the content area of a scrolling list box.

!item [INFO.IMG] (!nl)
 Window info or status bar background. The minimum height con!-tai!-ning small
   font size text in this area is (? what ?) pixels.

!item [WTITLE.IMG] (!nl)
Window title bar, not including the button or widget areas, also used for
   popup or alert box title bars. The minimum height con!-tai!-ning stan!-dard font
   size text is 21 pixels. This is also used as the basis for the scrolling
   list box background. Excludes title bar button or widget areas.

!item [SLWTITLE.IMG] (!nl)
Title bar background for scrolling list boxes, not including the button or
   widget areas. The minimum height containing standard font size text is
   21 pixels.

!item [POPBKG.IMG] (!nl)
Main menu and window menu background, as well as some popup menu
   back!-grounds. Remember that some menus are wider that others, like the
   history menu in Highwire.

!item [DBOX.IMG] (!nl)
Dialog(?) box background. This is used as the basis for DTEXT rendered
   areas, and most DBUTTON areas, but not all.

!item [DTEXT.IMG] (!nl)
Text boxes not used for input purposes or disabled input types. Often on
   multiple layers, only certain texture styles are suitable in achieving the
   desired visual effect or seamless appearance when the texture is drawn in a
   new area. Not all text area types are affected, those being rendered in a
   plain colour.

!item [DBUTTON.IMG] (!nl)
Button backgrounds. These areas are not always of a certain height, so a
   nice vertical flow of the texture is often desired.

!item [SLIDE.IMG] (!nl)
The area in which a scroll bar moves. This is also the basis before
   SLIDER.IMG is rendered. It is the basis for both horizontal and vertical
   scroll bar area, including where scroll buttons or widgets are to be drawn.

!item [SLIDER.IMG] (!nl)
The scroll bar itself. These areas are approximately 20 pixels across,
   including both border outlines.
!end_blist
 
!end_node # Using Basic Textures

!begin_node Using Extended Textures

The following file names and what they affect are listed in the layered order
that XaAES uses to build various parts of the scroll bars, unfocused windows 
and their objects. These will have no effect on XaAES texturing before version
1.17.0 of FreeMiNT. All images are tiled left to right, top to bottom.

!begin_blist
!item [UXTERIOR.IMG] (!nl)
Overlays EXTERIOR.IMG for all unfocused windows when present, becoming the
   basis form for most object drawn on the unfocused window.

!item [INFOU.IMG] (!nl)
For unfocused menus. Does not seem to have much effect.

!item [WTITLEU.IMG] (!nl)
Background for unfocused window title bars and unfocused popup or alert box
   title bars. The basis for unfocused scrolling list box title bars.
   Excludes title bar button or widget areas.

!item [ULWTITLE.IMG] (!nl)
 Background for unfocused scroll list box title bars.
   Does not seem to have much effect.

!item [SLIDE.IMG] (!nl)
Becomes horizontal scroll bar area for both scroll list boxes and focused
   windows, when VSLIDE.IMG is present.

!item [SLIDEU.IMG] (!nl)
Replaces SLIDE.IMG as the basis for all scroll bar areas in unfocused
   windows. Does not affect scroll bar areas of scroll list boxes in unfocused
   windows. It is the horizontal scroll bar area when VSLIDEU.IMG is present.

!item [VSLIDEU.IMG] (!nl)
Replaces SLIDEU.IMG in the vertical scroll bar area of unfocused windows.

!item [VSLIDE.IMG] (!nl)
Replaces SLIDE.IMG in the vertical scroll bar area of both scroll list boxes
   and focused windows.

!item [SLIDE.IMG] (!nl)
Becomes te horizontal scroll bar for both scroll list boxes and focused
   windows, when VSLIDER.IMG is present.

!item [SLIDERU.IMG] (!nl)
Replaces SLIDER.IMG as the scroll bar in unfocused windows. Does not affect
   scroll bar areas of scroll list boxes in unfocused windows. It is the
   horizontal scroll bar when VSLIDERU.IMG is present.

!item [VSLIDERU.IMG] (!nl)
Replaces SLIDERU.IMG as the vertical scroll bar for unfocused windows.

!item [VSLIDER.IMG] (!nl)
Replaces SLIDER.IMG as the vertical scroll bar for both scroll list boxes
   and focused windows.
!end_blist

!end_node # Using Extended Textures

!begin_node Texture File Formats

XaAES's texturing works in either 8 bit colour mode with 256 colours in a
palette, or any hicolour mode with 32767 (15 bit) colours or more, most
often with 65534 (16 bit) colours or 24 bit (16.4 million) colour modes.
This is reflected in the names of the folder found in XaAES's image di!-rec!-tory,
(!B)XAAES/IMG/8B/(!b) and (!B)XAAES/IMG/HC/(!b) respectively.

Although the images used in the "8B" folder can be 256 colour (8bit) XIMG
images, experiments have found that that standard 16 colour images give far
better results, as there is a colour mapping algorithm that map the image into
the 256 colour palette which can cause hideous results, even when the image
uses the correct palette.

Again with XaAES's hicolour mode rendering, although some of the original
texture images in the "HC" folder are 24 bit XIMG images, better results are
often gained by using 256 colour XIMG images saved with the correct colour
palette. Note that the 24 bit XIMG format was never formally de!-fined, but
rather came from the rules of logic which outlined the 2, 4 and 8 bit formats
that cam before it. This has affected the reliability of the format, in that
not all 24 bit XIMG format images are compatible with XaAES.

XaAES can now look for images in folders other than the default "IMG" folder
in its own directory (see: Feel ).
 
!end_node # Texture File Formats

!begin_node Colour Palette Troubleshooting

There are two different colour palettes widely in use for Atari ST based GEM
desktops. The first one is the standard 256 colour palette that comes built
into the Atari Falcon and Atari TT, with the first sixteen colours mapping to
those found on the Atari ST/e. This is sometimes referred to as a hardware 
palette, and is often considered to be very dark as the colours were chosen by
purely mathematical divisions.

The second palette was initial designed for (!B)NVDI(!b) usage, with softer and more
pastel colouring, which became common on MagiC systems, two versions of which
was supplied with (!B)Jinnee(!b) desktop replacement. It can be found by the names of
(!B)NVDI.PAL(!b), and (!B)ALTERNAT.PAL(!b). (!B)fVDI(!b) has the ability to load a palette file at
boot time, if your system uses that VDI replacement.
XaAES now comes with the palette file (!B)XAAES/PAL/GEM.PAL(!b) (see: Feel ).

Colour palettes can be edited and created on most systems using (!B)XCONTROL(!b)'s
colour palette tool. With graphical desktop set up to use a hicolour mode, a
256 colour palette is also available, as a colour palette is still often
reference from a time when not even 256 colours where available.

The textures used and what they look like when using XaAES are directly related
to both the colour palette used by the desktop (through the VDI) and the
original colour palette used when the image was saved. You will know the two
are not is sync when you see colour desktop icons and XaAES textures displayed
in often strange psychedelic colour combinations.

Generally speaking from experience, you should match the colour palette of your
desktop to the icons you want to use with your desktop replacement. Some of the
better icon sets use the NVDI palette. Only then match the texture images or
theme pack to that same colour palette, as it will save a lot of headaches that
way. Sometimes modifying the desktop colour palette without modifying the
images can give pleasant results.

The above mentioned colour palettes are available for GIMP, and as GIF images.
 
!end_node # Colour Palette Troubleshooting

!begin_node Widgets and Buttons

Widget files are a standard format, with a specific unnamed tree structure.
Window widget and scroll bar buttons are contained in one RSC resource file.
The select mode of the icons can be used to do a mouse over style button
change. Each icon resource set should contain mono, 16 and 256 colour icons.
If no selected icon is present, the unselected one will be used instead.
These files can be any name in any location, as long as they are correctly 
entered into (!B)XAAES.CNF(!b).

XaAES can also use a checkbox and radio button RSC resource. Again these widget
files are a standard format, with a specific unnamed tree structure. Each
widget type consists of four images unselected, selected, disabled and focused.
By default XaAES will read this from the location (!B)XAAES/XA_XTOBJ.RSC(!b).
See node Feel.

When creating themes, sometimes it is better to add a background to the images
and icons. However, if you are doing a widget set for any theme, especially one
where the background or colour is likely to change, a transparent background is
more suitable. There are quite a few window button resources that come with
XaAES, but only one or two checkbox and tickbox widget sets.
 
!end_node # Widgets and Buttons

!begin_node Creating Texture Files

If you are using Windows or Linux to design and create the textures you wish to
use with XaAES, you can find the standard 16 colour, 256 colour, and NVDI
256 colour palettes available for GIMP, which makes life easier.

Textures can not be larger than 720 x 720 square. The longest title bar texture
is 1600 x 21 in size. Scroll bar textures are 20 pixels across, possible
maximum size of 1800 x 20 (and 20 x 1800, both untested). It is believed that
XaAES can not read more than 518400 pixels per image.

Various file formats are available, but the best suited to conversion between
OS platforms are GIF, TGA and TIFF. Here are are some rules to follow
regarding use of those formats:

!begin_blist
!item [GIF] (!nl)
256 colours or less. There are two formats, GIF87a and GIF89a.
   Not all Atari ST tools support both.

!item [TGA] (!nl)
256 colours to 32 bit (16.4 million + alpha channel) colour.
   These usually come in one flavor.

!item [TIFF] (!nl)
24 bit (16.4 million) colour or less. When saving these files you are given
   compression options, always use the least or no compression as a lot of
   Atari ST tools do not support higher compression.
!end_blist

There are a few free tools to help converting images back and forth between
image formats, here are a couple to get you started:

!begin_blist
!item [zView] (!nl)
 By Zorro, is free and a great image viewer that also contains an image
   conversion tool.

!item [GEMView] (!nl)
By Dieter Fiebelkorn. Can now be used for free by registering via email.

!item [GrafTool] (!nl)
By Joergen von Bargen. Another tool from way back in 1997. This one is
   unfinished and is very definitely still in beta stage and is in
   German language only. (!nl)
   Although it is a somewhat quirky tool, it can successfully be used, has a
   batch mode and can handle palette files as well.
   Check ftp archives for "(!B)GT970106.LZH(!b)".
!end_blist

If you have a good setup on your Atari ST, TT or Falcon, and paint program that
can save 256 colour and 24 bit (16.4 million) colour XIMG image files should be
able to do the job.
However XaAES 24 bit XIMG format is not as common as it should be.
 
!end_node # Creating Texture Files

!end_node # Theming and Extended Textures

!begin_node Video Modes

The video settings allow XaAES to switch screen resolution on certain supported
machine configurations. This includes, but is not limited to, the entire range
of Atari 16/32-bit machines as well as the Milan 040/060. Other machines, or
Atari machines equipped with graphics cards, tend to not support the standard
ways of switching screen resolution. Hence such system configurations usually
have their own utilities for this purpose.

In this context, Aranym can be considered an Atari machine; it supports VIDEL
(stock graphics) as well as native graphics, which can be considered akin to a
graphics card.

The SuperVidel graphics card provides an Atari-compatible way of switching screen
resolutions and can hence be considered analog to stock graphics.

The FireBee can, depending on the configuration, either be considered as having
"stock" graphics, or the equivalent of a graphics card, depending on the system
configuration.

!begin_blist

!item [SCREENDEV <device> (default 1)] (!nl)
VDI screen device number as follows:

!begin_description

!item [0:] Auto

!item [1:] Current or default video mode

!item [2:] 320*200, 16 colour (ST Low)

!item [3:] 640*200, 4 colour (ST Medium)

!item [4:] 640*400, 2 colour (ST High)

!item [5:] Falcon (mode specified by MODECODE)

!item [6:] 640*480, 16 colour (TT Medium)

!item [7:] Milan (mode specified by MODECODE)

!item [8:] 1280*960, 2 colour (TT High)

!item [9:] 320*480, 256 colour (TT Low)
!end_description

All other values are ignored!

!item [VIDEO <mode> (default 1)] (!nl)
This parameter is now deprecated and is provided for backwards compatibility only;
please update your configuration to use SCREENDEV and (if applicable) MODECODE.

!item [MODECODE <modecode> (default 0x0000)] (!nl)
This parameter specifies the graphics mode for VDI devices 5 (Falcon) and 7 (Milan).

The <modecode> is based on the mode specifier of the VsetMode/Vsetscreen() XBIOS calls:

!begin_description
!item [BIT:] Name - Meaning

!item [0-2:] BPS - Number of bitplanes:

     !begin_xlist
     !item [000:] 2colour

     !item [001:] 4colour

     !item [010:] 16 colour

     !item [011:] 256 colour

     !item [100:] 16 bits/pixel (True colour)
     !end_xlist

!item [3:] COL - Number of columns

     !begin_xlist
     !item [0:] 40

     !item [1:] 80
     !end_xlist

!item [4:] VGA - Monitor select

     !begin_xlist
     !item [0:] TV mode

     !item [1:] VGA mode
     !end_xlist

!item [5:] TVSEL - TV standard select

     !begin_xlist
     !item [0:] NTSC

     !item [1:] PAL
     !end_xlist

!item [6:] OVERSCN - Overscan flag (not valid for VGA)

     !begin_xlist
     !item [0:] don't overscan

     !item [1:] overscan
     !end_xlist

!item [7:] STMODES - ST Compatibility mode

     !begin_xlist
     !item [0:] Standard VGA video modes

     !item [1:] ST Compatible Video modes
     !end_xlist

!item [8:] VERTFLAG = Vertical mode

     !begin_xlist
     !item [VGA:]

          !begin_xlist
          !item [0:] standard

          !item [1:] line doubling (half res)
          !end_xlist

     !item [TV:]

          !begin_xlist
          !item [0:] standard

          !item [1:] Interlace (double res!!!)
          !end_xlist
     !end_xlist

!item [9-14:] unused

!item [15:] Additive mode bit for non standard resolutions. If set, use the default
     screen resolution as preset by CentScreen.
!end_description

(!B)Note:(!b) When you use a screen expander like Screenblaster, you have to use the
video option as well. This will make the Screenblaster software to show up the
resolution selection menu.

Examples:

!begin_description
!item [video = 0x801b] (!nl)
Use current rez, 256 colours.

!item [video = 0x801c] (!nl)
Use current rez, 16 bit/truecolour.

!item [video = 4] (!nl)
Select 640*400*2 colour (ST High)(mono).

!item [video = 0x801a] (!nl)
Will select 16 colour VGA mode in the resolution preset by CentScreen.

!item [video = 0x801b] (!nl)
Will select 256 colour VGA mode in the resolution preset by CentScreen.

!item [video = 24] (!nl)
Will select 640*480*16 colour VGA mode.

!item [video = 26] (!nl)
Will select 640*480*16 bit/truecolour VGA mode.

!item [video = 27] (!nl)
Will select 640*480*256 colour VGA mode.

!item [video = 0x0018] (!nl)
Will select 640*480*16 colour VGA mode.
!end_description

!end_blist
 
!end_node # Video Modes

!begin_node Miscellaneous

!subtoc [all] !depth 2

!begin_node Features for XaAES Internal Windows
!begin_itemize
 !item By pressing Ctrl-C the selected list-entry is copied to the
Clipboard.
 !item All XaAES-windows are resizable.
 !item Keyboardnavigation in all lists:
 !begin_itemize
  !item List is selected
  !begin_itemize
   !item Cursor-right: open tree
   !item Cursor-left: collapse
   !item Cursor up/down: move the cursor
  !end_itemize
  !item List is not selected
  !begin_itemize
   !item Cursor-right: scroll right
   !item Cursor-left: scroll left
	 !item Cursor up/down: scroll up/down
  !end_itemize
 !end_itemize
!end_itemize

!end_node # Features for XaAES Internal Windows

!begin_node Single Task Mode

This has been introduced to be able to run some old but valuable
software that did not work with MiNT since version 1.16 (and maybe
earlier), es!-pecial!-ly the pure-debugger.

This implies:

!begin_itemize
!item Stop all AES Clients.

!item Call ikbd_scan in the kernel directly not via addroottimeout in
case the single-task-client disabled the timer-interrupt.

!item No main-menu of any other app is activated.
!end_itemize

To control this currently there has to be the bit 16 (0x10000) set in
p_flags of the relevant binary.

Any client that has bit 17 (0x20000) set, is not stopped except when the
single-task-app has this bit also set, i.e. when it has 0x3xxxx.
This may be important because the single-task-client possibly does tty-IO,
and needs the toswin (or another) console.


To setup an application for this run the following commands in a console:

!begin_sourcecode
flags  <app>
!end_sourcecode

and remember the value displayed.

Then run:

!begin_sourcecode
flags -f 0x1xxxx <app>
!end_sourcecode

where the 'x' are the previously displayed values.

If a program shall not be stopped, do the same but with:

!begin_sourcecode
flags -f 0x2xxxx <app>
!end_sourcecode

on that program file.

When you want all clients to be stopped regardless of the above, set:

!begin_sourcecode
flags -f 0x3xxxx <app>
!end_sourcecode

on the single task app.
 
!end_node # Single Task Mode

!begin_node Comparison to TOS-AES

XaAES implements most parts of a standard TOS 4.1 AES, and a couple of
its own.
 
!end_node # Comparison to TOS-AES

!begin_node Additional Events

XaAES defines some special events which can be handled by programs.

!begin_table [l|l|l]
Event Name         !! evnt_multi() mask    !! Description
!hline
MU_WHEEL           !! 0x0040               !! Mouse Wheel events
MU_MX              !! 0x0080               !! Mouse movement events
MU_NORM_KEYBD      !! 0x0100               !! Normalized keyboard events
!end_table

!end_node # Additional Events


!begin_node Functions

!begin_description
!item [wind_create]

    Change in the window attributes:

    !begin_blist [New attribute:]
    !item [New attribute:]       MENUBAR
    !item [bit number   :]       12
    !item [value        :]       0x1000

    !item [function     :]       reserves room for a menu bar widget
                         in the window.
                         The menu_bar itself is attached to the
                         window by wind_set

    !end_blist

    Note: The attribute replaces the unused HOTCLOSEBOX attribute.
    There are only 16 bits available currently.

!item [wind_get]

    !begin_blist [New command:]
    !item [New command:]         'XA'

    !item [Usage:]
        !begin_sourcecode
short version;
short have_XaAES = wind_get(0, 'XA',
        &version, NULL, NULL, NULL);
        !end_sourcecode

        The AES will return the value 'XA' if it is XaAES;
        If 'XA' is returned, version will have the XaAES version
        number.

        binding:
        !begin_sourcecode
cntrl[0]     : 104
      1      : 2
      2      : 5
      3      : 0
      4      : 0
intin[0]     : window handle
      1      : value 'XA'         /* 0x5841 */
intout[0]    : reply
       1     : version 
        /* format: 0x0964 for version V0.964 */
        !end_sourcecode
     !end_blist

!item [wind_set]

    !begin_blist [Extended command:]
    !item [New command:]         WF_MENU           value  33
    !item [New command:]         WF_WHEEL                 40
    !item [Extended command:]    WF_TOOLBAR               30
    !end_blist

!item [evnt_multi]

    !begin_blist [Message identifier:] !compressed
    !item [Message identifier:]   WM_TOOLBAR (see WF_TOOLBAR)
    !item [New event masks:]   MU_WHEEL, MU_MX, MU_NORM_KEYBD,
                               MU_DYNAMIC_KEYBD
    (!nl)
    !item [New arrow:]   WA_WHEEL (see WF_WHEEL)
    !item [value:]   8
    (!nl)
    !item [New event mask:]   MU_WHEEL
    !item [bit number:]   6
    !item [value:]   0x0040
    (!nl)
    !item [New event mask:]   MU_MX
    !item [bit number:]   7
    !item [value:]   0x0080
    (!nl)
    !item [New event mask:]   MU_NORM_KEYBD
    !item [bit number:]       8
    !item [value:]            0x0100
    (!nl)
    !item [New event mask:]   MU_DYNAMIC_KEYBD
    !item [bit number:]   9
    !item [value:]   0x0200
    !end_blist

!item [WF_MENU]

    !begin_blist [Usage:]
    !item [Usage:]
        You can attach a menu bar object tree to a MENUBAR widget
        (see wind_create) by calling:

!begin_sourcecode
OBJECT *tree;
wind_set(handle, WF_MENU, tree);
!end_sourcecode

        If the window was created without the MENUBAR attribute,
        the call is ignored (see wind_create).

        You get MN_SELECTED message in the extended way adopted
        from AES 4.1  (Involving return of object tree pointer)
    !end_blist


!item [WF_WHEEL]

    Existing applications will automatically react on wheel events.
    If the top window has arrow widgets, the default action of XaAES
    on  wheel turns will be that a appropriate number of WM_ARROWED
    messages is sent to the application.

    The WM_ARROWED sent is completely compatable to real
    WM_ARROWED messages.

        Each single wheel turn click is translated to a WM_ARROWED
        message.

    !begin_xlist !compressed
    !item [m[0]:] WM_ARROWED
    !item [m[1]:] 0
    !item [m[2]:] 0
    !item [m[3]:] window handle
    !item [m[4]:] The appropriate standard WA_..LINE
                    vertical wheel .. is UP or DN
                    horizontal wheel .. is LF or RT
    !end_xlist

    For wheel aware programs additional information is provided:

    !begin_xlist !compressed
    !item [m[5]:]  either 'MW' or 'Mw' (!nl)
             'MW' (0x4d57) on the first wheel click (!nl)
             'Mw' (0x4d77) on subsequent wheel clicks (!nl)
    !item [m[6]:]  0
    !item [m[7]:]  original wheel amount
    !end_xlist

    Making it possible to amalgamate wheel turns at will.
    (for instance, turn a large wheel amount into a slider
           operation)

    WF_WHEEL for wind_set

    This command can be used to influence the behaviour of mouse
    wheel actions, either for all windows of a application or a
    particular window.

    Usage:
!begin_sourcecode
bool send_WA_WHEEL;
wind_set(handle, WF_WHEEL, send_WA_WHEEL);
!end_sourcecode

    handle   :  a window handle or 0.
                    0 meaning: all windows of the calling application.

    send_WA_WHEEL = true:

        If send_WA_WHEEL is true, XaAES will send a specific arrow
        value to the app in stead of the standard arrows.
 
        The new arrow is WA_WHEEL, value 8.
 
    !begin_xlist !compressed
    !item [m[0]:] WM_ARROWED
    !item [m[1]:] 0
    !item [m[2]:] 0
    !item [m[3]:] window handle
    !item [m[4]:] WA_WHEEL
    !item [m[5]:] 0
    !end_xlist

    WA_WHEEL arrow comes with 2 additional values in the message
    buffer:
 
    !begin_xlist !compressed
    !item [m[6]:]  wheel number
    !item [m[7]:]  wheel amount
    !end_xlist

    send_WA_WHEEL = false (!nl)
        compatable WM_ARROWED is sent. (see top of this page)
 

!item [MU_WHEEL]

    If the event mask MU_WHEEL is passed to event_multi
        XaAES will report mouse wheel to the application, together
        with mouse position and keyboard state as follows:

    binding excerpt:
    !begin_xlist !compressed
    !item [intin[0]:] events|MU_WHEEL (!nl)
                     the mask can be used together with MU_KEYBD,
                     if both passed, MU_NORM_KEYBD prevails.
    !item [....]
    !item [intout[0]:] events|MU_WHEEL
                     if the MU_WHEEL event occurs
    !item [~~~~~~~1:~] x position of mouse
    !item [~~~~~~~2:~] y position of mouse
    !item [~~~~~~~3~~]
    !item [~~~~~~~4:~] wheel number
    !item [~~~~~~~5~~]
    !item [~~~~~~~6:~] wheel amount (clicks produced by turning the wheel)
    !end_xlist

    example call:

event = evnt_multi(events|MU_WHEEL, 2,3,1,
                   0,0,0,0,0,
                   0,0,0,0,0,
                   0,0,
                   &mx, &my,
                   &wheel_number,
                   &keyboardstate,
                   &wheel_amount
                  )

    Notes: (!nl)
       MU_WHEEL will only be sent if there is not a top window or
       the top window doesnt have arrow widgets. (and of course
       if MU_WHEEL was in the event mask).
 
       Wheel aware programs can then make use of wheel events in
       all cases.

       Currently only on available MILAN's running the latest version
       of TOS 4.08 which includes the VDI function 'vex_wheel_v'. (!nl)
       (!url [] [http://www.ccac.rwth-aachen.de/!~michaels/index.php/milan])

       Of course, when MU_BUTTON is received, the wheel_number and
       wheel_amount replies must be interpreted as button number
       and button clicks.

       For ease of implementation and compatability, XaAES never
       sends MU_BUTTON|MU_WHEEL together.

!item [vex_wheel_v]

    prototype:
!begin_sourcecode
void vex_wheel_v(short handle, long pusrcode, long *psavcode);
!end_sourcecode

    binding:
    !begin_xlist !compressed
        !item [comtrl[0]:]  Opcode 134
        !item [~~~~~~~1~:]  0
        !item [~~~~~~~2~:]  0
        !item [~~~~~~~3~:]  0
        !item [~~~~~~~4~:]  0
        !item [~~~~~~~6~:]  handle
        !item [~~~~~~7,8:]  pusrcode
        !item [~~~~~9,10:]  psavcode
    !end_xlist

    When pusrcode is called by the VDI, d0.w will have wheel_number,
                                        d1.w will have wheel_amount


!item [WF_TOOLBAR]

        Just like in N.Aes (and MagiC I believe) you can attach a
        toolbar to a windows work area.

        XaAES lifts any restriction on such toolbars
             (ie: N.Aes; touchexit buttons only)

        This means that a XaAES toolbar is no different from any
        dialogue handled by form_do().

        As a consequence you can implement non-modal dialogues
        in the most simple and natural way. Quite the opposite
        from the WDIALOG design.

        I ceased devoloping the WDIALOG method in XaAES as soon
        as I hurt my nose against the call back approach.

    Usage:
!begin_sourcecode
OBJECT *tree;
short start, edit_obj;
wind_set(handle, WF_TOOLBAR, tree, start, edit_obj)
!end_sourcecode


    Binding excerpt:
    !begin_xlist !compressed
        !item [intin[0]:]    window handle
        !item [~~~~~~1~:]    WF_TOOLBAR
        !item [~~~~2,3~:]    OBJECT *tree
        !item [~~~~~~4~:]    start     /* object index of the item
        !item [~~~~~~~~~]                 where to start drawing */
        !item [~~~~~~5~:]    edit_obj  /* current edit object; where the
        !item [~~~~~~~~~]                 cursor will be placed. */
    !end_xlist

    Notes: (!nl)
        There is no need for a attribute passed to wind_create,
        because for the AES the toolbar is part of the work area.
        The user must be aware of the fact and calculate for himself
        the position of the rest of the work area if such a area
        is present. Such area comes into being when the window is
        opened using a larger inner rectangle than the rectangle
        occupied by the object tree.

        Toolbars are treated as true widgets, hence any drawing
        will be done automatically when needed.
        WM_REDRAW is handled just like any other window.
        No objc_draw required.


    WM_TOOLBAR (!nl)
        Because a toolbar is a widget, you will get events from
        user action on the toolbar.

        When the user action on the toolbar triggers a EXIT condition,
        (clicking a exit button or touchexit object (or press return))
        a message is sent to the application. This means that the
        application must be waiting in a evnt_multi() or evnt_mesag()
        AES call.

        The application will receive information on the event in the
        16 byte (8 words) message buffer as follows:

        short mp[8];

        !begin_xlist !compressed
        !item [mp[0]:]    WM_TOOLBAR
        !item [~~~1~:]    0 (reserved)
        !item [~~~2~:]    0 (reserved)
        !item [~~~3~:]    window handle
        !item [~~~4~:]    The object which caused the exit condition
        !item [~~~5~:]    Number of clicks used (1 or 2)
        !item [~~~6~:]    keyboard status
        !item [~~~7~:]    (new) The current editable object (where the cursor
                  is)
        !end_xlist

        The only difference between the XaAES and N.Aes implementation
        is m[7], due to the fact that XaAES toolbars can have any kind
        of object type.
        The window handle gives you the opportunity to have
        any number of non modal dialogues active concurrently
        and handle them in the classic way in the central
        (and only) evnt_multi loop.

    [2]Usage of wind_set(h,WF_TOOLBAR,...):

        If as a result of a toolbar interaction object(s) need to
        be redrawn (or changed), just call again:

        wind_set(handle, WF_TOOLBAR, tree, start, edit_obj);

        tree    :  the same object tree pointer (!nl)
        start   :  object index where to start drawing (!nl)
        edit_obj:  Best thing to do is recycle m[5]

        XaAES will know that this toolbar is already attached and
        hence only redraw the object and its siblings.

        All redrawing is done correctly over the rectangle list.

    A concise example of the use of XaAES's toolbar concept can be
    found here: (!link [DIALTEST] [dialtest]), or in the source distribution of XaAES,
    in a similar program.

!item [MU_MX]

        If the event mask MU_MX is passed to event_multi
        XaAES will report ANY mouse movement to the application,
        thus making artificial supplying of rectangles obsolete.

        Especially the annoying use of a 1 pixel wide rectangle 
        can now be avoided.

        The new position of the mouse that caused the event is
        returned in the usual place together with the state of
        the keyboard.

    binding excerpt:
        !begin_xlist !compressed
        !item [intin[0]~:] events|MU_MX
        !item [....]
        !item [intout[0]:] events|MU_MX     if the MU_MX event occurs
        !item [~~~~~~~1~:] new x position
        !item [~~~~~~~2~:] new y position
        !end_xlist

    example:
!begin_sourcecode
short mx, my;
event = evnt_multi(events|MU_MX, ...... &mx, &my,....);
if (event & MU_MX)
    have_a_mouse_movement(/* in mx and my */);
!end_sourcecode


!item [MU_NORM_KEYBD]

        XaAES needed for itself normalized keycodes to be able
        to evaluate CTRL|ALT keys smoothly.
        So I thought it might be usefull to give applications
        the opportunity to get those as well.

        If the event mask MU_NORM_KEYBD is passed to evnt_multi
        the ap!-pli!-ca!-tion will receive a normalized keycode in stead
        of the standard AES keycode and together with the
        state of the mouse.

        The normalization process is that of Harald Siegmund's
            NKCC

    binding excerpt:
        !begin_xlist !compressed
        !item [intin[0]~:] events|MU_NORM_KEYBD
                     the mask can be used together with MU_KEYBD,
                     if both passed, MU_NORM_KEYBD prevails.
        !item [....]
        !item [intout[0]:] events|MU_NORM_KEYBD
                     if the MU_NORM_KEYBD event occurs
        !item [....]
        !item [~~~~~~~4~:] normalized keycode
        !item [~~~~~~~5~:] normalized keycode
        !end_xlist

    Note:
        For conveniemce the code is passed in both intout 4 and 5 (!nl)
        4 formally received the status bits (!nl)
        5 formally received the scancode

        Now you can still use 4 for status bits and 5 for the keycode.


!item [MU_DYNAMIC_KEYBD:]

        Reserved only, not implemented yet.
        Its function should be to allow a key to be held down
        for a while and then released.

        It should let the keyboard behave as
        a large bunch of mouse buttons, where a MU_DYNAMIC_KEYBD
        event is caused on both press down and release of the
        key. No events are caused when the key remains up or down.

        It is mostly intended for use by games.
 

!end_description

!end_node # Functions


!begin_node XaAES dialog test
!alias dialtest

!begin_sourcecode

/* Test XaAES dialogue functions */

#include <prelude.h>
#include <tos_gem.h>
#include <stdio.h>
#include "tests.h"

static void putnum(OBJECT *o, int i, int v)
{
    TEDINFO *ted = o[i].spec.tedinfo;
    sprintf(ted->text,"%d",v);
}


int main(void)
{
    int x, y, w, h,
        edob = FT2,
        xa,
        version=0x666;

    appl_init();
    graf_mouse(0,0);

    /* detect XaAES */
    if (wind_get(0,'XA',&version) == 'XA')
    if (rsrc_load("tests.rsc"))
    {
        int obno = -1;
        OBJECT *db,*pop,*pops,*menu; TEDINFO *ted;

        rsrc_gaddr(0, T, &db);
        rsrc_gaddr(0, POPS, &pops);
        rsrc_gaddr(0, POP, &pop);
        rsrc_gaddr(0, TMENU, &menu);

        ted = db[XA_VERSION].spec.tedinfo;

        menu_bar(menu, 1);

        sprintf(ted->text,"%04x",version);

        form_center(db, &x, &y, &w, &h);
        putnum(db,DTX,x);
        putnum(db,DTY,y);
        putnum(db,DTW,w);
        putnum(db,DTH,h);
        putnum(db,OBX,db->x);
        putnum(db,OBY,db->y);
        putnum(db,OBW,db->w);
        putnum(db,OBH,db->h);

        {
            int w1,w2,w3,w4;
            int m[8],event,s,b,kr,br,wi;
            /* see "wind_create" */
            int kind = INFO|NAME|MOVER|CLOSER|MENUBAR;

            bool cont = true;

            wi = wind_create(kind,0,0,640,400);
            wind_set(wi, WF_NAME, "dial_test");
            wind_set(wi, WF_INFO, " Example program for toolbars ");
            wind_set(wi, WF_TOOLBAR, db, 0, edob);
            wind_set(wi, WF_MENU, menu);
            wind_calc(WC_BORDER, kind,
                            0, 0, db->w, db->h,
                            &w1, &w2, &w3, &w4);
            wind_open(wi, 40, 40, w3, w4);

            do
            {
                event = evnt_multi(MU_BUTTON|MU_KEYBD|MU_MESAG,
                                2,3,0,
                                0,0,0,0,0,
                                0,0,0,0,0,
                                m,
                                0,0,
                                &x,&y,
                                &b,&s,&kr,&br);
                if (event&MU_MESAG)
                {
                    switch (m[0])
                    {
                    case WM_TOOLBAR: /* see "WF_TOOLBAR" */
                        obno = m[4];
                        edob = m[5];
                        if (obno == OK)
                            cont = false;
                        if (obno == LARGE_POP)
                        {
                            int x, y;
                            MENU mn = {0};

                            mn.tree = pops;
                            mn.menu = FORM_POPS;

                            objc_offset(db, LARGE_POP, &x, &y);
                            menu_popup(&mn, x, y, &mn);
                        }

                        db[obno].state &=~ SELECTED;
                        /* redraw toolbar. */
                        wind_set(wi, WF_TOOLBAR, db, obno, edob);
                        break;
                    case WM_TOPPED:
                        wind_set(wi, WF_TOP);
                        break;
                    case WM_CLOSED:
                        cont = false;
                        break;
                    case WM_MOVED:
                        wind_set(wi, WF_CURRXYWH,
                             m[4],m[5],m[6],m[7]);
                        break;
                    case MN_SELECTED:
                        if (m[3] == MDIAL and m[4] == QUIT)
                            cont = false;
                    case AP_TERM:
                        cont = false;
                    }
                }

            } while (cont);

            wind_close(wi);
            wind_delete(wi);
        }

        form_dial(FMD_FINISH, 0,0,0,0,x,y,w,h);
        rsrc_free();
    }

    appl_exit();
    return 0;
}
 
!end_sourcecode

!end_node # XaAES dialog test

!begin_node Theme related functions

The seems to be the beginnings of a "themes engine", referred to in the code as
"theme modules". The code also implies that a binary module is talked too..
Most of these functions are in WIN_DRAW.C. Functions are listed in order found.

Dynamic gradient changing will require new functions. External access to
certain functions would be useful, either XA_AES protocol, or gemscript, or
struct in shared memory.

For other gradient structs, see RENDER_OBJ.C, whiled the "chiseled 3D look"
is beneath those structs, starting at "Local helper functions".

I will also look at generating UDO docs on XaAES - Paul

(!B)Pixel format functions:(!b)
(in TRNFM.C, plus)

!begin_sourcecode
pix_2_sl
sl_2_pix
!end_sourcecode


(!B)Color functions:(!b) (!nl)
(base colors and resources)

!begin_sourcecode
duplicate_theme
delete_theme
struct window_colours
struct window_colours def_otop_cols      (focused)
struct window_colours def_utop_cols      (unfocused)
ref_colortheme_resources
deref_colortheme_resources
cleanup_colortheme
!end_sourcecode


(!B)Gradient functions:(!b) (!nl)
(related to use of color gradients)

!begin_sourcecode
struct xa_gradient otop_vslide_gradient  (focused)
struct xa_gradient otop_hslide_gradient  (focused)
struct xa_gradient otop_vslider_gradient (focused)
struct xa_gradient otop_hslider_gradient (focused)
struct xa_gradient utop_vslide_gradient  (unfocused)
struct xa_gradient utop_hslide_gradient  (unfocused)
struct xa_gradient utop_vslider_gradient (unfocused)
struct xa_gradient utop_hslider_gradient (unfocused)
struct xa_gradient otop_title_gradient   (focused)
struct xa_gradient utop_title_gradient   (unfocused)
struct xa_gradient otop_info_gradient    (focused)
struct xa_gradient utop_info_gradient    (unfocused)
struct xa_gradient otop_green_gradient   (unused)
struct xa_gradient otop_grey_gradient    (focused)
struct xa_gradient utop_grey_gradient    (unfocused)
free_priv_gradients
find_gradient
!end_sourcecode


(!B)Window frame drawing functions:(!b) (!nl)
(window frame "widgets")

!begin_sourcecode
draw_pu_canvas
draw_widg_box
draw_widget_text
draw_widg_icon
get_widg_gradient
set_widg_size
build_bfobspec
!end_sourcecode


(!B)Tidget functions:(!b) (!nl)
(related to window widgets)

!begin_sourcecode
get_wcol
set_wcol
fix_widg
fix_default_widgets
foreach_widget
delete_pmap
!end_sourcecode


(!B)Texturing functions:(!b) (!nl)
(loading and specific assignment of textures)

!begin_sourcecode
set_texture
free_texture (unused)
delete_texture
load_texture
init_sliders
info_texture
title_texture
installtexture
test_img_stuff
!end_sourcecode


(!B)Module functions:(!b) (!nl)
(beginnings of "AES theme modules")

!begin_sourcecode
init_module
exit_module
new_theme
free_theme
delete_color_theme
new_color_theme
free_color_theme
struct xa_module_widget_theme module
exit_module
main_xa_theme
!end_sourcecode


(!B)Textures:(!b) (!nl)

Current CVS (20091128) texture list and "new" extensions. Add "v" to begining
of the filename for "vertical" and  "u" to end for "unfocused" except where the
8.3 file format would be broken, then replace first character with "u".
New textures can incrementally replace old ones. ie one texture for slider,
individual textures for unfocused slider and vslider.
See "Extended basic texturing" and "init sliders" for logical ordering of
image loading.

!begin_table [l|l|l|l|l]
 original file !!        where         !! with focus !! unfocused !! new file
!hline
 slwtitle.img  !!  File Selector Title !! slwtitle   !! ulwtitle  !! ulwtitle.img
 wtitle.img    !!  Window Title        !! wtitle     !! wtitleu   !! wtitleu.img
 slider.img    !!  Scrollbar Slider    !! slider     !! slideru   !! slideru.img
 slide.img     !!  Scrollbar background!! slide      !! slideu    !! slideu.img
               !!  Vertical Slider     !! vslider    !! vslideru  !! vslider.img
               !!  Vertical Slider     !!            !! vslideru  !! vslideru.img
               !!  Vertical background !! vslide     !! vslideu   !! vslide.img
               !!  Vertical background !!            !! vslideu   !! vslideu.img
 info.img      !!  Info Area Background!! info       !! infou     !! infou.img
 exterior.img  !!  Base Window Frame BG!! exterior   !! uxterior  !! uxterior.img
!end_table

!end_node # Theme related functions

!end_node # Miscellaneous

!begin_node History

(!B)The XaAES history - written by Joakim H(!"o)gberg(!b)

(!U)The beginning(!u)

XaAES is a free AES written with MiNT in mind, originally developed by 
Craig Graham (Data Uncertain Software) back in September 1995. Taken from 
the XaAES beta6, here is a snippet of the readme.txt in which Craig 
ex!-plains his motives for initiating XaAES:


(!U)Craig Graham(!u)

"After using MultiTOS, then AES4.1, I became frustrated at the lack of a 
decent GUI to use the real power of the MiNT kernal - X-Windows is all 
very well, but I can't run GEM programs on it. MultiTOS (even AES4.1) is 
to slow. Geneva didn't run with MiNT (and, having tried the new MiNT 
com!-pa!-ti!-ble version, I can say it wasn't very compatible - at least AES4.1 
is quite stable, if a little slow). MagiC lives in a very fast, very small 
world all it's own (no networking support, few programs written to exploit 
it)."

Craig worked actively on XaAES until 1997 when he stopped the 
development, and already at that time a pleuthora of applications were 
already useable under XaAES.

During 1998 the project was taken up by Swedish programmer Johan 
Klockars. He had been involved already during Craigs maintainership and at 
this point he stepped forward after a period of inactivity.


(!U)Johan Klockars(!u)

Johans work resulted in several bugfixes which eventually was released as 
Beta7+. Shortly after this beta Johan too made the decision to hand over 
the project to someone else, and this time Dutch coder Henk Robbers 
stepped in. During Henks maintainership loads of progress was made and 
XaAES went from interesting to becoming rather useable and showing great 
potential. The visual appearance was made to look closer to that of N.AES, 
as this was the obvious reference target - the AES that at the time was 
*the* GUI for FreeMiNT. XaAES also become a lot more robust although the 
response for key and mouse input was still somewhat of a problem.

XaAES goes CVS (!nl)
In early 2003 Henk Robbers decided it was time to let someone else carry 
on his work, as he wanted to move on to other computing issues.


(!U)Henk Robbers(!u)

When Henk went looking for someone who could take care of the continued 
development, the idea that XaAES should be part of the FreeMiNT project 
was suggested. After all, it was developed to be an AES for MiNT 
exclusively and since FreeMiNT is being administrated via CVS anyone could 
access the sources and contribute.


(!U)Frank Naumann(!u)

The move to CVS was made possible thanks to great efforts from FreeMiNT 
maintainer Frank Naumann, who made the necessary changes to allow XaAES to 
compile under GCC. In earlier XaAES builds, one of the major problems has 
been the somewhat irregular response to mouse buttons. This has since been 
reworked by Odd Skancke (aka Ozk), something that also resulted in a 
complete rewrite of the XDD. The moose.xdd is now coded in C too, just 
like the rest of the XaAES code.

XaAES - A FreeMiNT kernel module (!nl)
In order to get a clean and fast XaAES, the best solution turned out to be 
changing XaAES into a kernel module. To achieve this goal a completely new 
API was constructed, and it quickly got appearant that the new kernel 
module offered a massively improved performance! Most noticeably, the 
response time was significantly improved, resulting in a much more snappy 
and responsive experience when trying anything to clicking a button to 
seeing live window redraws and stuff like that. All in all, XaAES reached 
a whole new level after being integrated this tightly with FreeMiNT and as 
of the 1.16.1 FreeMiNT release it must be considered highly useable. With 
the implementation of window shading the list of missing feautures was 
getting short.

Surpassing N.AES (!nl)
This header may sound arrogant, but it may be relevant to state this 
anyway. Odd Skancke has been putting a lot of efforts into XaAES the last 
year, and the results are easy to spot.


(!U)Odd Skancke(!u)

At the time of writing this we have reached december 2005 and XaAES is 
be!-ing equipped with features not seen in N.AES, and in some cases not in 
any other Atari AES. Sure, there are still some occasions when some would 
sug!-gest N.AES has advantages over XaAES but in real life XaAES now offers 
(very high) compatibility as well as speed. And N.AES never offered the 
background textures in AES elements! Add to this the new keyboard 
na!-vi!-ga!-tion scheme, allowing any application that makes proper use of 
form_button() and form_keyboard() to be controlled via the keyboard. Even 
the GEM menubar can be navigated via the keyboard, making the system even 
more user friendly. The built-in support for WDIALOG functions is nearing 
completion, and now even applications that uses the pdlg_xx() routines for 
printing support may be able to work properly at last. XaAES is without a 
doubt setting new standards and the Atari community now has access to a 
modern AES that is both fast, free and stable!
 
!end_node # History

!begin_node Download

Find the latest version in FreeMinT archive on the (!url [GitHub snapshot page] [https://freemint.github.io/#snapshots])
https://freemint.github.io/#snapshots.

!end_node # Download

!begin_node Contact

!begin_itemize
!item Author of this document and some enhancements to XaAES: (!url [Helmut Karlowski] [mailto:helmut.karlowski@ish.de])
!end_itemize

If you find errors, bad english or want to contribute to this document,
feel free to contact me or even better join the (!url [MiNT-mailinglist] [https://sourceforge.net/p/freemint/mailman/freemint-discuss]).

Edited 2020 by (!link [Latzmaster] [Adresse]).

!begin_pnode Adresse
Mailto: (!nl)
Lars Schmidbauer (!nl)
(!url [latzmaster@gmx.de] [mailto:latzmaster@gmx.de])
!end_node

!end_node # Contact

!end_document
