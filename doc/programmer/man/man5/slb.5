.TH SLB 5 "Programmer's Manual" "" "1998-09-24"
.SH NAME
SLB shared library file format
.SH DESCRIPTION
An SLB shared library is a normal GEMDOS executable with a specific start
of the text segment:
.nf

typedef
{
	long magic;
#define SLB_MAGIC	0x70004afcL
	char *name;
	long version;
	long flags;
	void (*slb_init) (void);
	void (*slb_exit) (void);
	void (*slb_open) (BASPAG *);
	void (*slb_close) (BASPAG *);
	long opt;
	long res[8];
	long fun_cnt;
	long fun_table[];
} SLB;

.fi
It is recommended that bit 3 of byte 25 of the program header is set to
indicate that the module can be loaded into a TPA of "any sufficient"
size. This will help preventing memory fragmentation under MagiC, see
.I runopts(1)
for a description of existing program flags.
.I runopts(1)
is available from http://www.muenster.de/~reschke/soft_e.hmtl#mupftool.


.IP magic
must be the first four octets of the text segment and be equal to
.I SLB_MAGIC .

.IP name
is a pointer (relative to the start of the text segment) to a C style
string with the name of the shared library.

.IP version
is the version number of the shared library (see
.I Slbopen(2)
).

.IP flags
is reserved and must be set to 0 for now.

.IP slb_init
is a pointer to the init function of the shared library. This function
gets called once when the library is initially loaded and is executed under
the context of the shared library (MagiC) or the first caller's program (MetaDOS).
This call will be executed in supervisor mode.

The path name of the shared library file is passed in the command line
area of the SLB's basepage. Contrary to a GEMDOS process, the string is
in C format (no initial length byte, zero terminated). An SLB can use
this information to find additional files in the directory from where the
SLB was loaded. Note that this file name might contain a relative path
and thus needs to be evaluated during slb_init.


.IP slb_exit
is a pointer to the exit function of the shared library. It gets called before
the shared library is unloaded from memory (because the last owner has closed
it) and is executed under the context of the shared library (MagiC) or the 
first caller's program (MetaDOS). This call will be executed in supervisor mode.

.IP slb_open
points to the SLB open function. It gets called everytime a process opens the
shared library. A pointer to the caller's basepage is passed on the stack.
Depending on the operating system, this call will be executed in supervisor
mode (MetaDOS) or user mode (MagiC).

.IP slb_close
points to the SLB close function. It gets called everytime a process closes 
the shared library (or termininates without explicitly closing it). A pointer 
to the caller's basepage is passed on the stack.
Depending on the operating system, this call will be executed in supervisor
mode (MetaDOS) or user mode (MagiC).

.IP opt
is reserved.

.IP res[]
is reserved.

.IP fun_cnt
is the total number of library function pointers. It is used to do a sanity
check on the number argument when the shared library is called.

.IP fun_table[]
is an array with the pointers to the individual shared library functions,
starting with function 0. Note that a function pointer may be zero, in 
which case the library exec function will return EINVFN.

Shared library functions will be receive parameters exactly in the way the
caller passed them. The only difference is that the library function will
receive a pointer to the caller's BASEPAGE instead of the SLB pointer as
first argument. 

.SH "CAVEAT"
Note that under plain TOS, the same restrictions apply for shared library
usage as for GEMDOS allocated memory or file handles: accessories aren't
real GEMDOS processes, the ownership thus belongs to the currently running
GEMDOS process.

.SH "BUGS"
The command line area of the basepage is limited to 128 bytes, thus the
name of the SLB file needs to fit into 127 characters.


.SH "SEE ALSO"
runopts(1),
Slbopen(2)

