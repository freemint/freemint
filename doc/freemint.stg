@database "FreeMiNT"
@options "-is+z"
@author "Latz"
@$VER: Version 1.0 (@:"__DATE__")
@subject "System"
@width 80

@node "Main" "FreeMiNT"
@{U}FreeMiNT                                                          FreeMiNT@{0}



                            User manual for
                           
                            FreeMiNT 1-19-*
                              @:"__DATE__"
                              

@autorefoff
FreeMiNT is @{B}free software@{0}, an easy-to-use @{B}Multitasking operating system@{0}
for all Atari TOS computers, compatibles (like Milan or FireBee) and also
for emulators (like AranyM).
FreeMiNT runs from a "normal" TOS partition, no additional filesystems or
partitions are needed. But of course you can extend the installation with
a "full blown" UNIX environment if you want.

This manual is @{B}not@{0} a detailed instruction on how to configure and
setup a FreeMiNT system. Since FreeMiNT/XaAES are highly customizable, we
cannot provide a detailed setup information without an assumption that
you'd want to see the system to behave in a certain manner - and this may
be conflicting with your requirements.
@autorefon

To make it as easy as possible, the FreeMiNT documentation is splitted in
three parts (in folder "guides"):

- This "freemint.hyp" you are reading right now contains FreeMiNT basics
  and advanced user info about installation, configuration etc.

- Background info mostly for programmers can be found in @{"mintprog.hyp" link mintprog.hyp}

- XaAES, the application environment system, is explained in @{"xaaes.hyp" link xaaes.hyp}

There is also a FreeMiNT/XaAES wiki on GitHub:
@{"https://github.com/freemint/freemint/wiki/" system "https://github.com/freemint/freemint/wiki/"}

Please assign your webbrowser for opening "http*://" files in your desktop
so that the weblinks in this document will be opened directly by clicking
on them.



                                Contents

 
@endnode


@node "Contents" "Contents"
@toc "Main"
@{U}Contents                                                          FreeMiNT@{0}

  1 Legal
    1.1 COPYING.GPL
    1.2 COPYING.BSD3
    1.3 COPYING.BSD4
    1.3 COPYING.MINT

  2 @{"Installation/Requirements" link Installation}
    2.1 @{"mint.prg in the AUTO folder" link auto_folder}
    2.2 @{"Associated files" link assoc_files}

  3 @{B}The FreeMiNT OS:@{0}
    3.1 Basic information
        3.1.1 @{"Filename and pathname convention" link files_paths}
        3.1.2 @{"File- and pathname length" link files_paths_length}
        3.1.3 Case sensitivity
        3.1.4 @{"Memory protection" link mem_prot}
        3.1.5 @{"Filesystem cache" link fs_cache}
        3.1.6 RAMdisk
        3.1.7 @{"Supplying timezone information" link tz_info}

    3.2 Configuration
        3.2.1 @{"Configuration file mint.cnf" link mint.cnf}
              3.2.1.1 @{"Kernel settings" link cnf_kernel}
              3.2.1.2 @{"Filesystem settings" link cnf_fs}
              3.2.1.3 @{"Commands" link cnf_commands}
              3.2.1.4 @{"Environment variables" link cnf_env}
              3.2.1.5 @{"Start programs" link cnf_exec}

        3.2.2 @{"Initialization file mint.ini" link mint.ini}

        3.2.3 @{"Keyboard table files" link key_tbl}

        3.2.4 @{"USB support" link USB}

        3.2.5 Network setup
              3.2.5.1 @{"Network filesystem (NFS)" link mount_nfs}

        3.2.6 @{"Filesystem check" link fs_check}

        3.2.7 @{"TOS programs under MiNT" link tos_prgs}

    3.3 @{"Tools in folder GEM" link gem_tools}

    3.4 @{"Binaries in folder BIN" link BIN}

    3.5 Drivers
        3.5.1 Common drivers
              3.5.1.1 @{"Xtended Device Drivers" link "XDD"}
              3.5.1.2 @{"Xtended Filesystem Drivers" link "XFS"}
              3.5.1.3 @{"Xtended Interface Drivers" link "XIF"}

        3.5.2 Special versions for the different systems
              3.5.2.1  ST
              3.5.2.2  @{"MegaST" link MST}
              3.5.2.3  STE
              3.5.2.4  @{"MegaSTE" link MSTE}
              3.5.2.5  TT
              3.5.2.6  Falcon030
              3.5.2.7  CT60
              3.5.2.8  FireBee
              3.5.2.9  Milan
              3.5.2.10 Hades
              3.5.2.11 Aranym

    3.6 Miscellaneous
        3.6.1  Graphic shell
        3.6.2  Text shell
        3.6.3  @{"Wildcard expansion" link wildcard}
        3.6.4  @{"The environment variable UNIXMODE" link UNIXMODE}
        3.6.5  @{"The 'init program'" link misc_init}
        3.6.6  @{"The concept of multiple filesystems" link misc_multi_fs}
        3.6.7  @{"File ownership and access permissions" link misc_file_perm}
               3.6.7.1 Regular files
               3.6.7.2 Symbolic links
               3.6.7.3 Number of links
        3.6.8  @{"Filesystem limits" link misc_fs_limit}
        3.6.9  @{"Prioritization" link misc_prior}
        3.6.10 @{"Memory fragmentation" link misc_mem_frag}
        3.6.11 FAQ
        3.6.12 Glossary

 4 Download

 5 Contact
 
@endnode


@node "Legal" "Legal"
@toc "Contents"
@{U}Legal                                                             FreeMiNT@{0}

                          @{B}COPYING CONDITIONS@{0}

@line 1 73 0 0 5

This is a little complicated. First of all, I hope all things are handled
correctly. I don't want to bother anyone and I don't want to break any
copyright terms. If you think I made a mistake, please contact me.

The source code of the FreeMiNT CVS repository is based on several 
different packages with different copying terms. I spent a lot of time 
lately doing the same things on every package I updated over and over 
again. Furthermore, large parts of the code were identical in some of the
packages. So my main goal was to get rid of such time consuming jobs, 
making FreeMiNT development much more efficient.
CVS, a freely available source control system, helped a lot in achieving 
this goal. It handles a unique source base (the CVS master tree) and 
records everychange with the exact date, the author and a changelog 
message. For that to work I had to restructure the kernel source, the 
modules, and the tools into one source hierarchy.

@line 1 73 0 0 5

Here now a short summary which parts of the source tree apply to which
copyright terms.

This is just a hint how things are sorted. All files fall under the GPL
unless stated otherwise.

sys/             - COPYING.MiNT if copyright is held by Eric Smith,
                   otherwise COPYING.GPL
  
  xdd/           - COPYING.GPL if not stated otherwise
    flop_raw/    - Public Domain
  
  xfs/
    ext2fs/      - COPYING.GPL
    minixfs/     - Copyright S.N. Henson
    nfs/         - Copyright Ulrich Kuehn
      ksocket/   - COPYING.GPL

  xif/           - various authors, see the respective chapters
  
tools/           - COPYING.GPL if not stated otherwise

  minix/         - Copyright S.N. Henson
  nfs/           - Copyright Ulrich Kuehn

xaaes/           - COPYING.GPL
 
@endnode


@node "COPYING.GPL" "COPYING.GPL"
@toc "Legal"
@{U}COPYING.GPL                                                       FreeMiNT@{0}

      GNU GENERAL PUBLIC LICENSE
         Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

       Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

      GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange;
    or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the
Free Software Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

       NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING
BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO
OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

       END OF TERMS AND CONDITIONS

     How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under
these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

  <one line to give the program's name and a brief idea of what it does.>
  Copyright (C) <year>  <name of author>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
  MA  02111-1307  USA

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

  Gnomovision version 69, Copyright (C) year  name of author
  Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type
  `show w'.
  This is free software, and you are welcome to redistribute it
  under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License. Of course, the commands
you use may be called something other than `show w' and `show c'; they
could even be mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program
into proprietary programs. If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications
with the library. If this is what you want to do, use the GNU Library
General Public License instead of this License.
 
@endnode


@node "COPYING.BSD3" "COPYING.BSD3"
@toc "Legal"
@{U}COPYING.BSD3                                                      FreeMiNT@{0}

Copyright (c) <year>, <copyright holder>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of the <organization> nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER>
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
 
@endnode


@node "COPYING.BSD4" "COPYING.BSD4"
@toc "Legal"
@{U}COPYING.BSD4                                                      FreeMiNT@{0}

Copyright (c) <year>, <copyright holder>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   This product includes software developed by the <organization>.
4. Neither the name of the <organization> nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ''AS IS'' AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
 
@endnode


@node "COPYING.MINT" "COPYING.MINT"
@toc "Legal"
@{U}COPYING.MINT                                                      FreeMiNT@{0}

MiNT is Not TOS: A Multitasking Operating System Extension for the
                 Atari ST

Copyright 1990,1991,1992 Eric R. Smith.
Copyright 1992,1993,1994 Atari Corporation
All rights reserved.

MINT is still under development, and is probably still very buggy.
Treat it as you would any experimental software; with extreme caution.
Please read the following notice carefully:

THE MiNT SOURCE CODE AND EXECUTABLES ARE PROVIDED FREE OF CHARGE,
AS IS. ATARI CORPORATION AND ERIC R. SMITH MAKE NO REPRESENTATIONS
OR WARRANTIES WITH RESPECT TO THIS CODE, AND IN PARTICULAR
SPECIFICALLY DISCLAIM ANY IMPLIED WARRANTIES OF
MERCHANTIBILITY OR FITNESS FOR A PARTICULAR PURPOSE. USE THIS
CODE AT YOUR OWN RISK.

@line 1 73 0 0 5

TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION, AND MODIFICATION

1. Redistribution and use of unmodified verbatim copies of MiNT (in either
source or binary forms) are permitted, provided that the above copyright
notices and this documentation are distributed along with all such copies
of MiNT.

2. Redistribution of modified copies of the source code of MiNT, or of
binaries compiled from such modified copies, is permitted under the terms
of paragraph 1 above, provided also that the following conditions are
adhered to:

    a) all modified files must carry prominent notices stating that
    the files have been changed, and the date of any change; and

    b) any binary compiled from a modified version of the MiNT source
    code must, when executed, print a notice stating that it is
    a modified version of MiNT; and

    c) any work that is based in whole or in part on MiNT must be
    licensed, at no charge, to all third parties under the terms
    of this license. Mere aggregation of a work with another work
    based upon MiNT does not cause it to fall under this clause.

In plain English: (1) means you can copy unmodified versions of MiNT,
with the only restriction being that you must preserve copyright
notices, and include a copy of this file. (2) Means that if you
modify your version of MiNT, you can redistribute it as long as
you keep the original copyright notices (including this file),
you clearly indicate that it is a modified version, and you agree
that anyone you give it to can also give it away. If you bundle
MiNT (or a modified version of MiNT) with another program, that
other program does not fall under the terms of this license, but
the copy of MiNT (or the modified version of MiNT) does, and hence
must remain freely copyable.
 
@endnode


@node "Installation" "Installation"
@toc "Contents"
@{U}Installation                                                      FreeMiNT@{0}

There are two types of FreeMiNT archives available, built after every
commit on GitHub. You can choose between a "ready-to-go" bootable, pre-
configured installation or a "per-cpu build". The pre-configured builds
are named 1-19-<number>, number is a build "ID code".
Beside FreeMiNT/XaAES with a suitable configuration, they also contain a
texteditor (QED) and a desktop (TeraDesk).

The "per-cpu builds" are named 1-19-CUR-<cpu type> and @{B}do not@{0} contain
configuration files, desktop or other non-FreeMiNT applications; they are
created for easy upgrading or testing the latest snapshot without touching
the current existing installation.


@{U}Requirements:@{0}

- Atari TOS computer, compatible or emulator with at least 4 MB RAM and
  4 - 9 MB space on harddisc.

- Optional (but recommended): NVDI or fVDI.
  NVDI is @{B}required@{0} if you want to run TT/Falcon kernel or higher with
  @{"memory protection" link mem_prot} (enabled by default). Without NVDI, memory protection
  must be disabled in @{"FreeMiNT boot menu" link mint.ini} in this case.

  NVDI must always be placed @{B}before@{0} mint*.prg in the AUTO folder!


@{U}First installation:@{0}

1. Download the pre-configured bootable snapshot (1-19-<number>),
   according to your system architecture.
2. Unpack the archive to your drive C:/ (boot partition). You can also
   install FreeMiNT to any other bootable partition, but then you have to
   adapt all paths in files mint.cnf and xaaes.cnf according to this
   location @{B}before@{0} rebooting.
3. Verify that mint-*.prg is the @{B}last@{0} program in your AUTO folder
   (Desktop view/sorting option: unsorted).
   If you used any MiNT version before, please deactivate it (rename .prg
   to .prx in auto folder).
4. Reboot.
5. Edit the files "mint.cnf" and "xaaes.cnf" with a texteditor according
   to your needs.


@{U}Update FreeMiNT:@{0}

1. Download the latest version of the per-cpu builds (1-19-CUR-*),
   according to your system architecture.
2. Unpack the archive to your drive C:/ (boot partition).
3. Rename your old mint*.prg in AUTO folder to @{B}.prx@{0}.
4. Verify that the new mint-*.prg is the @{B}last@{0} program in AUTO folder.
   Special for "020-060" version: This archive contains kernels
   (mint*.prgs in AUTO folder) for all machines from 020-060 cpus,
   including AranyM. So please delete (or rename to .prx) the kernels that
   you don't need.
   @{B}Make sure that there is only one (active) mint*.prg@{0} in AUTO folder!
5. Use your current configuration files "mint.cnf" and "xaaes.cnf", edit
   the paths (e.g. "1-19-123" to "1-19-cur") where you need.
   Save them in the new 1-19-cur directory (respectively in xaaes
   subfolder) and reboot.

Have fun!
 
@endnode


@node "auto_folder" "mint.prg in AUTO folder"
@toc "Contents"
@{U}Position of mint.prg in AUTO folder                               FreeMiNT@{0}

Since FreeMiNT is usually booted from the auto folder sequence, the auto
folder sorting and physical order of its contents @{B}does matter@{0} and has an
influence on the FreeMiNT operation.

The golden rule is: The FreeMiNT executable should be definitely the @{B}last@{0}
program executed from the auto sequence.

It is so for the following reasons:

- auto folder programs are usually TOS extensions, so they will still work
  if MiNT passes application calls down to the underlying system (TOS).
  At the other hand, if they're loaded after MiNT, they usually do not
  pass the call further down, so MiNT functions aren't extended - they
  simply are not called at all, and don't work. And it is usually not
  worth to bypass MiNT code completely, because MiNT code is more advanced
  and sophisticated than most popular auto folder programs.

- MiNT provides several mechanisms to protect the environment from various
  forms of misuse, including network security. Hence, if the MiNT kernel
  is loaded as last program from the auto, we can be sure it has an
  ultimate control on the system resources.

- although MiNT will execute auto folder programs located after it, this
  way of loading system extensions is generally depreciated. The TOS
  extensions loaded from the auto should be replaced by MiNT compatible
  XDD device drivers and XFS filesystem drivers.
  When absolutely necessary to load a TSR after MiNT, you should use
  suitable commands provided by mint.cnf or xaaes.cnf
  configuration scripts.

Another golden rule is to reduce the quantity of TSR programs (whether
they're started from the auto or not) to an absolute minimum. There is a
number of auto folder TOS programs, which do not work anymore under MiNT
or their usage is deprecated. A good example is BigDOS (any version).
It is a good replacement for GEMDOS, but the TOS' one. The MiNT GEMDOS is
much more sophisticated than these two taken together.

Also, there is a number of auto folder programs, those seem to work under
MiNT, but make the system unstable. A good (or rather a bad) example is
CKBD.PRG, which causes random system freezes. Such programs definitely
should not be used with MiNT, because they are either badly programmed or
use programming techniques which are not valid in a multitasking
environment.

Finally, there is software  where the documentation explicitly says that
it should be loaded after MiNT. In this case you should verify such a
statement on the FreeMiNT mailing list.
 
@endnode


@node "assoc_files" "Associated files"
@toc "Contents"
@{U}Associated files                                                  FreeMiNT@{0}

After FreeMiNT is loaded, it performs a search for its configuration file
(mint.cnf) and other modules like extended drivers.

All these system files are located in the subdirectory /mint/<version>/
located on the boot drive (e.g. c:/mint/1-19-123/). In this document, we
refer to this directory as the @{B}<sysdir>@{0}.

FreeMiNT will search for mint.cnf/modules first in <sysdir> and then in
the "machine subfolders"; so it allows to keep configuration files and
modules for different kernel versions separately on the disk without a
risk to mix them up.

Also, unlike it is with the auto folder stuff, the execution sequence of
the XDD, XIF and XFS modules does not matter - they can be physically
sorted in any order and also can be located in the subfolders for the
different machines.
 
@endnode


@node "files_paths" "Filenames/pathnames"
@toc "Contents"
@{U}Filename and pathname convention                                  FreeMiNT@{0}

FreeMiNT supports many different filesystems with different filename/
pathname conventions.

The writing convention for file and path names (including drive letters)
in TOS was, that all these were written always in UPPERCASE. For some
reasons, which will be discussed later, this manner is no longer valid.

In FreeMiNT all filenames should be lowercase by default, although mixed
casing or uppercase names are of course allowed, when necessary.
Basically you must remember that in FreeMiNT, unlike in TOS, the letter
casing @{B}does matter@{0}. Please see also Case sensitivity.
@autorefoff

Respecting that, we won't use pathnames like C:\MINT\MINT.CNF, but
preferring the form c:\mint\mint.cnf instead. This is different from what
the TOS (and even MultiTOS) documentation says, even though it is called
@{B}compatibility convention@{0} of storing file- and pathnames. Such a
form of a pathname is accepted by all TOS derivatives, hence the name.

Apart from that there are yet some more, equally valid conventions.
One of them is similar to the convention discussed above, all the
difference is that files are dereferenced by pathnames relative to
drive u:.
So the above example may be also expressed as u:\c\mint\mint.cnf. This is
accepted by all MiNT derivatives, including (for instance) MagiC.

FreeMiNT, being an Un*x like OS, also accepts the slash character ('/')
as a separator in pathnames - where TOS only accepted the backslash ('\').
The slash separator is automatically forwarded by the FreeMiNT core to the
actual filesystem drivers and is considered identical to the backslash.
The above example may be expressed either as c:/mint/mint.cnf or
u:/c/mint/mint.cnf. This is (so far) only understood by FreeMiNT and the
behaviour can be set by modifying the environment variable UNIXMODE.

Finally, the so called Un*x convention is in use, which looks similar to
the one discussed above, except that it does not use drive letters.
Our example looks then like this: @{B}/c/mint/mint.cnf@{0}.
In this case the u: drive is automatically assumed as the top directory
referenced. However, and this is the most important difference between
this convention and those three discussed above, this 'assumption' is made
not by the FreeMiNT kernel itself, but by the so called MiNT Library,
which is linked with almost all FreeMiNT specific programs. The library
has (apart from anything else) to convert such pathnames to the form
directly understood by the kernel.
This task has been moved to the library, and is not performed by the
kernel itself, to reduce the total system call overhead, which would be
always imposed by the conversion, even if no conversion is necessary at
all in a particular case.

In configuration files for system components like the AES or the kernel
itself, you should use the second convention (the 'u:\c\mint\mint.cnf'
thing). The Un*x convention ('/c/mint/mint.cnf') should be only used with
software ported from Unices.
@autorefon
 
@endnode


@node "files_paths_length" "File- and pathname length"
@toc "Contents"
@{U}File- and pathname length                                         FreeMiNT@{0}

Old TOS filesystem supported 'short filenames', i.e. a directory entry
representing a file or folder could have maximum 12 characters (8 for the
filename, 1 for the dot, 3 for the extension, so called 8+3). The maximum
length of a path name was 128 characters.

Modern filesystems may allow longer file and pathnames, for example,
FreeMiNTs NEWFAT filesystem supports up to 255 characters for the filename
and additional 259 character long pathnames. Under ext2.xfs the pathnames
have 'unlimited' length, which means, that they're limited not by the
filesystem driver, but by the DOS core inside the FreeMiNT kernel.
This 'unlimited' limit is actually 1024 characters (1 kilobyte). UNICODE
characters and blank spaces in filenames are also perfectly legal from the
DOS point of view, although it is of course up to the filesystem driver
code to allow or disallow them.

Nevertheless, programs written in pre-MultiTOS era (and some written after
MultiTOS has been revealed too) cannot cope with long filenames.
FreeMiNT provides various forms of filename truncation mechanisms for such
software, so that most even very old programs could work on an XFS with
long filenames.
However, there are programs which completely refuse to run on an extended
filesystem. Such software should be used on disks where long filenames are
disabled (e.g. NEWFAT without VFAT).
 
@endnode


@node "Case sensitivity"
@toc "Contents"
@{U}Case sensitivity                                                  FreeMiNT@{0}

There are three general methods of storing file/folder names on the disk.
It depends to the filesystem (partition) type how names are handled
by FreeMiNT.

@{U}Case insensitive:@{0}

All filenames are stored on the disk and appear on directory listings with
unified casing (all upper or all lower). Mixed casing is not allowed,
there is no difference between upper and lower case letters. Names like
"Program.App", "program.app", "PrOgRaM.aPp" are considered identical.
A reference name like "PROGRAM.APP" to a file, which was saved as
"program.app", is perfectly legal.
An example of such a filesystem is the TOS FS or NEWFAT without VFAT
extension.

@{U}Case preserving:@{0}

This is similar to the case insensitive one, with a notable exception,
that the filename casing is preserved in the form used by the creator of
the file. For example, if you create a file "Program.App", it will appear
in directory listings exactly as "Program.App". However, it is only some
sort of visual stuff, the casing still does not matter when directory
searching is performed.
Hence the "Program.App" file can be legally referenced as "program.app",
"PROGRAM.APP" or whatever. An example of such a filesystem is the NEWFAT
with VFAT or a ramdisk. Also all internal pseudo-filesystems in FreeMiNT,
like unifs, biosfs etc. are case preserving.

@{U}Case sensitive:@{0}

Here casing really matters! If you save a file under a name like
"program.app", you cannot access it later as "PROGRAM.APP", because these
two names will be considered different. Also, a case sensitive filesystem
is simultaneously case preserving by nature.
Examples of such a filesystem is ext2.xfs or minix.xfs.

@{B} NOTICE:
 Because of the case preserving and case sensitive filesystems, the old
 TOS convention of storing all path and filenames in UPPERCASE is
 *** no longer valid ***.
 File- and pathnames should be lowercase by default.@{0}
 
@endnode


@node "mem_prot" "Memory protection"
@toc "Contents"
@{U}Memory protection                                                 FreeMiNT@{0}

FreeMiNT, what is normal for Unices, but new to TOS-like systems, has a
concept of protecting the program's memory space from unauthorized
"intruders". Such an intruder is usually another program, that went crazy
due to its bugs.

@{B}Memory protection is supported by FreeMiNT kernels (versions) for 030-
machines and upwards, means Falcon, TT, Milan, Hades, CT6* and Aranym.
On the FireBee, memory protection is not available because of a different
MMU mapping.@{0}

The hardware memory protection is implemented at the CPU level on a
"per process" basis, so that any memory a process hasn't allocated is
considered invalid for that process. Virtually, such memory does not
exist, and starts to do just after the process requests it from the system
using a Mxalloc() call, either implicitly or explicitly.
The memory protection serves for preventing an errant process from
destroying other programs running in parallel, or even the system itself.
At least, that's the theory.

In practice, apart from Un*x software which usually is perfectly
compatible with memory protection, FreeMiNT has to be also compatible with
TOS software. Either TOS lacks some features, necessary for programs, or
programmers lack knowledge, necessary to write a decent program, just
enough to say, that quite a lot of TOS programs tend to enter supervisor
mode and do things beyond the system control. Under TOS it is perfectly
okay, however, under FreeMiNT there's a risk for a conflict with the
resource protection mechanisms - and FreeMiNT, to be generally compatible
with TOS software must allow that, relying on a limited confidence, that
the software generally "knows what it is doing". If it does not know,
there may be no chances for a recover.

Fortunately, FreeMiNT implements the memory protection in a way that
allows some user tuning. The way the program's memory space can be
protected is encoded in the program's binary file header. There are four
"levels" (modes) of the protection implemented:

@{B}Private@{0}
In this mode the program's memory space is under a very restrictive
protection:
Noone can access the area taken by the program, except the program itself
and the operating system. Even interrupt handlers, if any are installed by
the program, cannot do that! This is the default protection mode and most
programs really work fairly good under it.

@{B}Private/Readable@{0}
Here the protection is less restrictive: still, noone can write to the
program's area (except the program itself and the operating system), but
everybody can safely read data from it. You should set this mode for GEM
programs, those use the AV protocol, but are not written with the memory
protection in mind. ST-Guide is one of good (bad) examples here.

@{B}Super@{0}
The full name is "Supervisor accessible": The program's area can be
accessed by noone (again, except the program itself and the operating
system) as long as the "intruder" runs in the CPU user mode. However, any
code running in the CPU supervisor mode (as an interrupt handler for
example) can access the program's memory space freely. You should set this
mode for software, that installs own interrupt handlers.
The Dump!module player is a good example.

@{B}Global@{0}
This mode can be set, if a program does not run under any of the afore-
mentioned protection modes. The program's space is unprotected and anyone
can freely access it.

Memory protection works on a per-process basis. Unless it uses the special
mode bits in Mxalloc(), a process' entire text+data+bss and any memory it
allocates will be of the same type.

By default, all processes load into private memory. If a program
terminates and remains resident with the Ptermres() system call, then its
private memory will be converted to Super memory; that's because TSRs
won't work in private memory. Some TSRs may in fact need to be set to load
into global memory (if they provide services for user mode programs).
There are other programs which need to grant wider access to their memory
space: for example, the Gulam CLI is one, because Gulam's children can
call Gulam through a pointer found in the system variable space. But Gulam
is a bad choice of shell anyway, because you can't run more than one of
them. Current versions of STeno also must grant wider access, because it
passes data to STalker using shared memory; private/readable is adequate
for that.

Programs that load before MiNT does (i.e. in the AUTO folder) will find
themselves in global memory.  This is the easiest way to be sure that
your TSRs will go on working: RAMdisks, FOLDR100, CACHE080, etc. all
work when loaded that way.

Notice that a process can grant wider access to its own address space, but
it can't change the access permissions of any other process' space. If you
set the PRGFLAGS of some process so it loads into global memory, that
doesn't mean it can access anybody else's memory, it just means that
anybody can access ITS memory.


@{U}Memory Requirements:@{0}

To make memory protection work, additional memory to store the protection
tables is required. The exact amount is:

- for 030, for every process:
    128 bytes for every 256MB of memory available (ST- or TT-RAM)
  + 384 bytes
  + 128 bytes for every 16MB of TT-RAM
  + 1024 bytes for every MB of memory (ST- or TT-RAM)

  Additionaly, for a table that is shared between all processes:
      2K
    + 128 bytes for every MB of TT-RAM
  
  For example, with 16MB ST-RAM + 16MB TT-RAM, that will make
  - ~18K per process
  - 4K globally

  for 16MB ST-RAM + 256MB TT-RAM, that will make
  - ~243 KB per process
  - 34K globally

  That is, running 100 processes at the same time will eat up
  ~10% of your TT-RAM just for these tables! You have been warned.


@{U}How a program violates the memory protection:@{0}

1) it tries to access the memory, that belongs to another program.
   The system alert, that appears then, mentions a memory violation
   "type private". Paradoxally, the program, that has been shot
   down this way, may not be guilty. For example, if you notice,
   that your desktop gets killed due to memory violation "type
   private", while you were playing with *.hyp files, you should
   change the protection status not in the desktop executable, but,
   yes, you guessed it - in the st-guide.app.

2) it tries to access memory, that does not belong to anyone. It is
   called "memory violation type free". This is what GFA BASIC
   programs usually do, but also the aforementioned st-guide.app
   may be an example, when it comes to display a colour image
   embedded in a *.hyp document. This means a bug in the program,
   and we cannot do much in this point (except dodging the author
   to fix the bug).

3) it causes a complete system crash. Examples are: Pure Debugger,
   X-Boot III or Dump! module player. Paradoxally, as it is with
   the mentioned programs, it may be the most easy thing to fix -
   it is just enough to change the protection status to
   "Supervisor".
   Newest FreeMiNT versions are a bit more picky, try to keep an
   eye on such programs and warn the user (you), when it is likely
   that the further program execution will bring the system down.
   Unfortunately, it is not always possible to detect, that the
   program is going to do an ugly thing.

Using the Thing desktop you can try changing the protection status of a
program and test the behaviour. As a rule, if a program runs fine with the
"Private" status, you should leave the things as they are. If it does not,
the next tested status should be "Readable", then "Super",
and finally "Global".

If the program still does not work, it may be worth to give it a try
without the memory protection. However, you're encouraged to run the
system in the memory protected mode (unless it is completely unacceptable
for you).
 
@endnode


@node "fs_cache" "Filesystem cache"
@toc "Contents"
@{U}Filesystem cache                                                  FreeMiNT@{0}

The filesystem cache is (physically) a memory area where all disk
operations are bufferred. The main goal of the cache is to reduce the hard
drive activity by avoiding as much explicit reads and writes as it is only
possible - write operations go to the cache rather than directly to the
media, also read operations will access the cached data rather than hard
drive sectors. As the memory access is usually much faster than a disk
access, this significantly increases the general filesystem performance,
especially (but not only) when deleting/renaming/changing attributes on
multiple files at a time.

The default cache size is 128 kb. @{B}It's recommended to increase the cache@{0}
if you use many ext2, MinixFS and NEWFATFS partitions. Please refer to the
FS_CACHE_SIZE= keyword in the chapter "mint.cnf" on how to configure the
FreeMiNT filesystem caches.
Currently, the cache is first allocated in TT-RAM and then in ST-RAM.

As said above, filesystem reads will first lookup the cache, then access
the physical media just when the requested data is not found in it.
A write operation will put data to the cache so that it is available for
subsequent read operations. Thus, a larger number of interleaved
read/write operations referring to the same chunk of cached data - such as
while renaming multiple files in one directory - will at most result in a
single disk access for reading the chunk, and another disk access for
writing the final result out to the drive, instead of generating one read
and one write per single directory entry being updated.

Of course, when all writes go to the cache, the buffer finally becomes
full and gets emptied by writing a part of it back to the physical media.
Also the same is done in certain time intervals, so that the media gets
updated on regular basis.

There are several programs which provide filesystem cache functionality to
TOS. You don't need any of these anymore, because a high performance
caching module has been built into the FreeMiNT kernel. Hence, when using
FreeMiNT, it is advisable to deactivate all external caching programs,
read/write buffers, FAT caches and so on, because these, in conjunction
with the FreeMiNT built-in cache, will @{B}slow down@{0} disk operations, rather
than speeding anything up.

The backside of the caching is, that written data resides for some time in
the cache only. This 'some time' is actually several seconds, as
configured in the mint.cnf file. If something bad occurs by this time,
like a power failure or system crash, the data is never written back to
the disk and a data loss occurs. This is also the reason, why we need to
close the system with shutdown programs instead of just switching the
power off - when the shutdown is initiated, the system ensures that all
the cached data is written out to the media before performing a reboot or
entering a halted condition.

Note for removable medias: the cache try to automatically lock the drive
if there are unwritten sectors in cache.
 
@endnode


@node "RAMdisk" "RAMdisk"
@toc "Contents"
@{U}RAMdisk                                                           FreeMiNT@{0}

FreeMiNT supports a RAMdisk in U:\ram\ with dynamically allocated size.
 
@endnode


@node "tz_info" "Supplying timezone information"
@toc "Contents"
@{U}Supplying timezone information                                    FreeMiNT@{0}

Beginning with kernel version 1.14.8 the time related functions of
FreeMiNT have changed drastically. Don't worry if you have missed to read
this documentation until now; if you don't use the new facilities you
can't mess up anything. The new stuff is 100 % compatible with the old
time interface to the kernel.

@{U}1. Standard TOS time@{0}

Earlier versions of FreeMiNT have inherited the standard TOS time setting
(and retrieval) functions. The only difference was that changing the
system time required superuser privileges.

The TOS time functions had one major short-coming. The internal
representation of a calendar time caused a maximum resolution of two
seconds for the system time. Furthermore, timezones were completely
ignored; evaluating user-supplied timezone information was left
to software.

@{U}2. New MiNT features@{0}

As a default the MiNT kernel clock now ticks in UTC (Universal Time
Coordinated, GMT or Greenwich Mean Time is more or less a synonyme
for that). You can also tell the kernel about the timezone that
you're living in. Those programs that request local times from the
kernel will get values corrected according to the timezone settings
you have supplied.

No, again, don't worry. As long as you haven't set the timezone
explicitely, no correction will take place, no mess, the kernel
will believe that you live in London/UK and that there is no such
thing as daylight savings time.

@{U}3. How to use them?@{0}

The user-level (resp. system-administrator-level) interface to the new
time facilities is the tzinit program. Download and install the tzinit
program as /usr/sbin/tzinit but any other place will do.
Now edit the following lines in you MiNT configuration file mint.cnf:

Uncomment the first line if you want to make the kernel clock tick in
UTC mode. For localtime mode use (uncomment) the second line.

#exec u:/sbin/tzinit
#exec u:/sbin/tzinit -l

@{B}NOTE: Earlier versions need to set the environment variable "TZ" in
mint.cnf. This is now superseeded by the MiNTLib's timezone database. It's
strictly recommended to remove any TZ environment variable and to install
the timezone database!@{0}

Because the tzinit program changes kernel time information it needs
super-user privileges to run (don't worry about that if you run it
from mint.cnf or from one of the /etc/rc files). Insufficient
privileges are actually the only possible reasons for tzinit to fail.

The tzinit program has one major bug. It should actually be a
daemon that waits and changes the kernel time information if
daylight savings time (DST) for your timezone starts or end while
your machine is running. Thus, when your local time changes from
DST to standard time or standard time to DST during your machine is
running you should reboot. In case your kernel clock ticks in local
time you also have to change the hardware clock by hand.

@{U}4. UTC vs. Local Time@{0}

You have the choice if you want the kernel clock to tick in UTC
or in local time. Both alternatives have pros and cons:

@{B}UTC@{0}
This is the standard for 'real' Eunuchs machines. A major advantage
is that you never have to change the hardware clock whether or not
DST applies or not. If you sometimes run Linux or NetBSD on your
machine you will also welcome this possibility because these
operating systems feel much more comfortable with a hardware clock
ticking in UTC.

@{B}Local time@{0}
Deprecated, but probably better if you run other non-Eunuchs-like
operatings systems, too. If your hardware clock is actually fed by
some radio time signal or other source that provides the time in
local representation you also may need this setting. The major
disadvantage. You have to ensure that you change the hardware clock
whenever DST starts or ends (when running UTC it is sufficient to
reboot).

@{U}5. Other user-visible changes@{0}

The kernel time now has an accuracy of approximately 26 microseconds
and a resolution of 1 microsecond (the old interface provided a maximum
accuracy of 2 seconds). Provided that your software gets adapted to
the new MiNT features you will see that the accuracy increases.

@{U}6. Bugs@{0}

Many, many time-keeping variables inside the kernel use the old TOS
format (which is more or less derived from MS-DOS). This was probably
short-sighted and it causes difficulties now. You can really confuse the
system if you keep on changing the system timezone or the kernel clock
mode too often. Timestamps can get corrupted and it processes that rely on
precise timing can get confused. Thus, you are strongly discouraged to
change the system timezone or the kernel clock mode from somewhere else
than mint.cnf. In mint.cnf you should call the tzinit program as soon as
possible.
 
@endnode


@node "mint.cnf" "Configuration file"
@toc "Contents"
@{U}Configuration file mint.cnf                                       FreeMiNT@{0}

The mint.cnf file is loaded when the entire system is practically up and
all device drivers and filesystem drivers have been loaded etc.
If you want to control earlier settings, see mint.ini file.

Edit mint.cnf with a normal ASCII text editor. Lines starting with '#'
are comments. Other lines are commands for MiNT to execute at boot
up, or variables that control how MiNT behaves.

The '#' sign at the begin of the line means that a comment follows.
The entire line after the '#' sign will be ignored by the parser.

Some keywords allow more than one parameter, the entries can be
separated with commas or semicolons, e.g.
@{B}PATH=/bin,/sbin,/usr/bin@{0} or @{B}PATH=/bin;/sbin;/usr/bin@{0}

Since FreeMiNT 1.16.0, the format of most keywords has changed. Old
keywords are still supported, however, you cannot use this configuration
file for older versions of MiNT!

The term `sysdir' we use here is short for `system directory' and means
the directory where you keep your mint.cnf file, your modules (XFS, XIF
and XDD files) and other such system binaries.
The sysdir value is usually u:/c/mint/1-19-* ("*" is the build number).

- @{"Kernel settings" link cnf_kernel}
- @{"Filesystem settings" link cnf_fs}
- @{"Commands" link cnf_commands}
- @{"Environment variables" link cnf_env}
- @{"Start programs" link cnf_exec}
 
@endnode


@node "cnf_kernel" "Kernel settings"
@toc "mint.cnf"
@{U}Kernel settings                                                   FreeMiNT@{0}

There are reasonable defaults for all of these.

@{B}KERN_SLICES=<number> (default 2)@{0}
- Controls how long a process may run before being interrupted. The number
  means an amount of 20 ms time intervals.
  The default value is usually best, but if you tend to run very processor
  intensive applications in the foreground, you might want to set
  KERN_SLICES=3
  (this makes CPU hogs get more time than they otherwise would).

  The smaller the KERN_SLICES value, your processes have faster response
  time but the general performance is worse. Very fast machines however,
  may benefit from setting "1" here.
  E.g. KERN_SLICES=2

@{B}KERN_DEBUG_LEVEL=<number> (default 1)@{0}
- Controls output of global debugging information. The higher the level,
  the more stuff MiNT will spew out about what it's doing.
  The average user doesn't want to hear about this stuff, so default "1"
  display ALERT messages only. Note that you need a debug kernel to get
  more: Normal kernels do not contain so much debug information.

@{B}KERN_DEBUG_DEVNO=<number> (default 2)@{0}
- The BIOS device number to which the debug info should be sent.
  <number> can be: 0=printer, 1=aux/modem, 2=screen (console), 3=midi,
  4=keybrd, 5=raw.

@{B}KERN_BIOSBUF=<bool> (default YES)@{0}
- Controls how BIOS I/O is performed. Normally, MiNT tries to buffer this
  to provide a (considerable) improvement in speed. However, some
  applications may get upset by this.
  KERN_BIOSBUF=NO turns off all buffering for maximum compatibility.

@{B}KERN_SECURITY_LEVEL=<number> (default 0)@{0}
- Enables the appropriate security level:
  0 - recommended for single user setups, like FreeMiNT.
  1 - recommended for multiuser setups, like KGMD.
  2 - full protection, unsupported by software, thus discouraged.

@{B}KERN_MPFLAGS=<bitfield> (default 0)@{0}
- Controls the memory protection behaviour. Only the bit 0 is defined:
  1 means, that more strict model of the protection should be enabled.
  Some programs may refuse to run, so the default is 0.

@{B}TPA_FASTLOAD=<bool> (default NO)@{0}
- Forces fast loading (without zeroing all the memory) for all programs.
  This defines a default state, that can be modified later via appropriate
  kernel calls.
  TPA_FASTLOAD=NO means that the information from the program header
  will be used to decide (this is like TOS does).

@{B}TPA_INITIALMEM=<number> (default 1024)@{0}
- Set maximum additional TPA size for new processes (in kilobytes). Better
  keep it low (1024 is what we call low) if your machine has 4 MB RAM
  or less.

@{B}PROC_MAXMEM=<number>@{0}
- Set the maximum amount of memory that any process may use (in kB).
  The default is to make this unlimited, but if you have a lot of memory
  and/or programs that grab more memory than they should, try setting
  this.
  E.g. to limit processes to 4096K of memory, set PROC_MAXMEM=4096

  WARNING: The process will not be allowed to allocate memory beyond the
  limit, and it won't "see" more memory as available from the system.
  Please understand that programs like "free" (or any other that
  interrogates the system how much memory is available) is a process
  as well, thus it will undergo this limit too!

  Decent shells (desktops) allow you to limit the maximum amount of
  memory independently for each program.

@{B}GEMDOS_AUX=u:/c/mint/aux.out
GEMDOS_CON=u:/c/mint/con.out
GEMDOS_PRN=u:/c/mint/prn.out@{0}
- Three commands, that define output files for RS-232, console and
  printer devices. The argument for each one must be a pathname.
  For best results, the convention u:/drive/pathname should be used
  for all specified pathnames from now on.
 
@endnode


@node "cnf_fs" "Filesystem settings"
@toc "mint.cnf"
@{U}Filesystem settings                                               FreeMiNT@{0}

@{B}FS_VFAT=<comma separated character sequence>@{0}
- Enables VFAT extension for the selected drives. The VFAT extension is
  disabled by default.
  If you use both TOS and MiNT, better don't enable VFAT extension on your
  boot drive.
  E.g. FS_VFAT=D,E,F,G

@{B}FS_VFAT_LCASE=<bool> (default NO)@{0}
- Tells the kernel to return lowercase filenames from VFAT directory
  searches.

@{B}FS_WB_ENABLE=<comma separated character sequence>@{0}
- Enables write back cache for selected drives. The write back cache is
  disabled by default. Also, it does not have any effect for TOSFS drives.
  E.g. FS_WB_ENABLE=C,D,E,F

@{B}FS_CACHE_SIZE=<number> (default 128)@{0}
- Specifies the size of disk cache in kilobytes for the internal caching
  module. It's highly recommended to set the size to 512 or higher!
  E.g. FS_CACHE_SIZE=4096

@{B}FS_CACHE_PERCENTAGE=<number> (default 5)@{0}
- Specifies the size of the disk cache (in percents) to be filled with
  linear reads. E.g. FS_CACHE_PERCENTAGE=10

@{B}FS_UPDATE=<number> (default 5)@{0}
- Set update time for system update daemon in seconds.
  It isn't recommended to use a value less than 4.

@{B}FS_WRITE_PROTECT=<comma separated character sequence>@{0}
- Software write protection on filesystem level.
  E.g. FS_WRITE_PROTECT=R,S

@{B}FDC_HIDE_B=<bool> (default NO)@{0}
- Tells MiNT to remove floppy drive B: from the system.
  It is useful on single floppy systems to get rid of "Insert Disk B: into
  Drive A:" messages from the AES.
 
@endnode


@node "cnf_commands" "Commands"
@toc "mint.cnf"
@{U}Commands                                                          FreeMiNT@{0}

@{B}cd <path>@{0}
- Set current working directory. FreeMiNT does this automatically.
  E.g. cd u:/

@{B}set <parameter>@{0}
- The "set" directive controls the behaviour of the mint.cnf parser.
  It accepts one of three parameters:
  @{B}-q@{0}: Silent output (+q for verbose output)
  @{B}-v@{0}: Print command lines (+v don't)
  @{B}-c@{0}: Control interpretation of escape sequences
  This command should be placed at first in mint.cnf.

@{B}include <file>@{0}
- Include another config file at this place. The included file will be
  interpreted as a part of the mint.cnf file.
  E.g. include u:/c/mint/network.cnf

@{B}alias <drive:> <path>@{0}
- Make a fake "drive" that actually points to the given path.
  E.g. if you do "alias r: u:/c/some/long/path" then clicking on drive r:
  puts you into the folder c:/some/long/path

@{B}echo <message>@{0}
- Print something on the screen.

@{B}exec <program>@{0}
- Runs a program; you must give the complete path and file extensions.
  E.g. exec c:/bin/echo.prg

@{B}sln <path> <link>@{0}
- Make a symbolic link named "link" pointing to "path".
  The "sln" command may be used to create "links" on drive U:. If u:/foo
  is a link to c:/bar, then u:/foo/foo.txt is another way of saying
  c:/bar/foo.txt.
  Judicious use of links can make re-arranging hard disks and directories
  painless (if you always use the names on drive u:, it doesn't matter
  where you put the actual directories).


@{U}Setting up a root filesystem for a UNIX environment:@{0}

This is only an example and is not essentially needed to run FreeMiNT.
If you want to use a UNIX environment (with a linux ext2 filesystem, like
EasyMiNT does), you have to set these symbolic links correctly.

WARNING: Directories listed in the left column must really exist!
         You have to adjust the commands below for your filesystem
         structure.

sln c:/mint/1-19-b8c/sys-root/bin      u:/bin
#sln e:/boot     u:/boot
sln c:/mint/1-19-b8c/sys-root/etc      u:/etc
#sln e:/home     u:/home
#sln e:/lib      u:/lib
#sln e:/mnt      u:/mnt
sln c:/mint/1-19-b8c/sys-root/opt      u:/opt
sln c:/mint/1-19-b8c/sys-root/root     u:/root
#sln e:/sbin     u:/sbin
sln c:/mint/1-19-b8c/sys-root/share    u:/share
sln c:/mint/1-19-b8c/sys-root/tmp      u:/tmp
#sln e:/usr      u:/usr
sln c:/mint/1-19-b8c/sys-root/var      u:/var

Some people want also to do this:

sln u:/pipe/pty.A u:/dev/pty.A 
sln u:/pipe/pty.B u:/dev/pty.B 
sln u:/pipe/pty.C u:/dev/pty.C 
sln u:/pipe/pty.D u:/dev/pty.D 
sln u:/pipe/pty.E u:/dev/pty.E 
sln u:/pipe/pty.F u:/dev/pty.F 
sln u:/pipe/pty.G u:/dev/pty.G 
sln u:/pipe/pty.H u:/dev/pty.H 
sln u:/pipe/pty.I u:/dev/pty.I 
sln u:/pipe/pty.J u:/dev/pty.J 
sln u:/pipe/pty.K u:/dev/pty.K 
 
@endnode


@node "cnf_env" "Environment variables"
@toc "mint.cnf"
@{U}Environment variables                                             FreeMiNT@{0}

These "basic" environment variables should be set in mint.cnf.
Application-related variables are set in file xaaes.cnf.

@{B}setenv PCONVERT PATH,HOME,SHELL
setenv UNIXMODE /brUs@{0}
- These two control some internals of MiNT Library.
  FreeMiNT sets these two automatically.

@{B}setenv PATH /sbin;/bin;/usr/sbin;/usr/bin (default <sysdir>)@{0}
- Default path(s) to search for MiNT executables.

@{B}setenv SLBPATH /c/mint/slb;/c/gemsys (default <sysdir>)@{0}
- Default path(s) to search the SLBs (MagiC style 'shared libraries')
  Note that FreeMiNT  will search SLBs in the sysdir automatically if
  found nowhere else, so it is useless to explicitly add this here.

@{B}setenv HOSTNAME <name>@{0}
- It is advisable to set this to a preferred name of your computer.
  E.g. setenv HOSTNAME atari

@{B}setenv TMPDIR <path>@{0}
- Directory for temporary files. E.g. setenv TMPDIR u:/tmp

@{B}setenv LOGNAME root
setenv USER    root
setenv HOME    /root
setenv SHELL   /bin/bash@{0}
- Default login variables. Leave them commented out, if you use UNIX style
  login. If you're using plain FreeMiNT and want to run UNIX shells under
  TOSWIN, please uncomment it.

@{B}setenv AESDIR   u:/c/mint/n_aes/
setenv THINGDIR u:/c/mint/thing/@{0}
- These lines (with proper pathnames) are obligatory, if you're going to
  use N.AES and Thing Desktop, respectively.
  Note that if you don't set the THINGDIR, the Thing desktop will store
  all its files in your $HOME directory.
 
@endnode


@node "cnf_exec" "Start programs"
@toc "mint.cnf"
@{U}Start programs                                                    FreeMiNT@{0}
@autorefoff

Finally, some programs can be executed. Some examples are only useful
with a UNIX environment.
Note that programs launched with "exec" are started before GEM, so they
must be TOS/TTP programs or MiNT executables.


@{B}exec u:/bin/bash u:/bin/fscheck.sh
echo@{0}
- Checking filesystem if necessary. Note: You need a correct /etc/fstab,
  see @{"Filesystem check" link fs_check}.

@{B}exec u:/c/mint/e2fsck.ttp -C 0 -p e:@{0}
- Alternative method, if you have e2fsck.ttp in /c/mint,
  and drive e: is your ext2fs drive.

@{B}exec u:/sbin/tzinit
# or exec u:/sbin/tzinit -l@{0}
- Set up time stuff. Note that you need MiNT Lib timezone package
  (installed along with the library) for this to work.
  The first setting is valid if your clock ticks in UTC. For local
  time you have to add -l to the tzinit.

@{B}exec u:/opt/GEM/mgw/mgw.prg
echo@{0}
- Start Draconis to MiNT-Net gateway.

@{B}exec u:/opt/GEM/gluestik/gluestik.prg
echo@{0}
- Start GlueSTiK redirect daemon. For netclients which use STiK/STinG
  routines.


@{U}Start the system:@{0}

At last, the system user interface (shell, AES, ...) is started. The best
option is to have the @{"INIT= command" link misc_init} (or GEM=) after all pathnames
are already set up by commands above.

If MiNT is supposed to execute a GEM (like XaAES, n.aes or myAES), you
should specify the full path and filename like that:

@{B}GEM=u:/c/mint/1-19-123/xaaes/xaloader.prg@{0}

You can also request MiNT to execute the TOS AES residing in ROM.
WARNING: This is not recommended, you should use a GEM version that is
multitasking friendly instead (XaAES, myAES, n_aes)!

@{B}GEM=ROM@{0}

Otherwise, if your init program is not a GEM, you should use the command
"INIT=" as follows:

@{B}INIT=u:/c/mint/init.prg@{0}

@autorefon

If you leave both commands above commented out, then MiNT will attempt to
execute a program called `sh.tos' found in the system directory (the same
where the mint.cnf resides), and if this fails, the internal minimum shell
will be executed.
 
@endnode


@node "mint.ini" "mint.ini"
@toc "Contents"
@{U}mint.ini                                                          FreeMiNT@{0}

The file mint.ini in <sysdir> is created automatically with default values
at first FreeMiNT boot and contain some basic boot settings.

These settings can be changed in the boot menu by pressing @{B}LEFT SHIFT
key at FreeMiNT boot@{0}, so the mint.ini file normally should not be
edited manually!
The only exeption is the option "Boot delay in seconds" which does not
appear in boot menu. So if you want a longer or shorter boot delay (the
time FreeMiNT waits for you to press the LEFT SHIFT key), please edit this
value in mint.ini file with a texteditor.

@{U}FreeMiNT boot options menu:@{0}

- Start FreeMiNT yes/no
- Load XFS modules yes/no
- Load XDD modules yes/no
- Execute @{"AUTO folder" link auto_folder} programs yes/no
- @{"Memory protection" link mem_prot} on/off (Only available with >= Falcon/TT kernel)
- Display FreeMiNT init sequence step by step
- Debug/trace level (none, ALERT, DEBUG, TRACE, TRACELOW)
- Debug output dev. (printer, modem, console, midi, keyboard, raw console)
- Write a boot-logfile
- Remember settings (save mint.ini)
 
@endnode


@node "key_tbl" "Keyboard table files"
@toc "Contents"
@{U}Keyboard table files                                              FreeMiNT@{0}

FreeMiNT first try to load the global keyboard table (configuration) named
"keyboard.tbl" located in <sysdir>; if not found the internal default
table for US keyboard is used.
For other keyboard layouts, various keyboard tables can be found in the
respective <sysdir>/keyboard/<language>/ subfolders.
Please copy the .tbl file for your keyboard layout to the system directory
<sysdir> (i.e. the same as mint.cnf is) and rename the file to
"keyboard.tbl".

Example translation tables in source and object form, and also a program
that compiles them, are available along with the kernel source
distribution.
 
@endnode


@node "USB" "USB support"
@toc "Contents"
@{U}USB support                                                       FreeMiNT@{0}

FreeMiNT supports several USB adaptors like NetUSBee or EtherNat card and
includes drivers for USB mouse, keyboard, printer, graphic tablet and
mass storage devices (USB sticks, harddiscs and also SD card readers).
Mass storage devices can be hot-plugged.

Like XaAES, USB support is a kernel module (and started by a loader.prg)
which can be executed manually or from mint.cnf.
In mint.cnf, uncomment the following lines:

@{B}exec u:/c/mint/1-19-*/usb/loader.prg
echo@{0}

All components are located in folder /<sysdir>/usb/:

- loader.prg + usb.km: Loader and USB core API driver (kernel module).

- aranym.ucd: Controller driver for host USB ports.
- ehci.ucd: Controller driver for EHCI PCI cards (alpha stage).
- ethernat.ucd: Controller driver for EtherNAT card.
- netusbee.ucd: Controller driver for NetUSBee.
- unicorn.ucd: Controller driver for UNICORN ACSI to USB card.

- eth.udd:
- keyboard.udd: Keyboard device driver.
- mouse.udd: Mouse device driver.
- printer.udd: Printer device driver.
- storage.udd: Mass storage class driver version 1.0.
- tablet.udd: Device driver for graphic tablets.

by: David Galvez, Roger Burrows, Claude Labelle, Alan Hourihane,
    Christian Zietz
 
@endnode


@node "Network setup" "Network setup"
@toc "Contents"
@{U}Network setup                                                     FreeMiNT@{0}

Establishing a connection to a network (router) is easy and can be done
manually, with a shellscript or automatically at FreeMiNT boot.
Note that a commandline shell ("bash", for manual or script execution) is
only included in the pre-configured builds, not in the "per-cpu builds"!

This manual is for usage of a fixed IP for your Atari.

1. Enable the interface driver for the used network card (if included in
   the <sysdir>/<machine subfolders>) by renaming it from @{B}.xix@{0} to @{B}.xif@{0}.
   If the driver is not included, copy your driver to <sysdir>.
   Reboot after that.

2. Edit file /etc/resolv.conf with a texteditor. Enter the IP address of
   your provider's nameserver (DNS) or the IP address of your router
   (which forwards the DNS request to the provider then). More than one
   entry is allowed, e.g:
   @{B}nameserver 192.168.0.1
   nameserver xxx.xxx.xxx.xxx@{0}

@{U}Manual start:@{0}

3. Run program /bin/ifconfig from the commandline shell with the
   following parameters:
   @{B}<interface name> addr <Atari-IP> netmask 255.255.255.0 up@{0}
   - <interface name> of your network interface, e.g. "en0" or "rtk0".
   - <Atari-IP> is the IP-address for your computer. Please see the manual
     of your router which IPs are accepted.
   Example:
   @{B}ifconfig en0 addr 192.168.0.10 netmask 255.255.255.0 up@{0}

4. Run program /bin/route with the parameters:
   @{B}add default <interface name> gw <router-IP>@{0}
   - <interface name> of your network interface, see above.
   - <router-IP> is the IP-address of your router.
   Example:
   @{B}route add default en0 gw 192.168.0.1@{0}

@{U}Automatic start:@{0}

3. Open file mint.cnf with a texteditor, edit and uncomment the lines:

@{B}exec u:/bin/ifconfig XXX addr AAA.AAA.AAA.AAA netmask 255.255.255.0 up
exec u:/bin/route add default XXX gw BBB.BBB.BBB.BBB@{0}

- Replace XXX with your used interface name, e.g. "en0" or "rtk0".
- Replace AAA.AAA.AAA.AAA with the IP address of your Atari.
- Replace BBB.BBB.BBB.BBB with the IP address of your router.
- Remove the "#" at the beginning of these lines.

3.1. Depending to the network programs you want to use, you also may have
     to start GlueSTik and/or MagicNet gateway. Please uncomment the
     respective lines by removing the "#" at the beginning. E.g.:
     @{B}exec u:/opt/GEM/gluestik/gluestik.prg
     echo@{0}

4. Save the file and reboot.
 
@endnode


@node "fs_check" "Filesystem check"
@toc "Contents"
@{U}Filesystem check                                                  FreeMiNT@{0}

Checking the filesystem(s) integrity is useful after a system crash or if
one or more drives/partitions were not unmounted correctly during
shutdown. This can be done manually via commandline shell or automatically
at boot.
Again, a commandline shell ("bash", for manual execution) is only included
in the pre-configured builds, not in the "per-cpu builds"!

Filesystem checker for FAT/VFAT/F32 and minix filesystems are included
in FreeMiNT.


@{U}Download additional SpareMiNT packages:@{0}

- If you use an ext2 filesystem, download "e2fsprogs" package (according
  to your system architecture).

- If you want to use the automatic check at boot you also need the package
  "grep".

Unpack the archives into the <sysdir>/sys-root/ subfolder.


@{U}Manual usage:@{0}

Open the commandline shell (TosWin2/Start shell).

For checking (and repairing, if necessary) FAT/VFAT/F32 filesystems use
the command @{B}fsck.fat@{0} followed by the driveletter and a colon, e.g:

@{B}fsck.fat c:@{0}

For minix filesystems, use command @{B}fsck.minix@{0}, again followed by the
driveletter and a colon:

@{B}fsck.minix d:@{0}

For ext2 filesystems, use @{B}e2fsck@{0} command:

@{B}e2fsck e:@{0}

Without driveletter and colon these commands display more options.


@{U}Automatic filesystem check at boot:@{0}

- Open file mint.cnf in a texteditor and uncomment the following lines:

  @{B}exec u:\bin\bash u:\bin\fscheck.sh
  echo@{0}

- The file @{B}fstab@{0} in <sysdir>/sys-root/etc/ determines which drives
  are to be checked by fsck.*/e2fsck and which type of filesystem they
  contain. The parameters are:

  <Drive> <mountpoint> <type> <owner> <group> <permissions>

  Edit only the driveletters and filesystem type ("dos" for any *FAT* FS,
  "ext2" for ext2 FS and "minix" for minix FS. All other parameters stay
  the same.
  Uncomment the respective lines (remove "#" at the beginning).
 
@endnode


@node "tos_prgs" "TOS programs under MiNT"
@toc "Contents"
@{U}TOS programs under MiNT                                           FreeMiNT@{0}

Many TOS programs run fine under FreeMiNT with @{"memory protection" link mem_prot}, some
programs need some "tuning"; to get these programs to work, you must
change (set) their program flags.
There's also software which become obsolete when using MiNT (because their
functions are included) and others which cause problems or don't work
at all.
The following lists are incomplete and partly outdated, please send
suggestions and updates.


@{U}These programs seems to work without problems:@{0}

Program         Version         Comment
--------------------------------------------------------------

Thing           1.29            display broken AV clients(!)
CALAMUS SL      98 demo         nice :-)
CAT             4.10            also nice :-)

HDDriver        7.70            also older versions work fine
Diskus          3.61            also older versions work fine
SysInfo         4.50            also older versions work fine
BoxKite         2.13            also older versions work fine
CHKDSK          3.0             it's from ATARI

LHarc Shell     3.10
STZip           2.6
Esscode         6.4
latzip          1.1

MiNT-Setter     3.6             nice FreeMiNT 1.15 tool
FSetter         0.6             nice FreeMiNT 1.15 tool

BreakOut        1.11            it's from ATARI

- and N.AES
- and all ported unix tools in my environment
- and all my supported software for FreeMiNT
  (fnramfs, MinixFS & tools, ext2fs & tools, mkfatfs)
- and the MiNT system software I use
  (MiNT-Net, NE2000.xif, GlueSTiK, xconout2.xdd,
   SPIN!, ...)


@{U}Programs those can be tuned to run under FreeMiNT:@{0}

Program         Version         Flag            Reason/comment
-----------------------------------------------------------------------

ST-Guide        15              readable        (AV protocol)
Finder          1.10            readable        (AV protocol)
RSC-View        1.00            readable        (AV protocol)
Slay            0.1             readable        (AV protocol)
1st Guide       16.01.1997      readable        (AV protocol)
clock.acc       1.9e            readable        (AV protocol)
Dump!           1.x             supervisor      by DHS (Falcon030 only)
FlaySID         3.01            supervisor      (Falcon030 only)
MSA             1.0�            supervisor      by Marwijn Hessel
SND Play        1.0             global          by AssemSoft & DHS
XBoot           3               supervisor

MPEG Audio                      supervisor      (Falcon030 only)

Notice that this refers to the Bitmaster's MPEG Audio layer 2 decoder,
not to the NoCrew MPEG Audio player, which runs fine with 'Private'
flag set.

@{B}WARNING@{0}
Programs which require the 'Supervisor' flag usually grab interrupt
vectors. When such a program suddenly dies due to some failure
(e.g. bus error), these vectors may be left pointing to invalid
memory. Any next occurrance of the interrupt will crash the system
then.

- Papyrus       7.0x demo       global
- CAB           2.7 demo        global
- Amail         1.05            global

  Amail 1.05, CAB 2.7 and Papyrus 7.0x should have 'global' protection
  status set, if the OLGA protocol extension 'Inplace Drawing' is used
  (otherwise they run fine with 'Private' status).

- Data Manager  1.0                             ST version
- 1st Word Plus 3.20                            TT version

  Data Manager ST is a very old database program, ported in 1986 from
  PC GEM. To get it to work correctly you must limit the amount of memory
  available for this program to some size, for example 512k.
  Otherwise it will hog all the memory, so that there's not enough free
  RAM to actually display a fileselector.

  1st Word Plus is a (quite popular some years ago) wordprocessor
  developed in early 1990s. The solution is the same as above.

- Calamus       1.09N and SL 96

  Calamus 1.09N is basically unable to find its RSC file. To get this
  version to work you must copy the calamus.rsc file to the same directory
  where the main binary file calamus.prg is.

  Calamus SL 96 tries to use the FreeMiNT extended filesystem functions.
  However, due to a bug in the linked library, this is done incorrectly,
  so that after the correct system response to the Calamus request, the
  program gets horribly confused. Fortunately, this error only affects the
  Calamus' internal fileselector.
  The solution is to disable the built-in fileselector using the
  system.cxm module (or upgrade).

- Connect
- Devpac        3.10
- Diamond Edge  2.04
- FastCopy Pro  1.2
- Premium Mah Jongg (the game)


@{U}Programs those are replaced by FreeMiNT kernel or dedicated software:@{0}

There's no need to use them anymore:

- Accessory v.1.31 by Murray Levine
- BigDOS by Rainer Seitel
- FPATCH2 by Atari Corp.


@{U}Badly programmed software discouraged to use under FreeMiNT:@{0}

- BubbleGEM by Thomas Much (any version). Use the BubbleHelp function
  which is integrated in XaAES instead.
- CKBD (the keyboard driver TSR, any version)
- DATAlight by LOGILEX (the disk compressor, any version)
- TOS debuggers
- Freedom 2.x by Kolja Koischwitz
- STiK, the ST Internet Kit. Use "GlueStiK" instead (incl. in FreeMiNT).
- Sting by Peter Rottengatter (any version)
- Wdialog by Behne&Behne (any version)

'Discouraged' means that you can even (with less or more effort) get these
programs to work properly, but they may still have a bad influence on the
stability of the system. @{B}So it's advised not to use them at all.@{0}
 
@endnode


@node "Connect"
@toc "tos_prgs"
@{U}Connect                                                           FreeMiNT@{0}

The modem terminal program Connect may want to know which system
device has a modem attached to it. For example, if the modem is
attached to the port MODEM2, to make the Connect know it, you
define the environment variable MODEMDEV, by putting the following
line to your mint.cnf file:

setenv MODEMDEV u:/dev/modem2

or alternatively, when you installed the proper serial driver,
you supply:

setenv MODEMDEV u:/dev/ttyS1
 
@endnode


@node "Devpac"
@toc "tos_prgs"
@{U}Devpac                                                            FreeMiNT@{0}

The Devpac 3.10 debugger (MonST) does not work at all. Since it
can be automatically loaded from within the editor, it is advisable
to change its filename or even completely delete monst.prg from the
Devpac's bin folder, so that the editor couldn't find it.

The Devpac 3.10 editor @{B}may@{0} work, but running it is
endangered by system crash (it may fool the AES to use its special
privileges to destroy the system). Hence it is advisable to use
another editor instead, for example QED 4.52, provided you enable
editing with CR/LF line endings ('Atari' mode). If you insist on
using the Devpac native editor, you must make sure the folder
containing the gen.ttp compiler is indicated by the PATH=
environment variable.

The Devpac 3.10 compiler (GenST) works fine under FreeMiNT and it
is still a great piece of software (because the other option, the
gas GNU Assembler is rather not for human use). Hence it is
advisable to use the GenST as a command line program from a text
shell. The gen compiler can be easily controlled using make scripts
(makefiles), as in the following example:

#
# 15/10/1999 Draco (draco@@atari.org)
#

AS= gen
AFLAGS=-I/d/asm/devpac3/incdir -I/d/asm/devpac3/lib
NAME= myprog
TARGET= $(NAME).prg

all: clean $(TARGET)

$(TARGET): $(NAME).s
        $(AS) $(AFLAGS) $(NAME).s -O$(TARGET)

clean:
        rm -f $(TARGET)

# end of file

To get this to work you have to copy or link the gen.ttp to your
main bin folder (and obviously you must have the make program
properly installed :-)). Refer to the Devpac documentation on how
to set assembly options directly in the source file.
 
@endnode


@node "Diamond Edge"
@toc "tos_prgs"
@{U}Diamond Edge                                                      FreeMiNT@{0}

The Diamond Edge generally works fine, except that it tends to
report errors when used on a VFAT disk (it does not recognize VFAT
entries, symbolic links etc). For this reason, the Diamond Edge
should @{B}not@{0} be used for checking, defragmentation or fixing
enhanced FAT filesystems.

The DADE program (Diamond Advanced Disk Editor) will also run when
its protection mode is set to 'Super'.
 
@endnode


@node "FastCopy Pro"
@toc "tos_prgs"
@{U}FastCopy Pro                                                      FreeMiNT@{0}

This program works fine provided you don't invoke a nonmodal
fileselector from within it (e.g. N.Fileselector, if installed),
because such an action confuses it horribly.
 
@endnode


@node "Premium Mah Jongg"
@toc "tos_prgs"
@{U}Premium Mah Jongg                                                 FreeMiNT@{0}

Similarly to the problem occurring with the Calamus 1.09N, the game
is unable to find the RSC file. Also, similarly, you must copy the
proper RSC file to the same folder, where the main executable is
located (either mahjongg.prg or mhj_eng.prg). It is also advisable
to unpack the binary - as it has been packed with PFX (save a copy
of the original before doing that!).
 
@endnode


@node "TOS debuggers"
@toc "tos_prgs"
@{U}TOS debuggers                                                     FreeMiNT@{0}

Debuggers are perhaps the only class of TOS application software,
that do not work in gremio. Because of the memory protection and
concept of running programs in separate address spaces, no debugger
developed for TOS (including Atari Debugger) is likely to work
correctly. No patches usually help - there are more efforts, than
effects - because the way TOS debuggers work violates some FreeMiNT
principals, and violates them completely.

There are at the moment two replacement debuggers developed
especially for FreeMiNT. The one is called DuDebug written by Craig
Graham of Data Uncertain Software. Use it, if you have no option,
because it is rather limited and rather far from being finished.
Fortunately it is available in Lattice C and assembler sources, so
perhaps some day someone will make it work better.

The other option is called Paral. It is a Pure Debugger lookalike
one with fully graphical GEM interface. However, unlike the Pure
Debugger, the Paral has *real* GEM interface and is also compatible
with 68040 and 68060 processors.
 
@endnode


@node "gem_tools" "Tools in folder GEM"
@toc "Contents"
@{U}Tools in folder GEM                                               FreeMiNT@{0}

@{B}Cops@{0}:
- Control panel server version 1.09


@{B}Fsetter@{0}:
- Filesystem setter version 0.8

  � 1998 by Christian Felsch
  � 1999-2000 by Frank Naumann


@{B}Gemkfatfs@{0}:


@{B}GlueSTiK@{0}:
- GlueSTiK� STiK emulator for MiNTnet version 0.30

  � 1996-98 Scott Bigham.
  � 2000-2010 Frank Naumann.

  Redirect Daemon for net clients which are using STiK/STinG routines.


@{B}HypView@{0}:
- Helpviewer for MiNT and TOS (for .hyp helptexts) version 0.40.0


@{B}mgw@{0}:
- Draconis to MiNTNet gateway version 0.33b4

  � 2000-2010 Jens Heitmann
  � 2000-2010 Frank Naumann

  Redirect daemon for net clients which are using the Draconis routines.


@{B}nohog2@{0}:
- The nohog accessory program is considered a thing that fixes some
  problems with GEM while using it (the GEM) with MiNT. Thus some people
  put nohog.acc  into their accessory folder in order to use it
  as advertised.

                        @{B}THIS IS WRONG!@{0}

  The nohog.acc is a very old program, that had been developed before the
  first version of multitasking GEM has appeared. Thus, the "GEM" the
  nohog documentation is talking about, is the TOS' GEM in ROM, which
  generally hasn't been written with multitasking in mind.
  Since there are several versions of multitasking GEM available, thus
  nobody (being normal) uses the old single-GEM under MiNT, and that makes
  the nohog.acc useless.

  Moreover, if nohog.acc is used in conjunction with a multitasking GEM,
  it may make the entire system extremely unstable. So if you happen to
  load nohog.acc under Atari AES 4.x (the MultiTOS' GEM distributed along
  with MultiTOS 1.04 and 1.08 respectively), under N.AES or under oAESis,
  please stop doing it immediately and delete the nohog.acc file from your
  disk. This will greatly improve the system's stability.


@{B}QED@{0}:
 - The most popular texteditor for Atari systems. Version 5.05.


@{B}TeraDesk@{0}:
 - Light-weight, TOS-like desktop with many additional features.
   By Djodje Vukovich, Version 4.08


@{B}TosWin2@{0}:
- Console window and "frontend" for FreeMiNT commandline shell version 2.7
 
@endnode


@node "BIN" "Binaries"
@toc "Contents"
@{U}Binaries in folder BIN                                            FreeMiNT@{0}

These MiNT executables can be run from the commandline shell.
Note that a commandline shell is only included in the pre-configured
builds, not in the "per-cpu builds"!

- actrl.ttp: Setting audio device configuration
- arp:
- bash: Commandline shell (The "Bourne again shell")
- cat: Concatenate and write files
- cp: Copy files/folders
- crypto:
- diald:
- env: Modify environment variables
- fatlabel:
- fdisk:
- fsck.fat: Filesystem check for FAT
- fsck.minix: Filesystem check for minix
- ifconfig: Configure network interfaces
- iflink:
- ifstats: Displays informations about a network interface
- ln: Create links
- lpflush:
- ls: List command
- masqconf:
- md5sum: Print or check message-digests
- mflist: List minix files
- mfsconf: Configure minix filesystem (filename translation)
- minit: Create a minix filesystem
- mkdir: Create a directory (folder)
- mkfatfs: Create TOS and DOS FAT/FAT32 filesystems
- mktbl:
- mount_nfs: Mount a remote NFS filesystem
- mv: Move/rename files/folders
- netstat: Displays network statistics
- pppconf:
- rm: Delete files/folders
- route: Configure network routes
- sfdisk: Disk partitioning
- slattach:
- slinkctl: Control the SCSILINK interface driver
- strace:
- swkbdtbl:
- sysctl:
 
@endnode


@node "Drivers" "Drivers"
@toc "Contents"
@{U}Drivers                                                           FreeMiNT@{0}

FreeMiNT loads three types of extended drivers; named *.xdd, *.xfs
and *.xif.

Common ones (which are equal for all systems) are located in <sysdir>,
special versions for the different machines in the respective subfolders
(e.g. "ST" or "CT60").
The correct drivers are loaded automatically according to the used system.

- *.xdd: @{"Xtended Device Drivers" link "XDD"}
- *.xfs: @{"Xtended Filesystem Drivers" link "XFS"}
- *.xif: @{"Xtended Interface Drivers" link "XIF"}

Special versions for the different systems:

- ST
- @{"MegaST" link MST}
- STE
- @{"MegaSTE" link MSTE}
- TT
- Falcon030
- CT60
- FireBee
- Milan
- Hades
- Aranym

Some of them are deactivated (named to .xdx, .xfx or .xix) because they
are rarely used or needed only for an explicite hardware.
If needed, please rename the respective driver and reboot.
On the other way, you can deactivate or delete the drivers that you
don't need.

More information (but partly outdated) can be found on the
@{"SpareMiNT website" system "http://sparemint.org"}.
 
@endnode


@node "XDD" "Extended device drivers"
@toc "Drivers"
@{U}Extended device drivers                                           FreeMiNT@{0}

@{U}audiodev.xdd: Audio device driver version 0.9@{0}

Based on the work of Charles Briscoe-Smith and Kay Roemer 1995.

� 1997, 1998 John Blakeley
� 2001 Frank Naumann

This is a audio device driver for most Ataris running MiNT.
This audiodev is based on audiodev 0.1 by C. Briscoe-Smith which in turn
is based on lpdev 0.6 by Theirry Bousch.

It supports:

 * Yamaha PSG
   - arbitrary speed
   - 8 bit signed/unsigned/u-law encoded samples

 * Ste DMA hardware
   - 6/12/25/50 kHz
   - mono/stereo
   - 8 bit signed/unsigned/u-law encoded samples
   - volume/balance/bass/treble setting

 * Falcon hardware
   - 8195, 9834, 12292, 16390, 19668, 24585, 32780 and 49170Hz.
     It also supports s16 and u16 sample formats

It is programmed to provide support for an external DAC and should play
8 track samples. This is untested as I don't have the hardware.

The Falcon hardware does @{B}not@{0} support the STe/TT compatible sample rate
of 6258Hz - it mutes. This is a feature, not a bug!!
See actrl for configuration.


@{U}flop_raw.xdd: Raw floppy device driver version 0.20@{0}

� 1992, 1993 by Dave Gymer, Stephane Boisson.
� 2000-2010 by Frank Naumann.


@{U}inet4.xdd: MiNT-Net TCP/IP driver version 1.6 PL 1@{0}

Based on the work of Kay Roemer 1993-1996.

� 1997-1999 by Torsten Lang.
� 2000-2010 by Frank Naumann.
IP  masquerading by Mario Becroft, 1999.
FTP masquerading support by Torsten Lang, 1999.

Network driver, loads the different .xifs for network devices.


@{U}lp.xdd: Spooled Centronics device driver version 0.9@{0}

by T. Bousch

Printer driver for paralell port.


@{U}xconout.xdd: xconout2 output catcher version 0.3@{0}

� Jan  1 1995 by TeSche <itschere@techfak.uni-bielefeld.de>
� 2000-2010 by Frank Naumann
 
@endnode


@node "XFS" "Extended filesystem drivers"
@toc "Drivers"
@{U}Extended filesystem drivers                                       FreeMiNT@{0}

Drivers for FAT/VFAT/F32 filesystems are included in FreeMiNT kernel.


@{U}ext2.xfs: Ext2 filesystem driver version 0.63@{0}

� 1998, 1999 by Axel Kaiser.
� 2000-2010 by Frank Naumann.
� 2013 by Alan Hourihane.

This is a full working Ext2 filesystem driver for FreeMiNT.

It can read and write the actual ext2 version as implemented in Linux, for
example. The partition size is not limited and the logical sector size can
be 1024, 2048 or 4096 bytes. The only restriction is that the physical
sector size is smaller or equal to the logical sector size. The blocksize
can be configured if you initialize the partition with "mke2fs" command.

The next good thing is that it's a lot faster as the MinixFS. The Ext2 has
a very good structure that is designed for maximal speed and avoids also
fragmentation automatically.

Requirements: Ext2.xfs requires a XHDI compatible harddisk driver.

Tips & Tricks:

Make sure that your ext2-partition is recognised by the harddisk driver.
You can achieve this by either changing its partition ID to e.g. RAW or by
telling your driver to serve the current partition name (e.g. LNX).

The default size of the new buffer cache in FreeMiNT is small. To get a
better performance of the Ext2.xfs, increase the buffer cache (i suggest
at least a size of 500kb as minimum).

Also use the latest "e2fs" progs.


@{U}@{"minix.xfx" link minixfs} (deactivated): Minix filesystem driver version 0.75@{0}

� 1991,1992,1993,1994,1995 S.N.Henson
� Oct  6 2018 by Frank Naumann.

This is a modified binary version for FreeMiNT > 1.15.
@{B}Made obsolete by ext2 filesystem.@{0}
If you want to use this filesystem anyway, the procedure is as follows:

- Activate the driver by renaming to "minix.xfs"
- Use a partitioning tool to set the type of the desired partition to
  "MNX" or "RAW".
- Create the filesystem with command "minit"
- Reboot.


@{U}nfs.xfs: Network filesystem driver version 0.57@{0}

� 1993, 1994 by Ulrich K�hn.
� 2000-2010 by Frank Naumann.

The network filesystem driver for shared drives/directories on remote
computers or NASes (to be mounted into FreeMiNT with "mount_nfs").
 
@endnode


@node "XIF" "Extended interface drivers"
@toc "Drivers"
@{U}Extended interface drivers                                        FreeMiNT@{0}

@{U}asix.xix (deactivated):@{0}

Ethernet driver for USB to Ethernet adaptors with ASIX chipsets,
version 1.0 (???)
  
2014 by Alan Hourihane

Supports ASIX 88772 and 88172 chipsets. Tested with UNICORN ACSI to USB
card and DLINK DUB-E100 Rev B1/C1 USB to Ethernet adaptors.
The needed drivers eth.udd, storage.udd and unicorn.ucd are located in
folder /sysdir/usb/ and are loaded automatically when USB kernel module
is started.

The ethernet device name is "asx0".


@{U}plip.xif: Paralell IP driver version 0.7@{0}

Based on the work of Kay Roemer.
##
##
##@{U}slip.xif: Serial IP driver version ???@{0}
##
##Based on the work of Kay Roemer
 
@endnode

@node "inet4" "inet4.xdd"
@toc "Drivers"
@{U}inet4.xdd                                                         FreeMiNT@{0}

IP masquerading:

The following files changed from the standard net-1.03 distribution:

tool/Makefile
net/inet/Makefile
net/inet/ip.c
net/inet/ip.h
net/inet/tcp.c
net/inet/inet.c


The following files were added to the standard net-1.03 distribution:

include/masquerade.h
include/masqextern.h
tool/masqconf.c
net/inet/masqdev.c
net/inet/masquerade.c
README.masquerade


@{B}INTRODUCTION@{0}

I implemented IP masquerading for MiNTnet, as well as a quick fix for the
"land" bug which would freeze mintnet.

I am sure that my implementation is not optimal and contains many bugs,
because this is the first low-level network programming I have ever done
and I am not very familiar with it. When even experienced programmers get
bugs in their code, you can only begin to imagine the kind of errors I am
likely to make.

Nevertheless it does seem to work, so I must have done something right.

IP masquerading is still disabled by default, but can be enabled using the
masqconf program, as explained below.


@{B}USING MASQCONF / QUICK START GUIDE@{0}

To configure the IP masquerading you use the masqconf program from the
bin directory.

To show the current configuration and any masquerade database entries,
invoke masqconf with no arguments.

To get help, invoke masqconf with help or any unknown command as
an argument.

Normally you don't need to worry about all the available settings, the
only important ones are address, netmask and flags. The rest can be left
at the default values.

address should be set to the address of the network to be masqueraded for,
and netmask should be the netmask of that network.

For example if you have a local network 10.0.0.0 you might configure IP
masquerading for all machines on the network with the following command:

masqconf address 10.0.0.0 netmask 255.0.0.0

Once you have correctly set the parameters you must set the ENABLED flag
to make IP masquerading operate, like so:

masqconf set ENABLED

That is all there is to it. Now you can access the internet from any of
the machines on your network, even though you only have one actual
IP address!


@{B}PORT REDIRECTION@{0}

Apart from allowing a masqueraded machine to initiate connections to
another computer the IP masquerading supports permanent redirection of
certain ports on the masquerading gateway to go to a masqueraded machine.
You configure this with the masqconf redirect command. The parameters are
gateway port, destination address an destination port.

For example to redirect incoming HTTP requests on the gateway machine to
port 456 of masqueraded machine 10.0.0.5, use the following command:

masqconf redirect 80 10.0.0.5 456

To stop redirecting a port, use the masqconf unredirect command. For
example to reverse the above redirection, issue the following command:

masqconf unredirect 80


@{B}FAQ@{0}

Q. Why does (xyz feature) not work properly?

A. Like I said this is my first project with any kind of low-level network
programming, and I probably made quite a lot of mistakes. Certainly notify
me if you find a bug, but it's even better if you try to fix it yourself,
then mail me and explain how you fixed it. But also see the next question.

Q. Why do some protocols like FTP and DCC not work via IP masquerading?

A. Some programs send low-level protocol information in a high-level
protocol, including IP addresses and port numbers. IP masquerading doesn't
know about that, and doesn't masquerade those addresses properly.
Eventually I plan to add support for this, but it is very complicated. In
the mean time, you can sometimes avoid the problem by adjusting the
settings in the problematic program, for example if you set your FTP
client to passive mode it will work ok.

Q. Why doesn't this documentation explain a whole lot of things like the
timeouts, masquerade database, port redirection, flags, etc., etc.?

A. I want to make IP masquerading available, but I did not have time to
write lots of documentation. Read the source code! Or if you send me an
email I will be happy to help.
I hope to write some better documentation later.


@{B}BUGS@{0}

Lots!

Seriously, it can't be so bad as I've used the IP masquerading quite a lot
and it doesn't fail. But I have noticed some inconsistencies.

Sometimes a condition occurs where a TCP connection that is not yet opened
(or not yet properly closed) tosses lots of packets backwards and forwards
in an endless loop. I don't know why this happens, but I am looking into
it. If you see this bug, try to track it down and fix it. As a temporary
fix, just disable IP masquerading (masqconf unset ENABLED) then enable it
again (masqconf set ENABLED) to break the loop.

I think there is some sort of bug handling incoming ICMP error messages
for a masqueraded host. Particularly, error messages about UDP datagrams
seem to get through to the host that sent the datagram which caused the
error, but the host doesn't seem to interpret them. Is the checksum wrong,
or something?

These are strictly speaking no bugs, but unimplemented features or
BSD incompatibilities:

Transmission Control Protocol:
------------------------------

- Selecting for exceptional conditions (ie waiting for urgent data)
  does not work. This needs work on the kernel. WORKS with TeSches
  patches applied.

- No "Nagle-Algorithm" implemented.

- No delayed acks.

- The following is really a bug in BSD. Here are the BSD out-of-band
  semantics:
  Lets say you write 5 bytes of out of band data using the MSG_OOB
  flag with send().
  Then the receiver will only be able to receive the urgent data if he
  has no other unread urgent data pending. If he has no urgent data
  pending he can receive the last byte of the urgent data using recv()
  with MSG_OOB.
  The other 4 bytes are received as normal data. The "mark" (you can
  query the system if you have received all data up until the mark
  using the SIOCATMARK ioctl) is placed behind these 4 bytes.

  Here are the MintNet semantics of out of band handling:
  You can write as much urgent data as you want.
  The receiver can read *all* the urgent data using recv() with the
  MSG_OOB flag.
  The "mark" is placed *before* the urgent data byte with the lowest
  sequence number.
  If there are several chunks of urgent data waiting to be read, the
  "mark" moves from the first to the next one when you read data after
  the current position of the mark.
  You can partially emulate the BSD semantics by placing the socket
  into "out-of-band-data-inline" mode using the SO_OOBINLINE socket
  option. You can then read urgent data using MSG_OOB or the normal
  read().

User Datagram Protocol:
-----------------------

- recv/recvfrom return the amount of data copied -- not the size of
the datagram as BSD does with MSG_PEEK.

Internet Control Message Protocol:
----------------------------------

- Most message types not implemented.


@{B}IP MASQUERADING ADDITIONS BY TORSTEN LANG:@{0}

The ip masquerading support now also contains support for ftp.
Unfortunately this still is not stable but I realease it anyway and hope
that someone else will be able to find and fix the problem (and certainly
pass the fix to me ;-).

The ftp support is implemented in a way that makes it quite easy to add
support for other protocols too (like irc). Since I have no possibility
to test these other protocols I have not implemented support for these.
 
@endnode


@node "plip" "PLIP"
@toc "XIF"
@{U}PLIP                                                              FreeMiNT@{0}

- @{B}What is PLIP ?@{0}

PLIP is a non standard protocol to transfer IP packets over bidirectional
parallel (centronics) lines. It is similar to SLIP in that it uses the
same algorithm to encode/decode outgoing/incoming data.

It is probably incompatible with all other so called protocols, because
it is my invention :)

I did not use a more `standard' protocol, because the Atari centronics
port lacks ACKNOWLEDGE, PAPEROUT, SELECT, FORMFEED (and probably other)
signals, some of which are used by the other protocols.

If you want to use PLIP you will have to build a cable connector
yourself. Someone told me about a Turbo-Laplink connecter that should
be compatible with the cable described below, but I did no see one 'til
now.

PLIP's main advantage over SLIP is that parallel lines are usually much
faster than the standard (not highspeed) serial lines.
The throughput depends very much on the speed of the computers you use,
because handshaking is done in software and can be expected to be at
least 18 kB/sec for two slow 8MHz ST's connected via PLIP.

Because it is much cheaper then ethernet cards, I could also think of
building tiny networks (3-4 hosts) using PLIP. When using more than 2
machines, some of them must have two or more parallel ports (and act
as gateways).

- @{B}PLIP cable:@{0}

To build a PLIP cable, you need two male DB-25 connectors and some metres
of >= 11 conductor cable.

Note that the cable should not be longer than about 10 metres, because
the parallel port uses standard TTL signals.

The wiring is:

    @{U}Pin (one end):     Pin (other end):@{0}

    1  (STROBE)         11 (BUSY)
    2  (D0)             2  (D0)
    3  (D1)             3  (D1)
    4  (D2)             4  (D2)
    5  (D3)             5  (D3)
    6  (D4)             6  (D4)
    7  (D5)             7  (D5)
    8  (D6)             8  (D6)
    9  (D7)             9  (D7)
    11 (BUSY)           1  (STROBE)
    25 (GROUND)         25 (GROUND)

Pins 18-24 are extra grounds.

Build one yourself and have some fun.
You can buy the necessary incredients in computer stores for a few bucks.

- @{B}Nonstandard PLIP protocol:@{0}

For the ones interested in the protocol, here we go:

The data is encoded using the SLIP protocol, which defines the following
special characters:

END = 192 (decimal)
ESC = 219 (decimal)
ESC_ESC = 221 (decimal)
ESC_END = 220 (decimal)

Every character `c' of the IP packet is sent using the
following algorithm:

if c == END then send ESC followed by ESC_END
else if c == ESC then send ESC followed by ESC_ESC
else send c

After all bytes have been sent this way, a single END character is sent to
indicate the end of the packet. Optionally the sender may send an END cha-
racter at the beginning of each packet. The PLIP receiver will drop the
resulting zero length packet.

Every byte is sent over the parallel line in the following way (note that
one ends STROBE is connected with the other ends BUSY):

sender:         receiver:

DATA OUT        WAIT ACK
SEND ACK        DATA IN
WAIT ACK        SEND ACK

The shortcuts have the following meaning:
DATA OUT/IN --  write/read the byte to/from the port
SEND ACK    --  send an acknowledge (ie drop the STROBE wire for
            some micro seconds).
WAIT ACK    --  wait until an acknowledge is received (BUSY has
            dropped for some micro seconds).

Note that an interrupt is generated when the BUSY wire drops. Thus the
first byte sent will trigger the BUSY interrupt on the remote side, ie
transmission of packets is interrupt driven (no polling).

After this first interrupt the receiver disables the BUSY interrupt and
receives the whole packet polling the BUSY wire. Note that this is done
at low interrupt priority so that other interrupts can still be handled.

Waiting for acknowledgements is implemented using an adaptive timeout
mechanism.

Note that the SLIP encoding makes sure that the receiver/sender may get
in sync with the sender/receiver again after one end has timed out.

Also note that the character transmission protocoll used will let one
end time out if both ends try to send at the same time, ie collisions
can be detected.

- @{B}Establishing a PLIP connection:@{0}

This is essentially the same as establishing a SLIP connection with the
old SLIP driver (oslip.xif). Read the file README.OSLIP. The PLIP
interfaces are called pl0, pl1, ... Currently only pl0 is implemented
(corresponds to the standard Atari centronics port).
 
@endnode


@node "ST" "ST"
@toc "Drivers"
@{U}ST                                                                FreeMiNT@{0}

@{U}biodma.xix (deactivated): Driver for BIODATA DMA ADAPTOR version 1.1@{0}

� 1996, 1997, 1998 by T. Lang


@{U}de600.xix (deactivated): Driver for DE600 adaptor version ???@{0}

Based on the work of Kay Roemer.


@{U}dial.xix (deactivated): DIAL driver version 0.2 @{0}

� 1999 by Torsten Lang


@{U}mfp.xdd: MFP serial driver version 0.31@{0}

� 1998, 1999 by Rainer Mannigel
� 2000-2010 by Frank Naumann


@{U}pamsdma.xix (deactivated): Driver for PAM's DMA ADAPTOR version 1.2@{0}

� 1996, 1997, 1998 by T. Lang


@{U}rtl8012st.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann
 
@endnode


@node "MST" "MegaST"
@toc "Drivers"
@{U}MegaST                                                            FreeMiNT@{0}

@{U}@{"lance" link riebl}.xix (deactivated): Version 1.2@{0}

� 1995-1998 by T. Lang

Driver for PAM's Net VME (TT) and MegaST boards.


@{U}mfp.xdd: MFP serial driver version 0.31@{0}

� 1998, 1999 by Rainer Mannigel
� 2000-2010 by Frank Naumann


@{U}riebl*.xix (deactivated): Riebl card drivers version 1.2@{0}

� 1995-1999 by T. Lang


@{U}rtl8012st.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann
 
@endnode


@node "STE" "STE"
@toc "Drivers"
@{U}STE                                                               FreeMiNT@{0}

@{U}mfp.xdd: MFP serial driver version 0.31@{0}

� 1998, 1999 by Rainer Mannigel
� 2000-2010 by Frank Naumann


@{U}rtl8012st.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann
 
@endnode


@node "MSTE" "MegaSTE"
@toc "Drivers"
@{U}MegaSTE                                                           FreeMiNT@{0}

@{U}mfp.xdd: MFP serial driver version 0.31@{0}

� 1998, 1999 by Rainer Mannigel
� 2000-2010 by Frank Naumann


@{U}@{"rieblste" link riebl}.xix (deactivated): Riebl card drivers version 1.2@{0}

� 1995-1999 by T. Lang


@{U}rtl8012st.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann


@{U}scc.xdd: SCC serial driver version 0.27@{0}

� 1998, 1999 by Rainer Mannigel.
� 2000-2010 by Frank Naumann.
 
@endnode


@node "TT" "TT"
@toc "Drivers"
@{U}TT                                                                FreeMiNT@{0}

@{U}@{"lance" link riebl}.xix (deactivated): Version 1.2@{0}

� 1995-1998 by T. Lang

Driver for PAM's Net VME (TT) and MegaST boards.


@{U}mfp.xdd: MFP serial driver version 0.31@{0}

� 1998, 1999 by Rainer Mannigel
� 2000-2010 by Frank Naumann


@{U}@{"riebltt" link riebl}.xix (deactivated): Riebl card drivers version 1.2@{0}

� 1995-1999 by T. Lang


@{U}rtl8012.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann


@{U}scc.xdd: SCC serial driver version 0.27@{0}

� 1998, 1999 by Rainer Mannigel.
� 2000-2010 by Frank Naumann.


@{U}scsilink.xix (deactivated): Driver for Daynaport SCSI/Link version 0.50@{0}

by Roger Burrows
 
@endnode


@node "Falcon030" "Falcon030"
@toc "Drivers"
@{U}Falcon030                                                         FreeMiNT@{0}

@{U}dsp56k.xdd: Motorola DSP 56001 device version Nov 25 2018@{0}

� 1996-99 F. Noring, L. Brinkhoff, T. Berndtsson

Device driver for Falcon DSP.


@{U}scc.xdd: SCC serial driver version 0.27@{0}

� 1998, 1999 by Rainer Mannigel.
� 2000-2010 by Frank Naumann.


@{U}rtl8012.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann


@{U}scsilink.xix (deactivated): Driver for Daynaport SCSI/Link version 0.50@{0}

by Roger Burrows
 
@endnode


@node "CT60" "CT60"
@toc "Drivers"
@{U}CT60                                                              FreeMiNT@{0}

@{U}dsp56k.xdd: Motorola DSP 56001 device version Nov 25 2018@{0}

� 1996-99 F. Noring, L. Brinkhoff, T. Berndtsson

Device driver for Falcon DSP.


@{U}scc.xdd: SCC serial driver version 0.27@{0}

� 1998, 1999 by Rainer Mannigel.
� 2000-2010 by Frank Naumann.


@{U}ethernat.xix (deactivated): Driver for EtherNAT board version ???@{0}

by nature


@{U}rtl8012ct60.xix (deactivated): RTL8012 ethernet romport driver version 1.10@{0}

� 2000 by Vassilis Papathanassiou.
� 2000-2010 by Frank Naumann


@{U}rtl8139.xix (deactivated): RTL8139 ethernet (CT)PCI driver version 1.0@{0}

Ported to FreeMiNT by mikro, originally done by Didier M.
COPYING.BSD3

@{U}scsilink.xix (deactivated): Driver for Daynaport SCSI/Link version 0.50@{0}

by Roger Burrows


@{U}svethlan.xix (deactivated): Driver for SVEthLANa board version 0.9@{0}

by nature

This driver needs at least SuperVidel firmware version 10!
 
@endnode


@node "FireBee" "FireBee"
@toc "Drivers"
@{U}FireBee                                                           FreeMiNT@{0}

@{U}fec.xif: Driver for FireBee onboard ethernet interface version 0.57@{0}

2011 by m0n0

Based on Freescale DMA API.


Configuration:

Use "netconf.prg" in folder /mint/setup/ to configure the
interface @{B}"eth0".@{0}

You can influence driver mode by renaming the .xif file.
Recognized filenames are:

"FEC.XIF"       => Auto-Negotiate, no promiscuous mode
"FECP.XIF"      => Auto-Negotiate, promiscuous mode
"FECP10.XIF"    => 10Mbit half duplex, promiscuous mode
"FEC10.XIF"     => 10Mbit half duplex, no promiscuous mode


How it works:

The core of this driver is the so called DMA cookie.
This cookie provides us with pointers to the so called Multichannel DMA-
API. That API is provided by Freescale and built into FireTOS. Most FEC
drivers (and also many others) are built on top of the MCDMA API. For more
info read the "Multichannel DMA API User's Guide" and MCF5475 Reference
Manual provided by Freescale.

Currently nearly the same Network Buffer Scheme as FireTOS uses is used
for packet buffering. It makes use of the dma_malloc / dma_free functions
provided with FireTOS DMA cookie. These functions work on memory areas
which aren't affected by CPU cache. We could also use cache-visible
memory, but then we would have to flush the cache (regions) before we
send/receive data.
Another option is to use a static RAM area, but there isn't much space,
which forces to use less buffer descriptors (around 3 for rx, 3 for tx)
and that slows down transfer speeds alot. So the usage of SRAM is a bit
problematic (altough SRAM access time is faster).

The DMA Cookie also provides us with the Freescale Multichannel DMA API +
dma utility functions. With these functions we can start an so called
"DMA task". There are specific DMA tasks for Receiving / Transmitting FEC
data. It's built within the DMA API. So everything we have to do: Start
the dma task, and most of the work is done. The FEC is controlled by the
DMA Task and the driver just needs to handle incoming packets and submit
outgoing packets to the task.

While writing this, there is no official release of FireTOS which contains
the DMA Cookie. So you either have to look for an non-official version, or
wait until Didier Mequignon releases the next FireTOS version.
 
@endnode


@node "Milan" "Milan"
@toc "Drivers"
@{U}Milan                                                             FreeMiNT@{0}

@{U}@{"mfp_mil" link "mfp"}.xdd: MFP serial driver version 0.31@{0}

� 1998, 1999 by Rainer Mannigel
� 2000-2010 by Frank Naumann


@{U}uart.xdd: Milan 16550 UART driver version@{0}

� 1998, 1999 Rainer Mannigel, Michael Schwingen
� 1999, 2000 Frank Naumann
 
@endnode


@node "Hades" "Hades"
@toc "Drivers"
@{U}Hades                                                             FreeMiNT@{0}

@{U}scc.xdd: SCC serial driver version 0.27@{0}

� 1998, 1999 by Rainer Mannigel.
� 2000-2010 by Frank Naumann.
 
@endnode


@node "Aranym" "Aranym"
@toc "Drivers"
@{U}Aranym                                                            FreeMiNT@{0}
@autorefoff

@{U}aranym.xfs: ARAnyM u:\host filesystem driver version 0.1@{0}

� Dec 13 2018 by Standa Opichal

This .XFS implements the u:/host mountpoint which provides the m68k <->
host OS communication interface. This, in ARAnyM, is implemented using
NatFeat interface and therefore more emulators could provide the same
functionality if requested/implemented.

At this moment all it does is that it creates the u:\host\clipbrd folder
which serves as a GEM clipbrd location. Using this one can perform cut/
copy/paste operations which directly use the host OS clipboard
(using "CLIPBRD" NatFeat).


@{U}hostfs.xfx (deactivated): HostFS Filesystem driver version 0.04@{0}

� Dec 13 2018 by ARAnyM Team

This driver uses the "HOSTFS" Native Feature to access an emulator host OS
filesystem. It requests the drive map from the emulator and maps the
drives automatically to U:\[a-z] entries.

The complete .xfs interface is implemented by the emulator, this driver
only forwards any call to the native part of it.


@{U}nfeth.xif: Native Features Ethernet driver v0.7@{0}

(formerly aranym.xif)
The MiNT-Net xif driver for Native Features "ETHERNET" interface.


@{B}Network installation and usage:@{0}

@{U}On host side (linux):@{0}

Make sure the 'aratapif' (ARAnyM TAP IFconfig) binary is installed
somewhere in your $PATH (/usr/bin or /usr/local/bin) and that it is
installed setuid root.
If it's not use the following commands (run them as root):

linux:~# chown root /usr/bin/aratapif
linux:~# chmod u+s /usr/bin/aratapif

Another important thing is to load the tuntap device driver (if it isn't
compiled in the host kernel). I load it with the following command:

linux:~# modprobe tun

And before loading this driver please check (and possibly fix) the 
read/write permissions of the "/dev/net/tun" device:

linux:~# chmod a+rw /net/dev/tun

Otherwise ARAnyM started by regular user could not access this device.

More information about TUN/TAP you'll find at
http://vtun.sourceforge.net/tun/

@{U}On Atari side:@{0}

Configure the eth0 interface, best by calling the 'eth0-config.sh' script.
If you wanted to configure the IP addresses or netmask, you could do that
in the ARAnyM config file.

Then in MiNT-Net you can e.g. ping to 192.168.0.1 (which is the default IP
of the TAP tunnel's host side).

@{B}How it works:@{0}

The ARAnyM establishes the TAP interface (using tuntap driver).
tuntap linux driver: /usr/src/linux/Documentation/networking/tuntap.txt
Some related info can be found at the following URLs:
	VTUN (virtual tunnel)
		http://vtun.sourceforge.net/tun
	Hercules (s390 emulator)
		http://www.conmicro.cx/hercules/


@{U}nfexec.xdd: NF host exec driver version 0.1@{0}

� 1999, 2000, 2001 Frank Naumann
� Dec 13 2018 by Miro Kropacek

This is just an xdd skeleton for those who like to program an xdd.
Simply rename this folder to the name of your xdd and fix up the names.

It compile and link to a complete ready to use xdd. Just add your code.

The sekeleton contain example code for tty devices and for raw character
devices. Remove the things you don't need!


@{U}nfstderr.xdd: NF_STDERR native feature output device version 0.1@{0}

� Jan  25 2005 by STanda Opichal

It should serve as an example of how to use native features in FreeMiNT
device drivers and other modules. It requires the kernel to be build
with -DARANYM (common aranym aware FreeMiNT kernel builds) to actually
work.

This implements a device /dev/nfstderr to MiNT through which you can send
information to the ARAnyM stderr output (the aranym console window).
This is often useful for debugging purposes.

$ cat mytext.txt >/dev/nfstderr

It uses the NF_STDERR native feature which is a part of the basic set
of features (required by the NF design to be implemented by any NF-
supporting emulator/machine).
@autorefon
 
@endnode


@node "biodma" "BioData DMA"
@toc "Drivers"
@{U}BioData DMA adaptor                                               FreeMiNT@{0}

BIODMA.XIF (C) 1995-1999 by T. Lang
@autorefoff

Please note: Since the BIOODMA adaptors are not designed for asynchronous
receiving and additionally do NOT conform to the ACSI standard they work
rather bad & slow. Especially on accelerated machines (TT, PAK/3 etc.)
the driver is not reliable. So I have decided to stop support for it.
This is the last release of the driver. It may work for you or not. If it
doesn't, please note that support is stopped and that I will not give
any support for this driver...

The driver for the BIONET DMA adaptor is in a very early state but seems
to work quite stable. I had some problems on my 48MHz PAK/3/4ST/16TT
machine but since I had connected some other equipment these problems may
not be caused by the driver itself...

The driver is based on dummyeth from Kay Roemer, the DMA code is 
(C) T. Lang and is losely based on some assembler source code (C) by
Hans-Peter Jansen, LISA GmbH, Berlin.

@{U}Important things to know:@{0}

- Starting and stopping the DMA adaptor with ifconfig up or down doesn't
  really work since there are no possibilities to start or stop the
  BIODATA adaptor...
- It is important that a harddisk driver checks the FLOCK flag itself
  before beginning its work. At least some drivers like HUSHI don't and
  are NOT recommended for use together with these drivers!!!
- Be careful with background DMA drivers like the floppy driver or some
  special harddisk drivers. The protective protocol has been changed for
  their use:
  - when sending:
    Check for FLOCK, if set -> queue packet
  - interrupt routine:
    Check FLOCK, if set -> quit, else check for queued send packets, de-
    queue and send them, then check for received packets, if any get them
    and pass them to the upper layers.
  So before testing any background DMA stuff you should make a backup of
  your harddisk!
- Floppy access causes massive delays in sending and receiving!
- 1. Kay told me that MiNT doesn't do any task switches when FLOCK is set.
  2. I read in the MiNT documentation that MiNT doesn't do any task
     switches when the processor is in supervisor state.
  3. Usual harddisk drivers do DMAs in supervisor mode.
  The LANCEDMA driver relies on these facts. I would have written a
  completely interrupt driven DMA code (like I've done for my harddisc-
  recording system for ALL STs working on the ACSI port) but that's a lot
  of work due to some problems with dirty harddisk drivers like HUSHI
  ignoring a set FLOCK flag.

@{U}Planned features:@{0}

- It should be possible that one BIODMA.XIF manages more than one DMA
  adaptor. At the moment you can use only one.

@{U}Still missing:@{0}

- Error management is missing due to missing documentation.
- No cache management yet...
  ...since there are no public cache management routines in the MiNT
  kernel. If someone exports the internal management routines of MiNT
  I will use them in the next release ;-)

@{B}ATTENTION:@{0}

As a replacement for cache management I've used another trick in this
release of the driver:
The DMA buffer is accessed only at a mirrored address. The address is
ORed with $FF000000 so that the buffer is accessed in an uncached area.
The only drawback with this trick is that it works DEFINITELY NOT on
machines with real 32bit adressing without patching the MMU tables. This
means that it works not on the Atari TT and perhaps also will cause
trouble on the Eagle or the Medusa since AFAIK they don't mirror the ST-
RAM. If you want to use this driver on one of these machines please use an
older version of the driver. Well, the driver SHOULD work on tuned STs
like the MEGA ST + PAK68/3 + FRAK.

DON'T TRY THESE DRIVERS UNLESS YOU ARE ABSOLUTELY SURE WHAT YOU ARE DOING.
I'm not responsible for any crashed harddisk or so.
@autorefon
 
@endnode


@node "de600" "DE600"
@toc "Drivers"
@{U}DE600                                                             FreeMiNT@{0}

DE600.xif  Based on the work of Kay Roemer.
@autorefoff

@{U}Hardware:@{0}

You need the TUW hardware (HPGL layout and hardware description available
from fortec.tuwien.ac.at by anonymous ftp) to connect the DE600 to the
cartridge port.

The driver is interrupt driven and does *not* poll for input packets
during the VBL interrupt (like the original tuw-tcp driver), so you @{B}MUST@{0}
connect the interrupt wire to pin 11 (BUSY) of your centronics port.
Otherwise it will not work!


@{U}Usage:@{0}

Setting up the driver is rather simple: MintNet must be installed and
rename de600.xix to de600.xif and reboot.
Then issue the following two commands:

@{B}ifconfig en0 addr 141.2.1.99
route add 141.2.1.0 en0@{0}

Of course 141.2.1.99 must be replaced with your local IP address,
141.2.1.0 with the network address of your local IP address (ie host
portion set to zero) and en0 with the interface name the DE600 driver
shows in its startup message at boot time.


@{U}Performance:@{0}

First some speed rates on a 16MHz ST (on an otherwise idle network):

ftp send:  ~88 k/sec (ncftp 1.7.5 -> wu-ftpd 2.0)
ftp recv:  ~85 k/sec (ncftp 1.7.5 <- wu-ftpd 2.0)
tcp send:  ~90 k/sec (tcpcl -> tcpsv)
tcp recv:  ~90 k/sec (tcpsv <- tcpcl)
nfs read:  ~50 k/sec (nfs 0.51: rsize=1200, wsize=2048)
nfs write: ~45 k/sec (nfs 0.51: rsize=1200, wsize=2048)

Receiving data on a DE600 is very critical because it has only two receive
buffers and reading a packet from the adapter is slower than packets
arrive from the net.

So to achieve any receive performace the number of packets that are sent
to the de600 in fast succession must be limited in some way. For TCP this
is easy, the adapter tells the TCP to limit its receive window to 1500
bytes. But the trouble starts if you have multiple TCP connections over
the de600 in which case limiting the receive window doesn't work...

Problems occur for applications using UDP (like NFS). They often receive
packets larger than the interface MTU (1500 bytes), so they get fragmented
by IP into many packets and flood de600's receive buffers. When you mount
a filesystem you must therefor tell NFS to limit the receive packet size
to MTU - 300 bytes (the 300 bytes are used for NFS protcol headers...),
ie you would say:

@{B}mount -o rsize=1200 remote:/dir /nfs/dir@{0}


@{U}Extra notes:@{0}

The driver was written and tested on a 16MHz ST, so if you run it on
substantially faster machines, there may occure timing problems.
@autorefon
 
@endnode


@node "dial" "dial.xif"
@toc "Drivers"
@{U}dial.xif                                                          FreeMiNT@{0}

DIAL.XIF (C) 1999 by T. Lang

Autodial driver for ppp0-ppp3
@autorefoff

DIAL.XIF is an autodial driver for the ppp interface. It adds the 
interfaces dial0-dial3. Since DIAL.XIF needs access to the ppp 
structures it has to be loaded AFTER SLIP.XIF. Since DIAL.XIF is an 
experimental driver it has not yet been integrated into SLIP.XIF.

You have to start the dial daemon DIALD (in the tool directory) before
DIAL.XIF works. DIAL.XIF tells the dial daemon which connection to 
start or stop.

@{U}Setting up dial.xif:@{0}

First of all you have to start the dial daemon (best from the /etc/rc.net
script). DIALD detaches itself from the console so it can be started 
without the "&" parameter. DIALD starts quietly and only talks if it 
finds a problem preventing the installation.

You have to setup one of the dial interfaces to some ip address you 
like and setup a route to it. For typical internet access you may do 
something like:
ifconfig dial0 addr 192.168.21.20
route add default dial0

Whenever a packet is routed to this interface it checks if the 
corresponding ppp interface (here: ppp0) is up and running. If not it 
tells the daemon to start a corresponding script (here: 
/etc/ppp/ppp-up0) to setup the connection. Create a script with this 
name that sets up the connection and does NOT change the route to the 
dial interface (here: default).

When the connection is idle for a while the dial interface tells the 
daemon to start a script (here: /etc/ppp/ppp-down0) to stop the 
connection.

The dial interface has two timeout values: One for waiting for the 
connection (default is 60s) and one for the idle time before the 
connection is being shut down (default is 80s). These values can be 
changed (see below). Note: LCP packets are not counted here since when 
authenticating by CHAP LCP packets are exchanged on a regular basis.

Please be careful with the access rights to /etc/ppp since if a normal
user can place his/her own scripts here he/she may cause serious 
damage by triggering the dial process.

DON'T TRY THESE DRIVERS UNLESS YOU ARE ABSOLUTELY SURE WHAT YOU ARE DOING.
I'm not responsible for any crashed harddisk or so.

@{U}Special options:@{0}

timeout <timeout>
    With this option you can change the timeout value separately 
    for every dial interface. <timeout> is an intereger value and
    is given in seconds.
waitconnect <timeout>
    As timeout but for the connection timeout. If a connection 
    cannot be established the dial interface waits <timeout> 
    seconds before redialling.
debug <level>
    With this option you can set the debug level for the driver. 
    You normally don't need this. <level> is an integer value.
log <filename>
    With this option you can set a filename where to log. You
    normally don't need this. <filename> is a string.
@autorefon
 
@endnode


@node "pamsdma" "Pam's DMA"
@toc "Drivers"
@{U}Pam's DMA adaptor                                                 FreeMiNT@{0}

PAMSDMA.XIF (C) 1995-1999 by T. Lang

The driver for PAM's DMA adaptor is based on dummyeth from Kay Roemer,
the DMA code (C) T. Lang.
@autorefoff

@{U}Important things to know:@{0}

- Starting and stopping the DMA adaptor with ifconfig up or down doesn't
  work quite reliable yet. So better let the interface be up after
  configuring.
- It is important that a harddisk driver checks the FLOCK flag itself
  before beginning its work. At least some drivers like HUSHI don't and
  are NOT recommended for use together with these drivers!!!
- Be careful with background DMA drivers like the floppy driver or some
  special harddisk drivers. The protective protocol has been changed for
  their use:
  - when sending:
    Check for FLOCK, if set -> queue packet
  - interrupt routine:
    Check FLOCK, if set -> quit, else check for queued send packets, de-
    queue and send them, then check for received packets, if any get them
    and pass them to the upper layers.
  So before testing any background DMA stuff you should make a backup of
  your harddisk! This driver was tested together with my background DMA
  driver for my harddiskrecording interface and works quite stable
  (depending on the CPU and DMA bus load).
- Floppy access causes massive delays in sending and receiving!
- 1. Kay told me that MiNT doesn't do any task switches when FLOCK is set.
  2. I read in the MiNT documentation that MiNT doesn't do any task
     switches when the processor is in supervisor state.
  3. Usual harddisk drivers do DMAs in supervisor mode.
  The PAMSDMA driver relies on these facts. I would have written a
  completely interrupt driven DMA code (like I've done for my harddsik-
  recording system for ALL STs working on the ACSI port) but that's a lot
  of work due to some problems with dirty harddisk drivers like HUSHI
  ignoring a set FLOCK flag.
  Otherwise the scheme would be as follows in the interrupt routine:

  - DMA running?
  - If no
  -    check if FLOCK set
  -    if no
  -       check if any packets received
  -          if yes start read DMA, set FLOCK
  -       else
  -          check if any send packets queued, if yes
  -          dequeue packet and store it DMA buffer, start write DMA
  - else
  -    check if INT line low
  -    if yes
  -       read DMA?
  -          pass received packet to upper layers
  -       get status byte, clear FLOCK

@{U}Planned features:@{0}

- It should be possible that one PAMSDMA.XIF manages more than one DMA
  adaptor. At the moment you can use only one.
- If someone passes me complete documentation about the PAM's DMA adaptors
  it would be possible to add IOCTLs for setting the DMA address and the
  boot behaviour of the adaptor.
- Error management is missing due to missing documentation.
  Please notice: I've done the code without any documentation about the
  adaptor. The original code used in PAM's software was so ugly that I
  didn't use it as a help.

@{B}ATTENTION:@{0}

As a replacement for cache management I've used another trick in this
release of the driver:
The DMA buffer is accessed only at a mirrored address. The address is
ORed with $FF000000 so that the buffer is accessed in an uncached area.
The only drawback with this trick is that it works DEFINITELY NOT on
machines with real 32 bit adressing without patching the MMU tables.
This means that it works not on the Atari TT and perhaps also will cause
trouble on the Eagle or Medusa since AFAIK they don't mirror the ST RAM.
If you want to use this driver on one of these machines please use an
older version of the driver. Well, the driver SHOULD work on tuned STs
like the MEGA ST + PAK/3 + FRAK. It works at least on my tuned MEGA...
@autorefon

DON'T TRY THESE DRIVERS UNLESS YOU ARE ABSOLUTELY SURE WHAT YOU ARE DOING.
I'm not responsible for any crashed harddisk or so.
 
@endnode


@node "mfp" "mfp.xdd"
@toc "Drivers"
@{U}mfp.xdd                                                           FreeMiNT@{0}

MFP serial driver version 0.31
@autorefoff

@{U}Features:@{0}

- native driverroutines for FreeMiNT, completely interrupt controlled
- minimal systemload
- stable and constant data rates at 115200 Baud in background
- installs RSVF compatible and MiNT tty devices
- supports all filesharing and -locking mechanism
- completely supported by FreeMiNT
- no longer is HSMODEM, HSMINST.XDD, RSVX.PRG or other stuff required


@{U}Installation:@{0}

1. Deinstallation of HSMODEM (if installed)
   - remove/rename of all HSMODEM AUTO folder programms
   - remove/rename of hsminst.xdd/drvinmnt.xdd
   - remove/outcomment of the HSMODEM configuration (in your MiNT.CNF)
     like the following lines:
     --- cut ---
     # hsmodem config
     sln u:\dev\hsmodem2 u:\dev\modem2
     sln u:\dev\hsserial2 u:\dev\serial2
     --- cut ---

2. Remove/outcomment of all MiNT.CNF entries for your tty devices
   (if installed)
   like the following lines:
   --- cut ---
   ren u:\dev\modem2  u:\dev\ttyb
   ren u:\dev\serial1 u:\dev\ttyc
   ren u:\dev\serial2 u:\dev\ttyd
   
   sln u:\dev\ttyb u:\dev\modem2
   sln u:\dev\ttyc u:\dev\serial1
   sln u:\dev\ttyd u:\dev\serial2
   --- cut ---

3. Reboot


@{U}Serial port mapping:@{0}

Every driver support two devices for each port, one HSMODEM device
and one Unix terminal device.

HSMODEM devices use the traditional Atari port names. UNIX terminal
devices are always called ttyS followed by a number:

port names on the machines:
===========================

HSMODEM  terminal
device   device    ST      MegaSTE   TT        Falcon   Hades  Milan
@line 1 74 0 0 5
modem1   ttyS0     MODEM   MODEM1    MODEM1    -        ??     MFP port
modem2   ttyS1     -       MODEM2    MODEM2    MODEM2   ??     UART1 (2f8)
serial1  ttyS2     -       -         SERIAL1   -        ??     -
serial2  ttyS3     -       SERIAL2   SERIAL2   -        ??     UART2 (3f8)
lan      ttyS4     -       LAN       LAN       LAN      ??     -
midi     ttyS5     Midi    Midi      Midi      Midi     ??     -


NOTE:  Serial2 and LAN are mutually exclusive, on the MegaSTE and TT;
       selecting Serial2 disables LAN and vice-versa, because they both
       use SCC-A.
@autorefon
 
@endnode


@node "riebl" "riebl"
@toc "Drivers"
@{U}Riebl Card                                                        FreeMiNT@{0}

LANCE, RIEBLMST, RIEBLSPC, RIEBLTT, RIEBLSTE (C) 1995-1999 by T. Lang
@autorefoff

LANCE.XIF:          For PAM's Net VME (TT) and MEGA ST boards
RIEBLMST.XIF:       For unmodified Riebl boards for the MEGA BUS
RIEBLMST_FAST.XIF:  As RIEBLMST.XIF but with fast memory access for
                    unaccelerated systems (8MHz, perhaps >8MHz with 68000)
RIEBLSPC.XIF:       As RIEBLMST.XIF but for modified boards
RIEBLSPC_FAST.XIF:  As RIEBLSPC.XIF but with fast memory access for
                    unaccelerated systems (8MHz, perhaps >8MHz with 68000)
RIEBLTT.XIF:        For Riebl VME boards in a TT's VME bus
RIEBLSTE.XIF:       For Riebl VME boards in a MEGA STe's VME bus

The driver is based on dummyeth from Kay Roemer, the LANCE code is loosely
based on the code of the TUW software and the TUM software. Most of the
code had to be rewritten for the use with mintnet, so the actual LANCE
code is mainly done by myself and is based on the LANCE documentation
from AMD.

Note: The Riebel Card and the TUM board don't have their complete HW
address in a ROM. I don't know if the developers at TU Vienna or TU Munich
got some HW address space from the internic. If anyone has information
about that please let me know. In that case I would use officially
assigned addresses within the driver.

Kay has implemented a method for setting the hw address of a board
"manually". This is neccessary for some boards which don't have their
complete hw address in an NV RAM or a ROM. Please take a look at his
documentation to get the information how the hw address can be set.

PLEASE NOTE: The hw address cannot be set for all boards!

The LANCE driver is quite stable now but there are still some
optimizations to do. 
The first published version (0.0) is based on the code of the TUW package
to which I added LANCE support for PAM's boards. This code was ported to
Kay's dummyeth. The actual driver uses only some definitions and some
initialization code of the TU Wien package. I have completely rewritten
most of the code.

Please note: Some boards have severe design errors. The PAM's Net boards
can send only packets with even sizes. The Riebl Card for the MEGA ST
allocates its ram where TOS versions >2.00 reside so if you want to use
these things together you have to modify your Riebl card by swapping the
MEGA BUS address lines 20 and 21. Furthermore the Riebl MEGA ST boards
don't work reliable when a accelerator board is installed (like the PAK).
Receiving works only reliable when the board's ram is only read bytewide.

DON'T TRY THESE DRIVERS UNLESS YOU ARE ABSOLUTELY SURE WHAT YOU ARE DOING.
I'm not responsible for any crashed harddisk or so.

If you want to know which boards are currently supported please take a
look into "lance.c".

@{U}Special options:@{0}

hwaddr 0x00:0x00:0x36:0x0[24]:0x??:0x??
    This is for Riebl cards only! Riebl cards don't have their 
    address in rom/eeprom but only in battery backed static ram. 
    Unfortunately there are cards without a battery. And even 
    when you own a card with backup battery it may happen that it
    loses its address. The driver will then tell you with a
    "(no valid hw address!)" in its startup message. If so it 
    refuses to go up until you setup a valid address. Note: The 
    first four octets are fixed values for the specific board so 
    the driver checks these and refuses to accept addresses with
    an invalid manufacurer number (that's what the four octets 
    are used for in this case). You will find the address of the 
    card on a small label somewhere on it. The first part is always 
    00:00:36, the next number is 04 for vme boards and 02 for MEGA 
    bus boards. The last two numbers identify the board itself.
    For safety you may want to create a config file and always do
    a "ifconfig -f <filename>" first before setting up the ip 
    address.
braddr 0x??:0x??:0x??:0x??:0x??:0x??
    This is a quite useless funtion to setup the hw broadcast 
    address. It's quite useless because the broadcast address is 
    always 0xff:0xff:0xff:0xff:0xff:0xff.
debug <level>
    With this option you can set the debug level for the driver. 
    You normally don't need this. <level> is an integer value.
log <filename>
    With this option you can set a filename where to log. You
    normally don't need this. <filename> is a string.
@autorefon
 
@endnode


@node "ethernat" "EtherNat"
@toc "Drivers"
@{U}EtherNat                                                          FreeMiNT@{0}

@autorefoff
@{U}Installation:@{0}
@autorefon

At the time of writing only drivers for MiNTNet exist.

To install the EtherNat driver for MiNTNet, copy the file called
"ethernat.xif" to your MINT-directory and then create a file called
"ethernat.inf" in there too. Then edit "ethernat.inf" so that it contains
the MAC-address for your EtherNat board. We have for example chosen
this one:

@{B}00204358783c@{0}

which is the MAC address of an ISA-card we had at home, so the risk of
collisions with other boards is minimal. You could follow this procedure
too or just copy this one and change some digits so that you get a unique
MAC-address.

In your MiNTNet configuration files you must use "@{B}en0@{0}" as device name for
enabling the EtherNat.


@{U}Source code and programming:@{0}

The source code for the EtherNat ethernet MiNTNet driver is included.
These files are coded for compilation using GCC 2.9.5 and you should only
need to type "make ethernat" to compile the whole thing.

You'll find the necessary information about where the registers for the
ethernet controller are if you study the 91c111.h header file.

The registers of the USB are located at 0x8000001y. Fetch the chip
documentation for the ISP1160 from Philips and you'll get a better picture
of these registers. When setting up the interrupt in the USB chip it must
be set to level-triggered active high.

The interrupt vectors are $C3 for the USB and $C4 for the ethernet. There 
is a kind of main control register implemented in the CPLD, which is a
byte at 0x80000023. In this register you'll find the following bits:

@{U}The Ethernat control reg:@{0}

Bit 0: LAN half clock mode, default 1 (on)
Bit 1: LAN interrupt enable, default 0 (off)
Bit 2: USB interrupt enable, default 0 (off)
Bit 3: unused
Bit 4: unused
Bit 5: unused
Bit 6: Led 1 active low, default 1 (off)
Bit 7: Led 2 active low, default 1 (off)

A few words about this register: Bit0 must always be on if your CT60 clock
frequency is above 50MHz, else it should be off to get higher throughput
from the LAN chip. But you'll have to recompile the driver to change
this...

Bit 1 and Bit 2 are the main interrupt enable switches for the ethernet
and USB respectively. If these aren't enabled then no interrupts will get
through to the CT60.

Bit 6 and Bit 7 control the non-mounted LEDs on the EtherNat board. Look
for LED1 and LED2 and you'll find them. You can solder your own LEDs to
these pads together with a resistor that is around 200 - 300 ohm. Mind the
polarity of the LEDs.

/Henrik Gilda
hencox@hotmail.com
 
@endnode


@node "scc" "scc.xdd"
@toc "Drivers"
@{U}scc.xdd                                                           FreeMiNT@{0}

SCC serial driver version 0.27
@autorefoff

@{U}Installation:@{0}

1. Deinstallation of HSMODEM (if installed)
   - remove/rename of all HSMODEM AUTO folder programms
   - remove/rename of hsminst.xdd/drvinmnt.xdd
   - remove/outcomment of the HSMODEM configuration (in your MiNT.CNF)
     like the following lines:
     --- cut ---
     # hsmodem config
     sln u:\dev\hsmodem2 u:\dev\modem2
     sln u:\dev\hsserial2 u:\dev\serial2
     --- cut ---

2. Remove/outcomment of all MiNT.CNF entries for your tty devices
   (if installed)
   like the following lines:
   --- cut ---
   ren u:\dev\modem2  u:\dev\ttyb
   ren u:\dev\serial1 u:\dev\ttyc
   ren u:\dev\serial2 u:\dev\ttyd
   
   sln u:\dev\ttyb u:\dev\modem2
   sln u:\dev\ttyc u:\dev\serial1
   sln u:\dev\ttyd u:\dev\serial2
   --- cut ---

3. Reboot


@{U}Serial port mapping:@{0}

Every driver support two devices for each port, one HSMODEM device and one
Unix terminal device.

HSMODEM devices use the traditional Atari port names. UNIX terminal
devices are always called ttyS followed by a number:

port names on the machines:
===========================

HSMODEM  terminal
device   device    ST      MegaSTE   TT        Falcon   Hades  Milan
@line 1 74 0 0 5
modem1   ttyS0     MODEM   MODEM1    MODEM1    -        ??     MFP port
modem2   ttyS1     -       MODEM2    MODEM2    MODEM2   ??     UART1 (3f8)
serial1  ttyS2     -       -         SERIAL1   -        ??     -
serial2  ttyS3     -       SERIAL2   SERIAL2   -        ??     UART2 (2f8)
lan      ttyS4     -       LAN       LAN       LAN      ??     -
midi     ttyS5     Midi    Midi      Midi      Midi     ??     -


NOTE:  Serial2 and LAN are mutually exclusive, on the MegaSTE and TT;
       selecting Serial2 disables LAN and vice-versa, because they both
       use SCC-A.
@autorefon
 
@endnode


@node "scsilink" "scsilink.xix"
@toc "Drivers"
@{U}scsilink.xix                                                      FreeMiNT@{0}

@autorefoff
This is a driver for MintNet that supports the Daynaport SCSI/Link
(a SCSI-to-Ethernet device).

@{U}Hardware installation:@{0}

1. Make sure your system is powered off.
2. Connect the Daynaport SCSI/Link into the SCSI chain of your TT or
   Falcon.  If it is physically the last device in the chain, make sure
   that termination is on (the 1-0 switch is set to 1), otherwise, make
   sure that it's off (the switch is set to 0).  Set the SCSI id (the
   rotary switch) to a value that is different from any other device in
   the chain, and different from the id of the system itself, which is
   normally 7.
3. Connect the Ethernet side of the device into your Ethernet (if you
   are using 10baseT, you will need a hub).
4. Power on all the devices in the SCSI chain, before powering on your
   system.

@{U}Software installation:@{0}

1. Make sure that you have a SCSIDRV driver on your system; recent 
   versions of HDDRIVER provide this function.
2. Make sure that arbitration is enabled for the SCSIDRV driver, and
   that the id of the SCSI/Link device is being controlled by SCSIDRV.
3. Copy SCSILINK.XIF to the same folder as your other XIF files; with
   a current MiNT distribution, that's MINT/1-19-*.
4. Depending to the used MiNT distribution, update the various
   configuration files (e.g. EasyMiNT):
      /etc/sysconfig/config.if
      /etc/sysconfig/domainname
      /etc/sysconfig/hostname
      /etc/sysconfig/defaultroute
      /etc/resolv.conf
   Marc-Anton Kehr's e-nick program is a convenient way to do this.
   Many thanks to Marc-Anton for this and his wonderful EasyMiNT
   distribution!
5. Reboot MiNT.  You should see two 'sign-on' messages from the driver
   during initialisation; they should look something like this:
      @{B}DaynaPORT SCSI/Link driver v0.50 initialising ...
      DaynaPORT SCSI/Link driver v0.50 (en0) (xx:xx:xx:xx:xx:xx)
      on bus id 1/4@{0}


@{U}PERFORMANCE:@{0}

Performance was measured by using FTP to transfer a large (~10MB) file
between a TT and a Windoze box. The following rates were obtained:

a) FTP server on Windoze, client on TT
   PC->TT     130 KB/sec
   TT->PC     153 KB/sec

b) FTP server on TT, client on Windoze
   PC->TT     107 KB/sec
   TT->PC     142 KB/sec

Transfers *to* the TT are expected to be slower than transfers from it,
since the TT has to poll the SCSI/Link hardware for an incoming packet,
rather than handle an interrupt.  Polling is currently triggered via 
the VBL interrupt; triggering from the system timer interrupt would
improve performance at a cost of increased overhead.

@{U}REVISION HISTORY:@{0}

Version 0.50        First public beta release


@{U}NOTES:@{0}

1. Testing to date has been on a TT running TOS 3.06, with the SCSI/Link
   connected to the SCSI port; however, it should also work on the ACSI
   port (see below), and on other TOS-compatible systems including the
   Falcon.  Please let me know if you have had success or problems under
   other configurations.

2. If you wish to use the ACSI port of an ST, Mega, or TT, you will
   need (at least) a host adapter that supports SCSI arbitration, i.e.
   a Link96/Link97.  You will also need a device on that port which
   provides TERMPWR to power the Link9x (the SCSI/Link does not).

3. SCSILINK.XIF is written to support multiple devices (ethernet ports),
   but that feature has not yet been tested.  If you connect two devices
   to the same Atari system and it works, please let me know!


Roger Burrows
Anodyne Software
11/March/2007
@autorefon
 
@endnode


@node "uart" "uart.xdd"
@toc "Drivers"
@{U}uart.xdd                                                          FreeMiNT@{0}

Milan 16550 UART driver
@autorefoff

 * 2000-05-24:  (v0.63)
 * 
 * - new: hopefully better behaviour on last close()
 *        (flush buffers, go back to carrier detection & update TS_BLIND)
 * 
 * 2000-05-16:  (v0.62)
 * 
 * - fix: removed unnecessary debug messages that are printed
 * 
 * 2000-05-14:  (v0.61)
 * 
 * - fix: corrected TS_BLIND <-> clocal handling; now hopefully correct
 * - new: bios emulation doesn't poll now, use sleep/wake mechanism
 *        like the read/write functions
 * 
 * 2000-05-12:  (v0.60)
 * 
 * - new: reworked the complete high level I/O routines;
 *        support now (hopefully) true tty functionality
 *        this include carrier handling, vmin/vtime handling,
 *        clocal settings and so on
 * - new: seperate read/write routines for HSMODEM devices;
 *        they never block


@{U}Features:@{0}

- native driverroutines for FreeMiNT, completely interrupt controlled
- minimal systemload
- stable and constant data rates at 115200 Baud in background
- installs RSVF compatible and MiNT tty devices
- supports all filesharing and -locking mechanism
- completely supported by FreeMiNT
- no longer is HSMODEM, HSMINST.XDD, RSVX.PRG or other stuff required


@{U}Installation:@{0}

1. Deinstallation of HSMODEM (if installed)
   - remove/rename of all HSMODEM AUTO folder programms
   - remove/rename of hsminst.xdd/drvinmnt.xdd
   - remove/outcomment of the HSMODEM configuration (in your MiNT.CNF)
     like the following lines:
     --- cut ---
     # hsmodem config
     sln u:\dev\hsmodem2 u:\dev\modem2
     sln u:\dev\hsserial2 u:\dev\serial2
     --- cut ---

2. Remove/outcomment of all MiNT.CNF entries for your tty devices
   (if installed)
   like the following lines:
   --- cut ---
   ren u:\dev\modem2  u:\dev\ttyb
   ren u:\dev\serial1 u:\dev\ttyc
   ren u:\dev\serial2 u:\dev\ttyd
   
   sln u:\dev\ttyb u:\dev\modem2
   sln u:\dev\ttyc u:\dev\serial1
   sln u:\dev\ttyd u:\dev\serial2
   --- cut ---

3. Reboot


@{U}Bugs:@{0}

- there is at the moment no way to autodetect additional installed
  UART ports; but this driver can handle additional ports and you can
  selfcompile a version if you add the required informations to
  detect_uart() if the Milan TOS provide the required infromations this
  problem can be easily solved


@{U}Thanks:@{0}

- to Rainer Mannigel for the source he originally developed for his
  own BIOS and the permission to develop a serial driver
- to Michael Schwingen for the reworked source from Rainer for the
  Milan TOS
- to Stefan Glaser for intensiv betatesting


@{U}Serial port mapping:@{0}

Every driver support two devices for each port, one HSMODEM device and
one Unix terminal device.

HSMODEM devices use the traditional Atari port names. UNIX terminal
devices are always called ttyS followed by a number:

port names on the machines:
===========================

HSMODEM  terminal
device   device    ST      MegaSTE   TT        Falcon   Hades  Milan
@line 1 74 0 0 5
modem1   ttyS0     MODEM   MODEM1    MODEM1    -        ??     MFP port
modem2   ttyS1     -       MODEM2    MODEM2    MODEM2   ??     UART1 (3f8)
serial1  ttyS2     -       -         SERIAL1   -        ??     -
serial2  ttyS3     -       SERIAL2   SERIAL2   -        ??     UART2 (2f8)
lan      ttyS4     -       LAN       LAN       LAN      ??     -
midi     ttyS5     Midi    Midi      Midi      Midi     ??     -


NOTE:  Serial2 and LAN are mutually exclusive, on the MegaSTE and TT;
       selecting Serial2 disables LAN and vice-versa, because they both
       use SCC-A.
@autorefon
 
@endnode


@node "actrl" "actrl.ttp"
@toc "BIN"
@{U}actrl.ttp                                                         FreeMiNT@{0}

actrl is a utility program that lets you set the various characteristics
of the audio device (speed, mono/stereo, sample format, volume, balance,
bass, treble) and is a good source to look at if you plan to write
programs that use /dev/audio.

@{U}Examples:@{0}

@{B}actrl.ttp volume 100 treble 50 bass 50 mono@{0}
   Set max. volume, linear treble and bass amplification, mono mode
   (works only on machines that have STe compatible sound hardware).
    
@{B}actrl.ttp format u8 speed 6000
cat sample > /dev/audio@{0}
   Play an unsigned sample at 6 kHz.
    
@{B}actrl.ttp format ulaw speed 8000
cat sample.au > /dev/audio@{0}
   Play a sun .au audio file.
    
A note on playing SUN .au files on STe DMA hardware: the old style SUN
audio files are 8 bit u-law encoded at 8000 Hz. Since the STe audio
hardware is only capable of playing at 6kHz or 12kHz (but not 8kHz), SUN
.au's are either played too fast or too slow. One solution to this problem
is to convert the sample rate to 12kHz using sox:

@{B}sox -U -r 8000 sample.au -U -r 12517 sample-at-12k.au@{0}

and then playing the file with:

@{B}actrl.ttp speed 12517 format ulaw
cat sample-at-12k.au > /dev/audio@{0}

or as a one-liner:

@{B}actrl.ttp speed 12517 format ulaw
sox -U -r 8000 sample.au -U -r 12517 - > /dev/audio@{0}

Up to 8 channel MOD's and Screamtracker 3 files can be played using s3mod.
Both sox and s3mod are NOT part of this distribution.

@{U}John Blakeley:@{0}

The usage of actrl has changed somewhat, to implement >2 channel support
for Falcons:

- 'actrl mono' will no longer work - use 'actrl chan 1'
- 'actrl stereo' becomes 'actrl chan 2'
- 'actrl chan 4' allows you to audition 4 channel samples if you have the
  necessary external hardware for your Falcon! You can also try 6 or 8!

There is no control over the levels of bass and treble on the Falcon, as
it does not have a Microwire Interface.

Todo: Add support for recording (16-bit stereo only?).
 
@endnode


@node "fsck.minix" "fsck.minix"
@toc "BIN"
@{U}fsck.minix                                                        FreeMiNT@{0}

Fsck.minix is a File System Consistency checker. It checks Minixfs
filesystems for consistency and optionally repairs them too. It is
important that a Minixfs filesystem is checked for errors when, for
example, the system crashes or a lock up forces a reboot when programs are
using the filesystems. This will occasionally mean that fsck will perform
minor repairs which will cause no damage at all. Using a damaged
filesystem can result in much more serious damage occuring at a later date
which require more destructive repairs to fix.

@{U}ADVICE ON USE OF FSCK:@{0}

fsck cannot perform miracles; a severely damaged filesystem (such as if a
lot of sectors get wiped somehow) may have very little salvageable.
However, don't be overwhelmed by the options available. In practice only
fsck -n or fsck on its own are used, the -p option is useful in shell
scripts where non-interactive repair is needed, but you dont want any
attempted destructive repair.

If fsck -n does produce what appear like a lot of serious errors then it
might be an idea to attempt to backup the data before trying repairs; of
course if you have a full backup (you do make regular backups don't you?)
available it might be best to forget about repair altogether and just
reinitialize the filesystem (with minit) and restore from backup.

@{U}USING FSCK:@{0}

Fsck can be used in interactive or non-interactive mode. In interactive
mode you are prompted before each fix. In non-interactive mode, repairs
are carried out automatically or not at all. The option '-y' carries out
all repairs that fsck would suggest, the '-p' (preen) option carries out
all repairs if the Minixfs filesystems is only slighlty damaged and can be
repaired without destroying data, the '-n' option only prints out the
damage: it does not repair anything. The '-y' option is not recommended
unless you are sure it is what you want.

The options are followed by the drive letter of the partition you want to
check for example,
@{B}fsck -p D:@{0}

@{U}REPAIRS CARRIED OUT:@{0}

In order to know precisely what repairs are carried out you must know a
litle about the internal structure of a Minixfs filesystem. Each
filesystem is divided into blocks or zones, these are always 1K in size.

Each directory/file/symbolic link has an inode associated with it. This is
a small part of a disk sector which carries all information about a file
except its name. It contains the file access modes (including what kind of
entity the inode refers to) as well as it's size and a list of sectors
where the file can be found. If this list is not large enough then an
'indirection block' which is a disk block containing a list of further
blocks belonging to the file is used (and recorded in the inode). If this
is not enough then a 'double indirection block' is used containing a list
of further indirection blocks.
With this information, all the data in a file can be accessed.

A directory is basically identical to a file except it has a different
mode number. The 'data' in this file is a list of 'entries' (or links)
each entry contains a filename and an inode number where that name can be
found. The root directory is always contained in inode 1. A field in the
inode called it's 'link count' gives a count of the number directory
entries that refer to it.
Every directory has two filenames '.' which refers to itself and '..'
which refers to the parent directory. The only exception is the root
directory where '..' refers to itself as well.

Each used inode/block is referenced in a bitmap. If the filesystem crashes
before this can be written out to disk then it will be inaccurate.
Fortunately fsck can rebuild the bitmaps from the data contained in
inodes. This is what the prompts asking about bitmap repair mean. They are
harmless and it is strongly advised that any bitmap repairs suggested
are made.

If you use the filesystem and some used blocks do not have their bits set
in the bitmap then other files can use them, overwriting the original
data. These are called 'multiply allocated blocks'. fsck will give a list
of these blocks and (optionally) allow you to decide which inode is the
valid block. Usually the valid data is contained in the file with the
latest modify time: the '-y' option removes all of the references. By
finding the files the inodes refer to (e.g. with the -i option) you can
look to see which file contains the valid data and then interactively
remove the other references.
The other files where the references are removed then have 'holes' in
them, you may want to try to recover them or just delete them after 'fsck'
has done its work. This is why it is important that the bitmaps are
accurate and should be checked regularly.

This is the 'best case' scenario of multiply allocated blocks. If the
block overwritten belongs to a directory then much more trouble is caused.
After deleting the overwritten reference in a directory lots of inodes may
no longer be referenced in a directory, these are called 'orphaned' inodes
(they have no parent directory). fsck has no way of knowing their original
names, but the data is recoverable. fsck makes entries for these inodes in
a directory called lost+found. The name chosen is simply the inode number.
You can then analyse the files/directories in lost+found and delete,
rename or move them to where they were originally.

The worst case is if an indirection block is overwritten. This can cause
lots of spurious messages about bad zone numbers and other multiply
allocated blocks. fsck cannot help much under such circumstances: if a
certain inode contains lots of multiple block number or bad zone numbers
then it's best to delete all multiply allocated blocks in that inode;
either with fsck or finding the inode on the disk and deleting the
associated file.

Here is a summary of the possible repairs fsck performs:

1. Scan all inodes, allow deletion of multiply allocated blocks, inodes
   with bad modes, truncation of inodes which reference too many zones.

2. Scan all directories, check for valid names and the existance of '.'
   and '..' entries and allow fixing.

3. Check filesystem conectivity (that each inode has a directory entry)
   and allow repair of any problems and reconnection of orphaned inodes.

4. Check bitmaps and repair; check inode link counts and allow repair.

MISCELLANEOUS OPTIONS

If the root directory gets destroyed it must be handled separately because
the lost+found directory will be killed also. If this is the case then the
 '-R' option will reform the root directory. Unfortunately the directory
increment is determined from the root directory, so you must manually tell
fsck the directory increment with the '-d' option followed by the
increment. If you get this wrong then a large number of errors about
directory entries will be erroneously reported.
If for some reason the root inode is no longer a directory, Minixfs may
get confused and not recognise the filesystem anymore. By asking fsck to
continue it will still check the root inode as though it were a directory:
if it looks OK fsck allows you to make it a directory again. However you
will have to reboot before the filesystem will be recognised by Minixfs
again.

The '-i' option followed by a comma separated list of numbers will
print out the pathnames of the corresponding inodes. E.g.:
@{B}fsck.minix -i 1,2,3 D:@{0}

This will print out *all* the possible names so e.g. 
@{B}fsck -i 1 d:@{0}
may give something like:

\.
\..
\dir\..
\dir2\..
etc.

The '-z' option allows an inode to be zeroed if for example it is
severely trashed and fixing would do more harm than good (e.g. if an
indirection block has been overwritten). -z may be followed by a comma
separated list of inodes to zero. NB use this option with extreme caution,
the data the inode refers to will be effectively deleted (it will still be
on the disk but no longer accessible directly). Using this option will
also cause related "errors" to appear (though all can be fixed) such as
inode and bitmap errors and links a free inode.

The '-e' option tries to find out the filesystem size by reading as far as
it can through a partition: this is an experimental option and isn't too
useful at present.
 
@endnode


@node "ifconfig" "ifconfig"
@toc "BIN"
@{U}ifconfig                                                          FreeMiNT@{0}

ifconfig - network interface configuration

@{U}Synopsis:@{0}

ifconfig [-a|-v] [-f <filename>] [interface options]


@{U}Description:@{0}

ifconfig is used to set and show the addresses, flags and options of
network interfaces.

When ifconfig is invoked without arguments, it shows a table of all
running network interfaces, their addresses and flags in a human readable
form. The option -a forces ifconfig to display all interfaces in the
system, no matter if they are running or not. The option -f <filename>
passes driver specific options to ifconfig README files of every driver
that supports this.

When a single argument (the name of a network interface) is given,
ifconfig just shows the status of this interface.

ifconfig sets flags and addresses of the interface named as the first
argument when additional options are given.


@{U}Options:@{0}

@{B}interface@{0}
- The name of the interface to deal with. lo0 and sl0 are valid names for
  the loopback interface and the SLIP interface (channel 0) respectively.

@{B}addr <inetaddr>@{0}
- This option causes ifconfig to set the local IP address of the interface
  to inetaddr. This is the address your machine can be reached via this
  interface. inetaddr can be in standard IP address dot notation or can be
  a symbolic name which is resolved into an IP address.
  NOTE that you must not use a symbolic name when setting up the loopback
  interface, because symbolic names cannot be resolved before the loopback
  interface is set up.

@{B}dstaddr <inetaddr>@{0}
- Set the point to point destination address of the interface to inetaddr,
  which can be an IP address or a symbolic name. This option will only
  work on point to point interfaces, like the sl? ones.

@{B}broadaddr <aaa.bbb.ccc.ddd>@{0}
- Set the broadcast address of the interface to aaa.bbb.ccc.ddd. This
  defaults to the net broadcast address of the attached network, but can
 be set to any valid IP address. This option will only work on interfaces
 that support broadcasting, like the lo0 interface.

@{B}netmask <aaa.bbb.ccc.ddd>@{0}
- Set the subnet mask of the interface to aaa.bbb.ccc.ddd. This is by
  default the class A, B or C netmask of the local address of the
  interface set with the addr option. It can be used to split a large
  network into many small subnetworks.

@{B}up@{0}
- This sets the UP flag on the interface, used to activate the interface.

@{B}down@{0}
- This clears the UP flags on the interface and shut down the interface.

@{B}[-]arp@{0}
- (De)activate usage of the ARP (address resolution protocol) for
  resolving IP addresses into hardware addresses.

@{B}[-]trailers@{0}
- (De)activate usage of trailer encapsulation for this interface.

@{B}[-]debug@{0}
- (De)activate debugging for this interface. Debugging is currently
  a no-op.

@{B}mtu <NN>@{0}
- Set the mtu (maximum transmission unit) of the interface to NN bytes.
  Better make it large enough as long as fragmentation is not implemented.

@{B}metric <NN>@{0}
- Set the metric of the interface to NN. This value is currently not used.

@{B}[-]linkNN@{0}
- This option sets (clears) the bit with number NN in the link level flag
  word of the interface. The flag word is 16 bits wide, so link0 through
  [-]link15 are valid. Bit 0 is the least significant, bit 15 the most
  significant bit. Link level flags are interface type specific. Thats why
  ifconfig only uses bit numbers instead of meaningful names for them.
  Currently only SLIP interfaces support link level flags. Bit 3 turns
  auto compression on: If set and a VJ compressed SLIP frame is received
  the interface enables compression for outgoing frames. Bit 4 is the
  compression bit: If set VJ header compression is enabled.


@{U}Authors:@{0}

Kay Roemer, Torsten Lang
 
@endnode


@node "mflist" "mflist"
@toc "BIN"
@{U}mflist                                                            FreeMiNT@{0}

This is another quick hack program. Useage if flist X: . This will print
out all the inodes of open files on drive X: . You can then run fsck_minix
with the -i option to find out what the files are.
 
@endnode


@node "mfsconf" "mfsconf"
@toc "BIN"
@{U}mfsconf                                                           FreeMiNT@{0}

The utility mfsconf is a very simple utility to set the filename
translation modes for a given device, or to inquire what they are.

To determine the file translation modes for a given drive (X: say) type: 
@{B}mfsconf X:@{0}
The output is self explanatory.

To set the modes the options -d -s -x or -c are used for directory search
execute or creation translation. The letter is followed by one of the
letters n, a, t or m for neither, all TOS or MiNT scopes respectively
finally the drive is specified.
E.g.

@{B}mfsconf -d n -s a X:@{0}

sets directory translation to none and search translation to all on
drive X: . All other modes remain the same.
 
@endnode


@node "minit" "minit"
@toc "BIN"
@{U}minit                                                             FreeMiNT@{0}

The program 'minit' creates minixfs filesystems. They can be created on a
TOS formatted disk or a TOS filesystem, then can also be created to alter
the parameters of an already existing minixfs partition.

WARNING: USING MINIT TO CREATE FILESYSTEMS WILL IRRETRIEVABLY WIPE ALL
DATA ON THAT PARTITION. This includes using it to create a filesystem
'on top' of an already existing one. Don't say I didn't warn you.

@{U}FILESYSTEM VERSIONS:@{0}

Before you decide to make a filesystem you must decide which kind of
filesystem you want to make. There are two kinds at present V1 and V2.
These are compatible with the equivalent Minix filesystems. V1 filesystems
are the standard Minix filesystems used with all versions of Minix, they
do have a number of shortcomings, there is only one kind of file access
time and V1 filesystems can be at most 64Mb in size. V2 filesystems are
newer and are the same as the V2 filesystems used by Minix 1.6xx (and
presumably higher). They have three access times and can be any size (if
you hard disk software will support it). I would strongly advise the use
of V2 filesystems.

If you supply the -V option to minit you will make a V2 filesystem,
otherwise it will be V1.

@{U}DIRECTORY INCREMENT:@{0}
        
It doesn't quite end there though. There are a couple more parameters you
should know about. Under Minix itself you can have filenames of at most
14 characters in length. Minixfs uses this value by default. However there
is a parameter called 'directory increment' which allows you to use longer
filenames. This parameter must be a power of two between 1 and 8
(inclusive) in other words it can be 1,2,4 or 8. The maximum filename size
is given by the formula maxlength= increment*16 - 2. Thus increments of
1,2,4,8 will result in maximum filename lengths of 14,30,62 and 126
respectively. However be advised that every filename whatever length
occupies this space, so if you set the increment to 8 then a filename of
length 1 will still use up the same space in a directory as a filename of
length 126. Setting this too high will slow down directory operations
somewhat. 2 is a reasonable value for this parameter. NB If you use Minix
itself then only the default increment (1) is accessible to Minix; other
values will seriously confuse Minix, so if you want partitions to be
accessible to Minix use increment 1 (the default).

The -n option allows you to set the directory increment, follow it by
the increment you want. If this option is not present then a value of one
is assumed.

@{U}PROTECTION:@{0}

A couple of options deal with 'protection'. This is a somewhat tricky
subject. Basically protection is a method I use to prevent TOS from
writing to a Minixfs partition when MiNT is not running, if TOS did then
the partition would be damaged (possibly irreparably). If you will always
use MiNT and Minixfs, or you are absolutely certain you will never write
to a Minixfs partition without MiNT/Minixfs running then feel free to use
no protection at all.

However this is rather unlikely so you usually will need some form of
protection. There are currently two methods:
Null Disk and other partition ID. 
        
A Null disk makes TOS think it's root directory is full so it can't write
to a filesystem because it can't create any files.

If Null disk doesn't work then you can try an alternate partition ID.
This only works if you have software with an XHDI version of 1.10 or
higher, if you use the '-t' option to minit you can find out your XHDI
version (if any). The partition ID is a three character identifier for the
partition type. TOS uses GEM and BGM for its filesystems; you can use
other types to ensure TOS will never access the partition and Minixfs can.
There are quite a few problems though. Not all hard disk software allows
the partition ID to be edited. Also Minixfs can only automatically access
other partitions with XHDI compliant software (see the information
provided by the '-t' option). 

If you have XHDI compliant software and you can edit the partition ID
then you can use the ID MIX for Minixfs (you can also use RAW, but I would
not advise it). After altering the ID, reboot and use minit as normal and
all should be OK.

@{U}OTHER OPTIONS:@{0}

Normally minit tries to find out the size of a partition by itself, this
can sometimes fail. If it does then you must enter the partition size
(in K) manually with the -b option.

Inodes are part of the filesystem. Every file/directory/symbolic link on
the filesystem uses precisely one inode. If you run out of inodes then
you can't create any more files/directories/symbolic links without first
deleting some already there. The default number of inodes is a third the
partition size in K. If you want to create more then use the '-i' option
followed by the number you want. You can have at most 65535 inodes on a
filesystem. The default will almost always suffice, but you can increase
this if you will need more.

The -S option writes out part of the filesystem called the 'super block'
only. If you accidentally wipe out the start of a partition then this
option may allow some data to be salvaged. If the start of a partition is
wiped out then the partition may not be even recognised as minix, so the
-S option can help under these rare circumstances. Note: you must use
exactly the same pararmeters you used to create the fileystem in the
first place.

The -t option is a test option. It does almost everything needed to create
a filesystem without writing anything. It also gives a status report of
any options (e.g. XHDI support) the driver software may have.
Use of '-t' is recommended before actually creating the partition;
it won't harm anything.

@{U}HUGE PARTITIONS:@{0}

A *huge* partition is a partition where the logical sector size is
bigger than 1K. In practice this means bigger than 64Mb (or 32Mb with some
partitioning software). Unlike TOS filesystems when you create a Minixfs
filesystem bigger than 64Mb the filesystem is still accessed in 1K blocks.
In this sense if you create a 1 byte file when the logical sector size is
e.g. 4K you use up 1K of the disk not the 8K (2 sectors) TOS filesystems
would use.

If the partition you are creating is huge then you may have some
problems. This is basically down to bugs and inconsistencies in driver
software. I've tried to work around these as much as possible, but I can't
guarantee anything. The rules are explained below, which should help if
you want to create such a partition and minit complains. Generally minit
will complain if it can't find a work around for your software.

If the drive letter is A-P (inclusive) you should always be OK. If you are
using software which conforms to XHDI then you should also have no
problems (and you might want to set the partition ID to MIX as well). If
neither is the case then you may need to either obtain XHDI compatible
disk software or repartition/reorder (set the ID's so the large partition
is on the first hard drive) to make the large partition drive A-P.

The A-P restriction may be fixed in future versions of Minixfs if there
is any demand (however it is rather tricky to do).

@{U}RECREATING A TOS PARTITION:@{0}

If you decide you want to turn a Minixfs partition back into a normal TOS
partition then you can use the '-r' option. This will recreate a blank
TOS filesystem on the partition selected. Certain hard disk software may
not recognise the new filesystem, so always reboot after you use
this option.

Note: This option only works at present if you created the filesystem with
a newer version of minit. If there is any demand I may add an option for
it to work if the filesystem is older, by 'improvising' a bit.

Some hard disk software (e.g. ICD) and disk tools have an option to
rebuild a single partition without disturbing the others. If you have such
sofware then please use as opposed to the '-r' option. Such software will
probably work under all circumstances (e.g. filesystems made with older
minit versions). The primary reason I added the '-r' option was to allow
people without partition rebuilding software to be saved the effort of
reformatting or repartitioning their hard disks to get a 
TOS filesystem back.

@{U}USING MINIT:@{0}

After all the options must come a drive letter (either case) followed by
a colon. You will then be given a warning, if you type 'y' or 'Y' then the
process continues, otherwise it's aborted. If you are running Minixfs/MiNT
the partition should be instantly recognisable. To check try using
'mfsconf' and you should get some status info about translation modes
(see minixfs.doc). If you get the message 'drive X: is not minix' then
there may be a problem. Try rebooting, if that doesn't work try recreating
a TOS partition (there should be an option in you hard disk driver sofware
to do this) and using minit without any protection options. If this still
fails then your system hard disk driver software currently cannot use
Minixfs partitions. Send me a report (see the file 'bugs.doc') and I'll
see what I can do.

WARNING: you should not make the partition you boot from or the partition
that you load MiNT and minix.xfs a Minixfs partition. This is because TOS
cannot boot a Minixfs partition or run MiNT/minix.xfs from a Minixfs
partition.

@{U}EXAMPLES:@{0}

Create a minixfs filesystem on drive A:

@{B}minit A:@{0}

Create a V2 filesystem on E:

@{B}minit -V E:@{0}

Create a V2 filesystem with increment 2 and null disk protection
on drive D:

@{B}minit -V -d 2 -P D:@{0}

Test the disk driver software used to access drive F:

@{B}minit -t F:@{0}
 
@endnode


@node "minixfs" "minix filesystem"
@toc "XFS"
@{U}minix filesystem                                                  FreeMiNT@{0}

- @{"minix introduction" link minixfs1}
- @{"minix extended filesystem driver" link minixfs2}
- @{"minix system calls" link minix_syscall}
- @{"Bugreport/address" link minix_bug}
- @{"Latest changes" link minix_latest}
 
@endnode


@node "minixfs1" "minix introduction"
@toc "minixfs"
@{U}minix introduction                                                FreeMiNT@{0}

Minixfs is an alternative filesystem which runs under MiNT. It can replace
the standard TOS MS-DOS like filesystem which is standard on the ST.
So why would you want to replace the standard TOS filesystem? Here are
some of the arguments for and against minixfs:

@{U}For:@{0}

1. Filenames are no longer limited to 8 characters with an optional 3
character extension, the standard filesystem supports mixed case 14
character filenames. Alternative filesystems support 30 or even 62
character filenames.

2. The filesystem is much more U*ix like, supporting the standard user/
group ids, 3 access times (well for the V2 filesystem anyway) and so on.
If you're used to Un*x like filesystems then this will certainly make you
feel at home! Symbolic and hard links are supported too as are sparse
files and the root directory can never fill up.

3. The filesystem is compatible with that used by Minix as might be
guessed from its name. If you use Minix then using minixfs under MiNT will
allow the minix partitions to be accessible under TOS, in fact they can be
set up to appear almost indistinguishable from TOS partitions.

4. Because it uses an indirection block Un*x like filesystem it tends to
be somewhat more robust than TOS filesystems. 

5. Full source is available, as am I. You find a bug, tell me and I'll
fix it.

6. It is possible to make *huge* partitions, theoretically the limit is
4096Gb if your hardware and software can take it (and I don't know
anything that can!). This is achieved *without* increasing the sector
size, unlike the standard TOS filesystems.

7. It is quite a bit quicker than TOS filesystems. If you don't use write-
caching disk software then the speedup using turbo mode is considerable.
Even if you do use write-caching software (e.g. ICD) the speedup is still
useable.

@{U}Against:@{0}

1. Programs which depend upon the filesystem format (defraggers
consistency checkers etc) will not work. I have written a consistency
checker for Minixfs however, which is supplied. A port of the Linux
defragger is also available.

2. Non MiNT aware programs will not be able to access longer filenames and
some non conforming MiNT aware programs wont either. You can still use the
translated TOS compatible names though.

3. Minixfs is not officially supported by Atari. At least they've never
told me if it is. This has several consequences and some of the more
cynical may consider this should be put in the 'for' group :-)

4. Huge partitions have a few caveats, mainly due to buggy driver
software. Although work arounds exist. Roughly speaking this works in
spite of the driver software rather than because of it :-)

In spite of the above 'againsts' I regard minixfs as a very powerful and
useful addition to the ST (then again I would wouldn't I?). For
programmers it is very useful indeed particularly if you are porting from
Un*x, many of the standard kludges to make filenames fit are no longer
necessary nor are some of the tricks to keep TOS happy (like not unlinking
an open file).

If you haven't decided not to try Minixfs by now then you'll want to know
more information. If you're unsure you can always experiment with Minixfs
filesystems on floppy disks first before comitting your hard disk.
The remaining files in this directory give information about minixfs
itself and the various tools for creating and fixing minixfs partitions.
 
@endnode


@node "minixfs2" "minix.xfs"
@toc "minixfs"
@{U}minix.xfs                                                         FreeMiNT@{0}

MINIX.XFS is the minix filesystem driver. To use it copy MINIX.XFS to the
root directory of whichever partition you start MiNT from. Reboot and you
should get the startup Minixfs message. Any Minixfs partitions should then
be immediately accessible.

If you don't use MultiTOS then you should also copy nohog.acc into your
root directory (or wherever you load accessories from).

There isn't a great deal more to say about it from a normal users point
of view. The only thing which can potentially cause trouble is filename 
translation.

The system calls specific to Minixfs are described in minix_syscall.
These are only likely to interest programmers. 

@{U}FILENAME TRANSLATION:@{0}

Some programs cannot cope properly with mixed case filenames. In general
a program which is not MiNT aware (and some which are) will only receive
13 chacacters of a filename. This is not the fault of Minixfs, in pre-MiNT
days there was simply no way to pass more characters to a program. Some
quite common (!) programs have problems, for example the desktop and the
standard file selector. As a result Minixfs has the option to translate
filenames to the standard TOS form, that is 8 characters with 3 character
extension and upper case (this will be referred to as 8+3 format).

Naturally this translation is not ideal and some conflicts may occur. The
normal translation rule is to make the filename upper case and to retain
the original extension. For example FooBARFilename.C becomes FOOBARFI.C.
The basename and extension are cut back to 8 and 3 characters respectively
as would be expected. Periods are replaced by commas in all but
the extension.

There are four cases where translation can occur and 4 'scopes'. The scope
determines when a program should receive translation. The scopes are all,
MiNT domain, TOS domain and neither. Usually a program that understands
MiNT will run in MiNT domain; otherwise it will run in TOS domain. Clearly
the 'neither' scope means translation will never occur for that case and
'all' means it will always occur.

The 'cases' are search, directory, creation and executability. When you
attempt to access a file, 'search' is used. For example if the scope
means translations occurs for a specific program then if the file
FooBARFilename.C exists then it can be accessed as FOOBARFI.C. When 
adirectory is listed 'directory' translation is used, thus
FooBARFilename.C will appear as FOOBARFI.C on e.g. the desktop.

Creation is slightly different. This simply translates all filenames
created to lower case. So a TOS program creating FOOBARFI.C will actually
create foobarf.c . This can be useful for certain programs which translate
filenames to upper case.

Executability refers to creating files as well, if a file is created with
the extensions ttp,gtp,tos,prg (either or mixed case) then the 'x' bit
in the filename is set automatically. This makes sure executable programs
stay executable. This is useful for utilities that copy files but are not
aware of MiNT's extensions.

You can set the translation modes to different values for different
partitions, using the utility 'mfsconf'.
 
@endnode


@node "minix_syscall" "minix system calls"
@toc "minixfs"
@{U}minix system calls                                                FreeMiNT@{0}

This page describes some of the syscalls and some special aspects of the
standard syscalls.

STAT (Fxattr)

Almost all the fields are relevant and not 'faked' unlike most of the
standard filesystems. There are a couple of minor exceptions. For V1
filesystems atime/adate and ctime/cdate fields are faked, they are
the same as mtime/mdate; these are not faked for V2 filesystems. The
nblocks field is faked by just assuming the file is continuous, this
will usually be correct; if the file is sparse however this will be
too high.

The 'dev' field is the drive with the standard form 0=A,1=B etc. The
field 'index' is the inode number, this is again valid: if two files
or file descriptors have the same inode and device numbers then they
are the same file, otherwise they are different.

If there are character or block special files on the device then the
field 'rdev' gets filled in appropriately.

DOPENDIR (DREADIR)

In normal mode you never get translated filenames, in addition the
long field is the inode number.

RENAME

You can 'move' directories with this call, as would be expected for
a U*ix like filesystem. This naturally moves all the contents of that
subtree as well. This call will not allow a directory to be moved inside
itself, as this would damage the filesystem (and is illegal anyway).

FDATIME

This is made fairly close to 'utimes', basically setting both atime/mtime
to the value specified and ctime to the current time. It can't change the
times for directories because MiNT blocks opening directories.

FATTR

This is largely faked, the fields aren't really valid for U*ix like
filesystems. Only the DIR/RDONLY bits have any meaning, and RDONLY
can be set as well.

VOLUME NAMES

Basically these don't exist. I suppose I could add support in some way if
there was any demand.

LINK/SYMLINK

As would be expected these are perfectly valid. LINK does not allow hard
links to directories, even by superuser basically because there is no real
need since symbolic links can do this and there would be no way to
remove them.

UNLINK

Unlink behaves in a U*ix like manner with regard to open files. Basically
you can unlink() an open file and let all processes with it open read/
write as normal. When all processes close() the file (or exit which closes
anyway) the space used by the file is freed up.

You can *not* unlink directories, this would be too risky and isn't needed
anyway.

FSEEK

Minixfs allows the creation of sparse files in the usual way (seek past
EOF and write).

DCNTL CALLS

The Dcntl syscall has several options for minixfs filesystems. The
'standard' calls FUTIME (set inode times) and FTRUNCATE (truncate file)
exist as do their Fcntl (ioctl) equivalents. However also inluded are
several Minixfs specific calls.

Opcode 0x100 MFS_VALID

This interprets the value of the additional argument as a long pointer,
and is stores the value MFS_MAGIC there. This is intended so that the path
passed to Dcntl can verified as being on a minixfs filesystem. MFS_MAGIC
has the
value 0x1870431. Because of the possibility of other filesystems using the
same numbers for Dcntl functions with different purposes (though none do
as far as I know) MFS_VALID should always be called before using the other
Minixfs specific opcodes and MFS_MAGIC checked.

Opcode 0x101 MFS_SYNC

Synchronise *all* filesystems, basically write out internal buffers to
disk. Currently the filesystem internally sync()'s as well at various
points, so  this call is not at present necessary before rebooting
the system.

Opcode 0x102 MFS_CINVALID

Invalidate all cache entries for a given drive.
This is used mainly internally.

Opcode 0x103 MFS_FINVALID

Invalidate all file descriptors on the given drive.

Opcode 0x104 MFS_INFO

This call basically returns some info about the Minixfs filesystem on
which the path resides. It interprets the value of the additional
parameter as a pointer to an mfs_info structure. This structure has the
following form:

long total_inodes,total_zones;
long free_inodes,free_zones;
short version;
short incr;
long res1,res2,res3,res4;

(long=32 bits, short=16bits).

total_inodes and total_zones return the total number of inodes and zones
for the filesystem. Similarly free_inodes and free_zones show how many are
unused. A 'zone' is always 1K. version is 1 for V1 filesystems and 2 for
V2. incr is the directory increment. You can use this to determine the 
maximum filename size with the formula incr*16-2. The MiNT syscall Dconf
can also be used for this purpose (see MiNT docs).

Opcode 0x106 MFS_IMODE

The extra paramater is interpreted as a long int. Its value is used to set
the mode of *all* the bits of the file pathname points to. Including the
type fields, thus you can change directories to files, and vice-versa.
This is again root only. Extreme caution is needed with this syscall: it
can do a lot of damage.

Opcode 0x107 MFS_GTRANS
Opcode 0x108 MFS_STRANS

This call gets and sets the translation modes for this device. Only the
superuser can do this. The extra parameter is interpreted as a long
pointer. The scope corresponds to the following values.

#define NONE    0
#define TOS     1
#define MINT    2
#define ALL     3

The 'type' is contained in groups of two bits. Bits 0-1 correspond to
search translation, bits 2-3 are directory translation, bits 4-5 are for 
creation translation and bits 6-7 are for execute translation. All other
bits are currently ignored and should be set to zero.

Opcode 0x10a MFS_IADDR

The argument is a long pointer which will have the start address of
Minixfs placed in it. If Minixfs has crashed then using this address along
with the symbol table (or a suitable debugger) allows the precise point of
the crash to be determined.

Opcode 0x10b MFS_UPDATE

This controls the update daemon. If no daemon is running (e.g. not Turbo
mode) then this function returns -1. Otherwise the argument is a long
which is interpreted as follows:

0x0: Return 1 if daemon suspended, 0 if running.
0x1: Suspend execution of the daemon.
0x2: Resume execution of daemon.
0x3: Return the process id (pid) of the daemon (returns -1 if daemon
     not used)

Opcode 0x10c MFS_MOUNT

This is a bit experimental at present. It is used to mount one Minixfs
filesystem on another and may go away some day if the kernel implements
this (which is where it should really be). 'arg' is a pointer to the
following structure:

unsigned int dev;
long flags;
long reserved[4];

dev is the device to mount (the path to Dcntl gives the path to mount on).
flags is unused at present and should be set to zero. The reserved fields
are also unused at present. The Dcntl path must be a directory other than
the root directory. The filesystem of device 'dev' must not have any
filesytems mounted on it already.

Opcode 0x10d MFS_UMOUNT

The filesystem the Dcntl path is on is umounted.

Opcode 0x10e MFS_LOPEN

arg points to the following structure:

long limit;
unsigned int ilist[SIZE];

The field 'limit' should be set to the value of SIZE (the size of the
ilist array). After this call the inode numbers of all open files on the
Dcntl path filesystem are entered into the ilist array, followed by a zero
terminator. If there isn't enough room in the array, it is truncated and
ERANGE returned.

Opcode 0x10f MFS_MKNOD

arg is a long. The low word is a mode parameter which is the full mode of
a character or block special file mode. The high word is the major/minor
device numbers of the file. The Dcntl path is the path to create.

@{U}NOTE ON FILENAME TRANSLATION:@{0}

Using minixfs filesystems you should always use the Dopendir etc. that
MiNT calls in normal mode. This way you never get translated filenames.
You can use the Dconf or the MFS_INFO Dcntl syscalls to get the maximum
filename length (if needed).
 
@endnode


@node "minix_bug" "Bugreport/address"
@toc "minixfs"
@{U}Bugreport/address                                                 FreeMiNT@{0}

No this isn't a list of bugs, its a list of what to do when you send a bug
report. I've included this because lots of bug reports I receive are
incomplete and I have to email back asking for more information, and often
receive no reply. It costs me real money to do this which is in very short
supply.

Please use one of the following methods:

1. Technical description of bug, basically where it is in the source
   and/or a fix.

2. As much information as possible about the bug. You should include:

a. Your hardware and hard disk driver software.
b. Version of MiNT, Minixfs and TOS.
c. As much information as you can about the bug. If I can't recreate the
   bug then there isn't much I can do to fix it. Basically some method (as
   simple as possible) to recreate the bug is best, also if fsck complains
   before or after the problem as well. All relevant alerts or debugging/
   trace info would help as well. Note also the output of minit with the
   '-t' flag should be sent to me as well; this helps enormously in
   tracing bugs.

Please remember I have an STE and limited software, so if you say "When I
run x.prg on a minix partition it crashes" and 'x.prg' is commercial
software then I can't really do much to help. If 'x.prg' is free then I
may be able to download it. Alternatively if you know how to recompile
minixfs and you don't mind doing a few tests then I may be able to trace
things that way. In any case you should be prepared to answer a few
questions at least.

One more point. Using Minixfs with older versions of MiNT may make bugs
appear which are caused by the MiNT kernel. Please use the latest version
possible. Preferably at least 1.08 . Any bug reports using MiNT versions
prior to 0.95 are untestable. The version of MiNT normally supplied with
MultiTOS i.e. 1.04 can be rather unstable when used with Minixfs due to
MiNT bugs (if you try to change a disk with MiNT 1.04 it crashes
horribly). A known MiNT 0.95 bug is that it loads filesystems twice ...

Reports should be addressed to:
shenson@nyx.cs.du.edu
If you send it to Usenet then I may well miss it. In fact I may take a
long time to reply anyway, so mailing the MiNT mailing list may be more
productive.
I can be contacted by email as shenson@nyx.cs.du.edu . Donations or snail
mail should be sent to:

S N Henson.
 4 Monaco Place,
  Westlands,
   Newcastle,
    Staffordshire.
     ST5 2QT.
      ENGLAND.

Phone: (within UK)  (0782) 662808
       (elsewhere)  +44 782 662808
 
@endnode


@node "minix_latest" "Latest changes"
@toc "minixfs"
@{U}Latest changes                                                    FreeMiNT@{0}

This version is mainly a collection of patches for minixfs pl10. Details
are contained below. Many thanks to all concerned!

The only addition I have made is a -z option to fsck to clear troublesome
inodes. See fsck_minix for more details.

@line 1 69 0 0 5

initial revision

@line 1 69 0 0 5

makefile fixes

@line 1 69 0 0 5

increase cache sizes

@line 1 69 0 0 5

From: inf03@Uni-Trier.de (Sascha Blank)
Message-Id: <9409051059.AA07720@Uni-Trier.De>
Subject: Better personae management for MiNT 1.11beta

use effective instead of real uid for access checking

@line 1 69 0 0 5

From: Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
Date: Mon, 17 Oct 94 10:46:00 +0100
Message-Id: <9410170946.AA02849@issan.informatik.uni-dortmund.de>
To: mint@atari.archive.umich.edu
Subject: MinixFS: directory creation und symlinks

There are two other places where MinixFS uses the ruid instead of the
euid, that is when it creates a directory or a symlink (although for
the latter it does not matter).  Also, the size of a symlink node is
set to the length + 1, but Linux (and probably Minix too) expects it
to be the length without the terminating null.  And neither Linux nor
Minix knows anything about drive specifiers, but MiNTlib always adds
U: to an absolute path, making it difficult to, for example, extract
the Linux root filesystem with its symlinks under MiNT.  I have fixed
this by always stripping the U: prefix on symlink creation and adding
it back in readlink.  This isn't fully backward compatible since
before an absolute link target without drive has been interpreted
relative to the current drive, but i don't thinks this is much of a
problem.  Another difference is that the link size reported by
getxattr may be off by two, but MiNT always uses PATH_MAX when reading
a link.  If this creates a problem then getxattr will have to check if
the symlink name starts with a slash and add two to the size in this
case.

@line 1 69 0 0 5

From: Ulrich Kuehn <kuehn@GOEDEL.UNI-MUENSTER.DE>
Message-Id: <9411021016.AA21609@math.uni-muenster.de>
Subject: Re: Sync() and shutdown() system call

config.h, filesys.h, minixfs.c:
        use Sync() and Shutdown() system calls

@line 1 69 0 0 5

From: Juergen Lock <nox@jelal.north.de>
Subject: Re: MinixFS 0.60 PL10 Patch Collection
Message-Id: <9411122007.AA00358@jelal.north.de>

. fix bitmaps Kmalloc calculation for larger filesystems
. a hack for fsck to check for sparse directories
. clear bitmap dirty bits on `unmounts' (Dlock), you'll get warnings
  about bitmaps not written out after fsck runs sometimes, don't ask
  me why... as long as fsck found no errors you can ignore them
. make sure symlinks always go in the same cache too

@line 1 69 0 0 5

From: Ulrich Kuehn <kuehn@GOEDEL.UNI-MUENSTER.DE>
Message-Id: <9411180940.AA27680@math.uni-muenster.de>
Subject: Re: sync patch for minixfs pl 10

don't run the update daemon if SYSUPDATE def'd

@line 1 69 0 0 5

From: scott@telle.dmi.stevens-tech.edu (Scott Kolodzieski)
Message-Id: <9411250353.AA09142@telle.dmi.stevens-tech.edu>
Subject: minor diff for minixfs pl10

really don't run the update daemon if MiNT >= 1.12

@line 1 69 0 0 5

From: woodford@esca.com (Steven Woodford)
Message-Id: <9411290411.AA05910@flash.esca.com>
Subject: One more patch for MinixFs PL10

don't delete "." or ".." even if dir increment > 1

@line 1 69 0 0 5

From: Andreas Schwab <schwab@issan.informatik.uni-dortmund.de>
Message-Id: <9412160954.AA28843@issan.informatik.uni-dortmund.de>
Subject: MinixFS: completed support for V2 filesystem

add support for v2 triple indirection blocks
 
@endnode


@node "mkfatfs" "mkfatfs"
@toc "BIN"
@{U}mkfatfs                                                           FreeMiNT@{0}

Here is the first public release of mkfatfs, a filesystem creation tool.
Main reason for this programm is to build TOS and DOS FAT32 partitions
also on ATARI computers. Sorry, it's a commandline tool.

Ok, what is FAT32 you ask now?

FAT32 is a extension of the existing FAT definition. The FAT (File
Allocation Table) on existing partitions is 16 bit wide.
This limits the maximum number of cluster to 65536 (under TOS
to 32768 because of some bugs). So if you need large partitions
you must increase cluster size. 

It requires a harddiskdriver that support at least XHDI level 1.10.

If you start mkfatfs without any parameter, you get the following output:

@line 1 73 0
./mkfatfs 0.2b, 1998-08-01 for TOS and DOS FAT/FAT32-FS
Found XHDI level 1.30.

No drive specified.

Usage: ./mkfatfs [OPTIONS] drv:
  -c            Check filesystem as is gets built
  -f <num>      Number of FATs (between 1 and 4)
  -F <num>      FAT size (12, 16, or 32)
  -i <id>       Volume ID as hexadecimal number (i.e. 0x0410)
  -l <filename> Bad block filename
  -m <filename> Boot message filename--text is used as a boot message
  -n <name>     Volume name
  -r <num>      Root directory entries (not applicable to FAT32)
  -s <num>      Sectors per cluster (2, 4, 8, 16, 32, 64, or 128)
  -a            Create filesystem always (disables partition ID checking)
@line 1 73 0
 
@endnode


@node "mount_nfs" "mount_nfs"
@toc "BIN"
@{U}mount_nfs                                                         FreeMiNT@{0}

This is a networking file system (NFS) for MiNT.

@{U}EXPLANATION:@{0}

A network file system allows computers to access file that are physically
located on another computer. Therefor there must be a data transport
between these two computers. The computer accessing the remote file is
called the client, the computer being physically the owner of that file is
the server.
On the server, there must be a service program running, that satisfies the
access requests of the client. This program is called nfs daemon, short
named @{B}nfsd@{0}. Because normally the client does not know which files can be
accessed by it, it must be told so; this is called "mounting" of a remote
directory or file and is done with a program called mount on the client.
On the server side there must run another service program, the mount
daemon called @{B}mountd@{0}, which serves these mount requests by clients. 
So: without nfsd no file access, without mountd no mounts to access files.

Another point is that both server and client can be the same computer!
Then the daemon programs run on that machine, and also the mount program
is executed there. This is the easiest way to test this package.


@{U}INSTALLATION/USAGE:@{0}

There are a few things to do (better try first server and client on the
same computer):

If you want to access remote computers, make sure that your Atari/FreeMiNT
machine is connected correctly to your local network (router).
See Network setup.

Also note that a commandline shell is only included in the pre-configured
builds, not in the "per-cpu builds"!


@{U}NFS Client:@{0}

In commandline shell, run command mount_nfs with the following parameters:

@{B}-o rw <server>:<shared dir> <local mountpoint>@{0}

-o      set options

rw      means that the remote directory will be mounted with read and
        write permissions ("r" would mount it read-only). More options
        can be added after "rw", separated with commas, no spaces, e.g.:
        -o rw,rsize=1024,wsize=1024,retrans=10

        The possible options are explained in file /share/man/man8/mount.

<server> is the IP address of the server. This can be any computer or NAS
         (network attached storage) in your local network where a
         NFS server is running on. It can be also the local machine, in
         this case <server> is the IP address 127.0.0.1.

Note the colon between <server> and <shared dir>!

<shared dir> is the shared directory on the server.

<local mountpoint> This is the (folder-) name you set for the mounted
                   server connection. In FreeMiNT, these NFS directories
                   can only be mounted in path u:/nfs/. 

Example commandline:

@{B}mount_nfs -o rw 192.168.0.10:/home/share /nfs/remotemachine@{0}

This would mount folder /home/share on IP 192.168.0.10 into your FreeMiNT
directory u:/nfs/ with name "remotemachine". Now you can access this
directory like it would be located on your local harddisc.

If you have any problems to connect to PC/NAS, it's mostly caused by an
incorrect IP- or path entry. Please verify carefully the @{B}pathname case-
sensivity@{0} and that spaces, colon(s) and slashes are placed correctly!
Also check the access permission settings of the NFS server then.


@{U}NFS Server:@{0}

- Download and install the packages "portmap" and "nfs-server" in FreeMiNT
  <sysdir>/sys-root subdirectory.

- Create a textfile named "exports" in u:\etc\ with the following line(s):
  @{B}<shared dir> <client>(option[,option,...])@{0}

  <shared dir> is the directory you want to make accessible by other
               computers. This directory must really exist on the harddisk
               (create before) and should be preferably located on a
               partition/filesystem which supports long filenames, such as
               VFAT or ext2.

  <client> is the IP address which is allowed to access the shared dir.

  Directly after the IP (no space!) some options can be defined. The basic
  settings in this comma-separated list (in brackets) should be "rw"
  (read/write permissions) and "no_root_squash", which.
  All possible options are explained in files /usr/share/man/man8/mountd
  and nfsd. Note that these files should normally be viewed with command
  "man" in shell. This is not included in FreeMiNT, please download!

  Example line in file exports:

  @{B}/g/shared 192.168.0.2(rw,no_root_squash)@{0}

  Add lines for other shares if you want, then save the file with
  UNIX lineendings (in texteditor QED, press CTRL+I, set "Unix")!

- Start portmap, mountd and nfsd from the commandline shell, enter
  the following lines:

  @{B}portmap start
  rpc.mountd
  rpc.nfsd@{0}

Now the NFS server is up and running and the shared directory can be
mounted from the local or from remote machines.

All this can be done within mint.cnf (or better use a shell script which
is started from mint.cnf)

A new feature of the mountd and nfsd is that they can be started by
the inetd and terminate themselfes in this case after a short time, so
there is no need to hold the all the time running in memory. Just install
the inetd and make sure that the mount and nfs lines in u:\etc\inetd.conf
are correct, that means they are active and the paths are correct.


@{U}BUGS:@{0}

- the nfsd is not able to find a file on a TOSFS (in the state of MiNT 
  <= 1.10) if it has only its nfs handle and no internal information. So 
  it does not work properly on such a file system, sorry. But it works on
  a patched TOSFS with Julian Reschke's crc patch applied and enabled.
  This patch is included in MiNT 1.12 (get this anyway, as binaries are
  available!), but it seems to be disabled by default (take a look into 
  tosfs.c in the MiNT source).
- no caching of results for nonidempotent requests. So if the anser of a
  file remove request gets lost and the client resends this request, it 
  will fail because the file is already gone.
- several mount options are still not supported by the XFS, such as 
  hard mounts


@{U}RUNNING ON CONFIGURATIONS:@{0}

I am running this system on a TT030 with 4/4 Mb ram, TOS 3.06, a patched 
MiNT 1.12, using both minixfs and the patched tosfs, and it seems to be 
quite stable now, but who knows? - Ulrich Kuehn

Running on Falcon/CT60, 14+128 MB RAM, FreeMiNT 1-19-cur with NEWFATFS and
ext2 filesystems; also on FireBee. Connected via local network (2 Falcons,
Firebee and 2 UbuntuLinux PC)s. - Latz


@{U}THANKS:@{0}

Many thanks go to Kay Roemer for his great socket device, which made this
nfs possible. He also constantly supplied me with critics, suggestions,
ideas and bug fixes.

Have fun
 
@endnode


@node "route" "route"
@toc "BIN"
@{U}route                                                             FreeMiNT@{0}

route - display and modify system routing table

@{U}Synopsis:@{0}

route [-v]
route add dstaddr interface [metric NN] [gw gateway]
route del dstaddr


@{U}Description:@{0}

route is used to display and modify MintNet's routing table. You can add
and delete routes. The whole routing table of the system is displayed when
route is invoked without arguments (in the format "netstat" uses when
invoked with the -rn option).


@{U}Options:@{0}

@{B}add <dstaddr>@{0}
- This option causes route to add a new route to the systems routing table
  for the destination address dstaddr, which can be given in standard dot
  notation or can be a symbolic name which is resolved into an IP address.
  A special case for dstaddr is the name default. This name causes route
  to add a default route (used when no other route matches the destination
  address of a packet). This special destination address can only be used
  in conjunction with the gw option. dstaddr can be either the address of
  a network (that is the case when the host portion of the given IP-
  address is zero) or the address of a host (when the host portion of the
  given IP address is non zero). Based on the type of the address route
  will add a route to a network or a route to a host.

@{B}metric <NN>@{0}
- This option can only be used with the add command and sets the distance
  metric for the route to the specified destination address.
  The distance metric is a measurement for how good the route is. The
  metric is the number of `hops' (that is the number of edges on the route
  when you imagine the network as a graph with the hosts at the vertices)
  between the source and the destination.
  The metric value is only useful for gateway routes.

@{B}gw <addr>@{0}
- This option can only be used with the add command and tells route that
  this route goes over a gateway host which forwards packets to the
  destination address of the route for you. addr is the address of the
  gateway and must be the address of a host (mostly the router).

@{B}interface@{0}
- This is the name of the network interface over which outgoing packets to
  the specified destination address should be sent.


@{U}Author:@{0} Kay Roemer
 
@endnode


@node "sfdisk" "sfdisk"
@toc "BIN"
@{U}sfdisk                                                            FreeMiNT@{0}

Examples of the use of sfdisk 3.0 (to partition a disk)
Input lines have fields <start>,<size>,<type>... - see sfdisk.8.
Usually no <start> is given, and input lines start with a comma.

Before doing anything with a disk, make sure it is not in use;
unmount all its file systems, and say swapoff to its swap partitions.
(The final BLKRRPART ioctl will fail if anything else still uses
the disk, and you will have to reboot. It is easier to first make
sure that nothing uses the disk, e.g., by testing:

@{B}> umount /dev/sdb1
> sfdisk -R /dev/sdb
 BLKRRPART: Device or resource busy
      * Device busy for revalidation (usage=2)
> swapoff /dev/sdb3
> sfdisk -R /dev/sdb
      * sdb: sdb1 < sdb5 sdb6 > sdb3@{0}

Note that the starred messages are kernel messages, that may be
logged somewhere, or written to some other console.
In sfdisk 3.01 sfdisk automatically does this check, unless told not to.)


@{U}1. One big partition:@{0}

 sfdisk /dev/hda << EOF
 ;
 EOF

(If there was garbage on the disk before, you may get error messages
like: `ERROR: sector 0 does not have an msdos signature'
and `/dev/hda: unrecognized partition'. This does not matter
if you write an entirely fresh partition table anyway.)

The output will be:

Old situation: ...

New situation:
Units = cylinders of 208896 bytes, blocks of 1024 bytes, counting from 0

  Device  Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+   1023    1024-   208895+  83  Linux native
Successfully wrote the new partition table
  hda: hda1

Writing and rereading the partition table takes a few seconds -
don't be alarmed if nothing happens for six seconds or so.


@{U}2. Three primary partitions: two of size 50MB and the rest:@{0}

 sfdisk /dev/hda -uM << EOF
 ,50
 ,50
 ;
 EOF

New situation:
Units = megabytes of 1048576 bytes, blocks of 1024 bytes, counting from 0

  Device  Boot Start   End     MB   #blocks   Id  System
/dev/hda1         0+    50-    51-    51203+  83  Linux native
/dev/hda2        50+   100-    51-    51204   83  Linux native
/dev/hda3       100+   203    104-   106488   83  Linux native
Successfully wrote the new partition table
  hda: hda1 hda2 hda3

/dev/hda1 is one block (in fact only half a block) shorter than
/dev/hda2 because its start had to be shifted away from zero in
order to leave room for the Master Boot Record (MBR).


@{U}3. A 1MB OS2 Boot Manager partition, a 50MB DOS partition,
   and three extended partitions (DOS D:, Linux swap, Linux):@{0}

 sfdisk /dev/hda -uM << EOF
 ,1,a
 ,50,6
 ,,E
 ;
 ,20,4
 ,16,S
 ;
 EOF

  Device  Boot Start   End     MB   #blocks   Id  System
/dev/hda1         0+     1-     2-     1223+   a  OS/2 Boot Manager
/dev/hda2         1+    51-    51-    51204    6  DOS 16-bit FAT >=32M
/dev/hda3        51+   203    153-   156468    5  Extended
/dev/hda4         0      -      0         0    0  Empty
/dev/hda5        51+    71-    21-    20603+   4  DOS 16-bit FAT <32M
/dev/hda6        71+    87-    17-    16523+  82  Linux swap
/dev/hda7        87+   203    117-   119339+  83  Linux native
Successfully wrote the new partition table
  hda: hda1 hda2 hda3 < hda5 hda6 hda7 >

All these rounded numbers look better in cylinder units:

@{B}> sfdisk -l /dev/hda@{0}

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+      5       6-     1223+   a  OS/2 Boot Manager
/dev/hda2          6     256     251     51204    6  DOS 16-bit FAT >=32M
/dev/hda3        257    1023     767    156468    5  Extended
/dev/hda4          0       -       0         0    0  Empty
/dev/hda5        257+    357     101-    20603+   4  DOS 16-bit FAT <32M
/dev/hda6        358+    438      81-    16523+  82  Linux swap
/dev/hda7        439+   1023     585-   119339+  83  Linux native

But still - why does /dev/hda5 not start on a cylinder boundary?
Because it is contained in an extended partition that does.
Of the chain of extended partitions, usually only the first is
shown. (The others have no name under Linux anyway.) But
these additional extended partitions can be made visible:

@{B}> sfdisk -l -x /dev/hda@{0}

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+      5       6-     1223+   a  OS/2 Boot Manager
/dev/hda2          6     256     251     51204    6  DOS 16-bit FAT >=32M
/dev/hda3        257    1023     767    156468    5  Extended
/dev/hda4          0       -       0         0    0  Empty

/dev/hda5        257+    357     101-    20603+   4  DOS 16-bit FAT <32M
    -            358    1023     666    135864    5  Extended
    -            257     256       0         0    0  Empty
    -            257     256       0         0    0  Empty

/dev/hda6        358+    438      81-    16523+  82  Linux swap
    -            439    1023     585    119340    5  Extended
    -            358     357       0         0    0  Empty
    -            358     357       0         0    0  Empty

/dev/hda7        439+   1023     585-   119339+  83  Linux native
    -            439     438       0         0    0  Empty
    -            439     438       0         0    0  Empty
    -            439     438       0         0    0  Empty

Why the empty 4th input line? The description of the extended partitions
starts after that of the four primary partitions.
You force an empty partition with a ",0" input line, but here all
space was divided already, so the fourth partition became empty
automatically.

How did I know about 4,6,a,E,S? Well, E,S,L stand for Extended,
Swap and Linux. The other values are hexadecimal and come from
the table:

@{B}> sfdisk -T@{0}

 Id  Name

 0  Empty
 1  DOS 12-bit FAT
 2  XENIX root
 3  XENIX usr
 4  DOS 16-bit FAT <32M
 5  Extended
 6  DOS 16-bit FAT >=32M
 7  OS/2 HPFS or QNX or Advanced UNIX
 8  AIX data
 9  AIX boot or Coherent
 a  OS/2 Boot Manager
 ...


@{U}4. Preserving the sectors changed by sfdisk.@{0}

@{B}> sfdisk -O save-hdd-partition-sectors /dev/hda@{0}
  ...
  will write the sectors overwritten by sfdisk to file.
  If you notice that you trashed some partition, you may be able to
  restore things by

@{B}> sfdisk -I save-hdd-partition-sectors /dev/hda@{0}


@{U}5. Preserving some old partitions.@{0}

@{B}> sfdisk -N2 /dev/hda@{0}
  ...
  will only change the partition /dev/hda2, and leave the rest
  unchanged. The most obvious application is to change an Id:

@{B}> sfdisk -N7 /dev/hda@{0}
 ,,63

Old situation:

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+      5       6-     1223+   a  OS/2 Boot Manager
...
/dev/hda6        358+    438      81-    16523+  82  Linux swap
/dev/hda7        439+   1023     585-   119339+  83  Linux native

New situation:

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+      5       6-     1223+   a  OS/2 Boot Manager
...
/dev/hda6        358+    438      81-    16523+  82  Linux swap
/dev/hda7        439+   1023     585-   119339+  63  GNU HURD

   Note that changing a logical partition into an empty partition
   will decrease the number of all subsequent logical partitions.   


@{U}6. Deleting a partition.@{0}

At first I thought of having an option -X# for deleting partitions,
but there are several ways in which a partition can be deleted, and
it is probably better to handle this just as a general change.

@{B}> sfdisk -d /dev/hda > ohda@{0}

will write the current tables on the file `ohda'.

@{B}> cat ohda@{0}
# partition table of /dev/hda

  Unit    : Sectors
/dev/hda1 : start=        1, size=   40799, Id= 5
/dev/hda2 : start=    40800, size=   40800, Id=83
/dev/hda3 : start=    81600, size=  336192, Id=83
/dev/hda4 : start=        0, size=       0, Id= 0
/dev/hda5 : start=        2, size=   40798, Id=83

In order to delete the partition on /dev/hda3, edit this file
and feed the result to sfdisk again.

@{B}> emacs ohda
> cat ohda@{0}
# partition table of /dev/hda

  Unit    : Sectors
/dev/hda1 : start=        1, size=   40799, Id= 5
/dev/hda2 : start=    40800, size=   40800, Id=83
/dev/hda3 : start=        0, size=       0, Id= 0
/dev/hda4 : start=        0, size=       0, Id= 0
/dev/hda5 : start=        2, size=   40798, Id=83

@{B}> sfdisk /dev/hda < ohda@{0}

Old situation:
Units = cylinders of 208896 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+     99     100-    20399+   5  Extended
/dev/hda2        100     199     100     20400   83  Linux native
/dev/hda3        200    1023     824    168096   83  Linux native
/dev/hda4          0       -       0         0    0  Empty
/dev/hda5          0+     99     100-    20399   83  Linux native

New situation:
Units = sectors of 512 bytes, counting from 0

   Device Boot    Start       End  #sectors  Id  System
/dev/hda1             1     40799     40799   5  Extended
/dev/hda2         40800     81599     40800  83  Linux native
/dev/hda3             0         -         0   0  Empty
/dev/hda4             0         -         0   0  Empty
/dev/hda5             2     40799     40798  83  Linux native
Successfully wrote the new partition table

@{B}> sfdisk -l -V /dev/hda@{0}

Disk /dev/hda: 12 heads, 34 sectors, 1024 cylinders
Units = cylinders of 208896 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+     99     100-    20399+   5  Extended
/dev/hda2        100     199     100     20400   83  Linux native
/dev/hda3          0       -       0         0    0  Empty
/dev/hda4          0       -       0         0    0  Empty
/dev/hda5          0+     99     100-    20399   83  Linux native
/dev/hda: OK

This is a good way of making changes: dump the current status
to file, edit the file, and feed it to sfdisk.
Preserving the file on some other disk could be useful:
if ever the MBR gets thrashed it can be used to restore
the old situation.
 
@endnode


@node "slinkctl" "slinkctl"
@toc "BIN"
@{U}slinkctl                                                          FreeMiNT@{0}

SLINKCTL is a command-line program for controlling @{"SCSILINK.XIF" LINK scsilink}. It
retrieves statistics, clears statistics, and/or resets the device. The
statistics are intended to help in problem determination, so will not be
very meaningful to the end user; however, if you have a problem, we may
ask you to run it and send the results to Anodyne Software.  SLINKCTL
has the following syntax:

  slinkctl [-c] [-r] [-tN] <interface> [filename]

By default (i.e. with no parameters) it reports internal statistics
including the trace for the interface named <interface>.  If one or more
of the options is set, the appropriate actions are carried out but no
report is created.


@{U}Available options:@{0}

 -c    clears the statistics counters
 -r    resets the interface (useful if it seems to be hung)
 -tN   sets the number of entries in the trace table to N; N must
       be between 0 & 10000 inclusive.  NOTE: the trace table was
       created to investigate a particular problem during driver
       development, and is unlikely to be of general use.  It's
       recommended that you leave the number of entries at zero
       (the default).

Output is to stdout, unless a filename is specified, in which case
all output will be written to it instead.

@{U}Examples:@{0}

 @{B}slinkctl.ttp en0 stats.txt@{0}
      writes the statistics for port 'en0' to file stats.txt
 @{B}slinkctl.ttp -c en0@{0}
      clears the statistics for port 'en0'
 @{B}slinkctl.ttp -r en1@{0}
      resets the SCSI/Link device at port 'en1'


Roger Burrows
Anodyne Software
11/March/2007
 
@endnode


@node "Graphic shell"
@toc "Contents"
@{U}Graphic shell                                                     FreeMiNT@{0}

The graphic shell on Atari machines is called 'the Desktop'. And this is
basically everything we can tell you about this kind of a shell, because
you (being an Atarian) are either experienced in using the Desktop, or
you have appropriate documentation for the one you're using. There is a
number of GEM shells, i.e. desktops, available, but the best ones for
FreeMiNT are TeraDesk or Thing Desktop v.1.27 or newer. You can also try
out Gemini and (as a last resort) the Atari Desktop that comes with the
last version (1.08) of the Atari MultiTOS.

Unlike under TOS (and derivatives), usage of a GEM shell in FreeMiNT
is @{B}optional@{0} - the system is fully useable even without it.
 
@endnode


@node "Text shell"
@toc "Contents"
@{U}Text shell                                                        FreeMiNT@{0}

The text shell in Un*x provides a CLI functionality to the system
and simultaneously serves as a script interpreter - this does not
however mean that one shell must deal with both tasks.

Shell script files in Unices are much more powerful than e.g batch
files in other systems. As a result, they are more universal and
are often used in a case, where you'd need a binary program under
another operating system. Of course, since scripts are interpreted,
the execution is slower than of a binary, but at the other hand
scripts are easier to write and really much easier to modify and
customization. Last but not least, shell scripts are cross
platform, i.e. the same script will work and do equivalent things
on either Sun, i386, RS6000 or Atari machine.

The file /etc/shells provide information on what shells are
installed. One of them - usually /bin/sh - is the default script
interpreter. Since different shells provide different script
syntax, the /bin/sh has an ability to automatically invoke another
shell and hand off the task to it. Hence it is advisable to keep
all shells installed, even if you think you use one.

The most commonly used shells are derived from either Bourne Shell
(bsh) or C Shell (csh), which are known as bash (Bourne Again
Shell) and tcsh (TEDEX C Shell) in the most commonly known
instances. The bash is great as the default script interpreter (you
can create a link /bin/sh pointing to /bin/bash), many people use
it as a CLI as well, while others prefer tcsh for that last. You
try out either one, then decide, what is better for you. You can
use multiple CLIs at a time with a windowed terminal (TosWin for
example) or virtual text consoles.

For details on shell usage refer to the system manpages. If it
isn't sufficient, you can search dedicated WWW and FTP sites for
the needed documentation, or ask people sitting on other Unices
to supply information and/or hints. For example, the tcsh has an
excellent manual called "The tcsh book", which is available on FTP
sites in HTML and manpage form, it is advisable to take a look at
it before you actually try to use the shell. Hint here: the HTML
and manpage for tcsh are the same, just the former is more 'user
friendly' (when you use a graphic HTML browser).
 
@endnode


@node "wildcard" "Wildcard expansion"
@toc "Contents"
@{U}Wildcard expansion                                                FreeMiNT@{0}

Mostly used in commandline shells (but also in some Desktops and
fileselectors), wildcards are supported for file/folder searching,
handling or executing.

Just to remind, on TOS, the question mark '?' matches any character
in the filename, that is at the same position and the asterisk '*'
matches any string, that starts at the same position. Asterisks are
expanded independently for the filename body and extension, so that
to match all files in a directory you supply the mask as '*.*'.

Un*x filesystems don't divide filenames into separate 'body' and
'extension' parts. The dot is no longer an important delimiter, and
it belongs to the filename as any other character. As a result,
also wildcards behave differently:

- a single question mark '?' does the same as in TOS, except it
  also matches the dot character and not only in regular files, but
  in directories too.
- a single asterisk '*' matches all files and directories in the
  specified directory, except these starting with a dot.
- the mask '*.*' matches all file and folder names which contain at
  least one dot inside.
- the mask '*.' matches all files and directories, which have a dot
  as the rightmost character. For example, filenames such as
  'datafile.' or 'data.file.' will be matched, but 'data.file' -
  won't.
- the mask '.*' matches all files and directories with filenames
  starting with a dot.

@{B}WARNINGS@{0}
That last also matches entries '.' and '..'! Eventhough you won't
be able to do anything to these entries themselves, however when an
operation is started, which is supposed to work recursively across
directories, and the mask specified matches the parent directory
entry ('..'), the command will first walk up to the topmost
directory in the system (i.e. u:/), then go down recursively
across its folders.

In other words @{B}this is likely to affect all files and folders@{0}
@{B}which are present in the system@{0} including devices, pipes,
processes, remote machines mounted via network filesystem,
everything. If you were unfortunate enough to dispose a 'delete'
operation in this manner with superuser (root) privileges, it will
wipe your harddisks destroying the system completely.

Many people reflexively add flags '-rf' ('operate recursively' and
'force') to any command rm they dispose. @{B}THIS IS A VERY WRONG@{0}
@{B}HABIT@{0} and in case of a mistake done with superuser privileges,
it may end up with a wiped hard drive. You have been warned.

The other common mistake is to add a superfluous space character
into the specified filemask. Since GNU tools usually accept
multiple arguments, the argument '* .o' (given instead of an '*.o')
will be accepted as two masks and interpreted as 'match all files
in the current directory and these ended with .o'. Again, the
command 'rm -rf * .o' destroys all entries in the current directory
(including subdirectories).

If you are not sure, what files will be matched by a mask you're
going to specify for a command, you can always use the command
'echo' supplying it with the mask. It will display all filenames
subjected to be matched.

There is a file called 'Unix horror stories' available on FTP
sites. The file (150k, plain text) consists of USENET postings made
by Unix administrators, and really many of the 'horrors' described
refer to the topic 'How have I managed to wipe my hard drive'.
Although many of the topics discussed there do not really
belong to FreeMiNT, you're encouraged to treat this as a lecture
for your spare time.
 
@endnode


@node "UNIXMODE" "Environment variable UNIXMODE"
@toc "Contents"
@{U}The environment variable UNIXMODE                                 FreeMiNT@{0}

The UNIXMODE Extended Filename Standard

0. Summary

The UNIXMODE extended filename standard provides a uniform, user-
controlled way of mapping the user's name for files (which need not
conform to the GEMDOS restrictions on length and case) to the names by
which GEMDOS knows them. It is intended to be as compatible as possible,
e.g. whenever reasonable the GEMDOS name of a file should match the name
that GEMDOS would have assigned to the name by it's usual conversions.
File names with multiple extensions are permitted by translating the '.'
character to a user-specified replacement (e.g. '_'). Long file names, and
file names with mixed upper and lower case, are represented by entries in
a special file, ".dir". This file also contains entries for Unix-like
symbolic links. Programs use the ".dir" files in the appropriate
directories to translate file names to/from GEMDOS. All translations are
controlled by the user through the environment variable UNIXMODE.


1. Rationale

GEMDOS filenames are limited to an 8 character name plus a 3 character
extension. The names must be all upper case, and must not contain certain
characters (such as ' ' and '.'). Many other popular operating systems,
most notably Unix, have much more flexible naming conventions. Moving
files from computers running such operating systems to an Atari ST can
sometimes present problems.

Moreover, short filenames are sometimes not very descriptive at all.
Having longer filenames, with fewer restrictions, makes remembering what's
in the files *much* easier.


2. The Proposal

We're stuck with GEMDOS's rules, at least for the time being. However,
there's nothing preventing programs from storing extra information about
filenames. Thus, a program could know that when the user refers to
"govt.letter.april1" to actually use the file "GOVTLET.AP1".

The UNIXMODE extended filename standard provides a uniform method of
associating long filenames with shorter, GEMDOS compatible filenames. 
"UNIXMODE" is the name of an environment variable. This variable contains
information about how the user wishes file names to be mapped. File name
mapping can be turned off completely, or altered to reflect changes in
the file system. Thus, programs using the UNIXMODE standard will still
work correctly in future versions of GEMDOS (or GEMDOS emulators) which
allow longer or otherwise more flexible file names. Also, UNIXMODE
standard programs do not impose their will on the user; the user controls
whether or not, and how, extended filename mapping is performed.

Programs that use the UNIXMODE standard can allow file names up to 31
characters in length. These file names may be mixed upper and lower case,
with periods and even spaces in them (although the latter is not
recommended). The only characters *not* permitted in file names are the
null, tab, newline, and carriage return characters.

The UNIXMODE standard also provides for symbolic links. These are special
directory entries that "point to" other directory entries. They provide
an easy way to reference the same file under more than one name. For
example, if there are several versions of a document under revision
simultaneously, a symbolic link called, say, "current" could point to
the most current version. An editor that followed the UNIXMODE standard
could be invoked by, say, "edit current" and would correctly retrieve the
current version.

In fact, under the UNIXMODE standard, long or otherwise unusual file names
are implemented by a special kind of symbolic link, the "automatic"
symbolic links. These links (also called "aliases") are used in mapping
long file names to ones that GEMDOS understands. If the user has made
provisions for allowing automatic links (see below), then every time a
file is created whose name is not acceptable to GEMDOS, then the file's
name is modified to be acceptable, and a symbolic link with the user's
preferred name for the file is created.


3 Filename Translations

Programs that follow the UNIXMODE standard will translate file names in
certain standard ways. These translations may be over-ridden by various
options in the UNIXMODE environment variable, but in general it is best
*not* to override them.

When translating from user names to GEMDOS names:
(a) if a symbolic link is found with the same name as the user name,
    it is used.
(b) the character '/' may be converted to '\', depending on user options
(c) filenames are converted to upper case
(d) occurrences of the character '.' may be converted to a user-
    specified character, to prevent conflict with GEMDOS
    restrictions on extensions
(e) filenames are truncated to have an (at most) 8 character base and an
    (at most) 3 character extension.

When translating from GEMDOS names to user names (e.g. printing the name
of the current directory):

(a) '\' may be converted to '/'
(b) if an automatic symbolic link exists to the file, then that name
    is used instead of the file name
(b) filenames are converted to lower case
(c) occurrences of the user-specified replacement character for '.'
    are converted back to '.'.

If the user name is not already a symbolic link, and the conversion from
user->GEMDOS->user again would change the name, then an automatic symbolic
link may be created for the file name. This allows the user to refer
to the file by its full name, and also allows the program to print the
name by which the user wishes to refer to the file, rather than the name
by which GEMDOS knows the file.

Examples:
If all of the above mappings are asked for by the user, and the user
specifies the character '_' as the replacement for '.', then

user name:              becomes:
foo.bar                 FOO.BAR
foo.bar.c               FOO_BAR.C
longname1.extension     LONGNAME.EXT    *
ReadMe                  README          *
a_file.doc              A_FILE.DOC      *

In the cases marked (*), the user name is not recoverable from the GEMDOS
name. In these cases, programs should (if the user requests it) create
automatic symbolic links from the user name to the GEMDOS name; such links
will allow programs to properly recover the user's desired name for the
files in directory listings, etc.

3.1 The UNIXMODE Environment Variable

The environment variable UNIXMODE contains the user's preferences for
file name mapping. Each character in the environment variable string
represents one of the options below. If the UNIXMODE variable is not
found in the environment, programs may assume whatever defaults are
appropriate. It is recommended that symbolic links *not* be active by
default. The empty string is a reasonable default, providing complete
GEMDOS compatibility. The GNU C library assumes a default of "/", for
compatibility with old code.

FreeMiNT sets UNIXMODE automatically with the parameters @{B}/brUs@{0}.

The characters in the UNIXMODE string have the following meanings:
(characters inside of angle brackets <> are supplied by the user; thus
"r<c>" means the letter "r" followed by any other character, which will
be referred to in the text as "<c>")

/   -- Allow the use of '/' as well as '\' to separate the directories
       in a path name. If the "/" option is given, then the name
       "foo/bar" refers to the file "BAR" in the directory "FOO".
       Otherwise (the default) it refers to the file "FOO/BAR" in the
       current directory.

.<c>   -- Translate multiple uses of the '.' character to the
          character <c>. Normally, GEMDOS allows only one '.' in a file
          name, and it introduces the extension. This option allows extra
          extensions. All but one (or perhaps even all) '.' characters are
          converted into <c>. At most one '.' will be left; this will be
          chosen to minimize the number of characters lost to the 8+3 rule
          (unless the "u" option is in force, see below).

          Example: if "._" is found in the UNIXMODE string, then the
          following translations will occur:

          foo.c.z    becomes  FOO.C_Z
          foo.c.bak  becomes  FOO_C.BAK
          a.b.c.d    becomes  A_B.C_D
          foo.bar    remains  FOO.BAR
          .login     becomes  _LOGIN  (rather than ".LOG")

          If the "." option is present, programs should convert filenames
          back to what the user expected, e.g. in the above, "A_B.C_D"
          should be displayed to the user as "a.b.c.d".
          Note that if a file name would contain the character <c> used
          for mapping '.', and automatic symbolic links are active, then
          an automatic link should be made for the name.
          Example: if ".@LA" is in the UNIXMODE string, and the user
          enters the name "foo@bar.c", then a link from "foo@bar.c" to
          "FOO@BAR.C" should be made, so as to distinguish "foo@bar.c"
          and "foo.bar.c".

          The translation character <c> must not be an alphabetic
          or numeric character (if it is, this option should be ignored).
          It is recommended that users adopt either ',' (comma) or '_'
          (underscore) for this character.

-   -- The minus character is guaranteed to have no meaning. Thus,
       if the UNIXMODE string consists solely of "-", the effect
       is the same as if it were empty. This may seem puzzling,
       but is necessary because many programs are incapable of
       correctly recognizing empty environment strings.

d   -- Provide a pseudo-device directory. Filenames that begin with
       the characters "/dev/" are assumed to refer to devices.
       The devices available may vary, but the following devices must
       always be present:
        /dev/console same as GEMDOS file CON:
        /dev/tty1    same as GEMDOS file AUX:
        /dev/lp      same as GEMDOS file PRN:

r<c>   -- Provide a default root drive. If the "r" option is present, then
          the search for a file whose name begins with a directory
          separator (e.g. '\') and which have no explicit drive letter
          present will begin on drive <c>. If the "r" option is not
          present, then the search will begin on the current drive (the
          default). Note that the actual drive on which the file is found
          may differ, if one of the components of the file name is a
          symbolic link.

          Example: if "rC" is set in UNIXMODE, and the current directory
          is "D:\FOO\BAR", then the filename "\bin\sh" refers to the file
          "C:\BIN\SH", not the file "D:\BIN\SH" as it would normally.

L   -- Allow, and recognize, symbolic links. See below for a more
       complete description of this option.

A   -- Automatically create links to files whose user names are not
       recoverable from the GEMDOS names. Automatic links are much
       "tighter" than normal symbolic links; for example, removing
       an automatic link will also remove the associated file or
       directory, whereas removing a normal link removes the file, only.
       Also, automatic links should appear in directory listings in
       place of the associated file; normal symbolic links appear in
       addition to, but not in place of, the files they are linked to.

       If an automatic link is created, and then the "A" option is turned
       off by the user, the automatic link will behave like a normal
       symbolic link until the "A" option is turned back on.

       The "A" option is meaningful only if the "L" option is also given.

H   -- Hide the ".dir" file that symbolic links are contained in
       from directory searches. The file may still be manipulated by,
       e.g. "Fdelete", but should never be shown to the user in a
       directory listing, file selector, or similar display.

The next two options are provided for compatibility with replacement
file systems running under GEMDOS, or similar extensions to GEMDOS. They
should not be used in the normal environment.

c   -- Pretend case is significant in file names. If this flag is
       present, then UNIXMODE programs will not translate the case of file
       names in any way, and will assume that case is significant to the
       underlying operating system.
       The "c" flag should *not* be used in present versions of GEMDOS,
       since these are case insensitive. It is provided so that programs
       will work correctly under GEMDOS extenders or future versions of
       the OS.

u   -- Assume file name length is unlimited. Like the "c" option, this
       should not normally be used under GEMDOS. If "u" is not present,
       it is assumed that the operating system recognizes only the first
       8 characters of the filename, and 3 characters of the extension
       (if any). If "u" is present, then it is assumed that files may
       be of any length, and may contain any number of '.' characters. If
       the second assumption is false (e.g. a GEMDOS emulator running on
       VAX/VMS) then the "." option must be used to translate extra
       occurrences of periods.


4 Symbolic Links

Symbolic links are implemented by special GEMDOS files named ".dir". Such
a file should appear in any directory in which a symbolic link appears.
If the "L" flag has been given in the UNIXMODE environment variable, then
programs should look in any ".dir" files anywhere along the path of a
file being opened. This means that symbolic links to directories are
permitted, and function as expected.

Example:
Suppose a program attempts to open the file "c:\foo\ReadMe". If the
following symbolic links are present:

in directory "c:": "foo" is linked to "d:\sub\dir"
in directory "d:\sub\dir": "ReadMe" is linked to "..\Important"
in directory "d:\sub": "Important" is linked to "vital.txt"

and if the "L" option is active, then the name "D:\SUB\VITAL.TXT" is
passed to GEMDOS for the actual file open operation. The translation
proceeds as follows:

c:\foo\ReadMe -> d:\sub\dir\ReadMe -> d:\sub\dir\..\Important ->
    d:\sub\Important -> d:\sub\vital.txt (-> D:\SUB\VITAL.TXT).

[The last step (case translation) may actually be interspersed with the
 other steps; part of a name may be converted to upper case as soon as it
 is known that it is not a symbolic link].

4.1 Implementation of Symbolic Links

In every directory that contains a symbolic link, there is a file called
".dir". Each symbolic link occupies a single record in the file (records
are separated by a newline character). Each record consists of 2 or 3
fields, separated by tab characters. The first field is the user's name
for the symbolic link, e.g. "ReadMe". The second field is the destination
of the link, e.g. "d:\sub\dir". This destination need not be a complete
path, nor need it be in GEMDOS format; i.e. the destination name will be
converted just like all other user-supplied names. The (optional) third
field consists of flags for the link. At present, the only character that
has meaning in this field is the letter 'A', which (if present) indicates
that the link is an automatic link. However, programs must preserve all
characters in the flags field when manipulating symbolic links, so that
they will work correctly with future extensions to the standard.

Carriage return characters are ignored everywhere in the symbolic link
files. Programs should neither require carriage returns after the line
feed ending a record, nor forbid them.


5 Extensions

There may be future extensions to the standard. Programs should ignore,
without reporting an error, any characters that they do not recognize in
the UNIXMODE environment string or in the flags field of symbolic links.

The GNU C compiler library supports the following additional option in
the UNIXMODE environment string:

b   -- Open all files in binary mode. With this option, new lines in text
       files are indicated by a line feed alone, rather than the customary
       carriage return/line feed combination.
 
@endnode


@node "misc_init" "The 'init program'"
@toc "Contents"
@{U}The 'init program'                                                FreeMiNT@{0}

It may not be obvious for everyone, but a typical operating system usually
consists of at least two separate parts. One is the system kernel, that is
usually a library of very basic functions. The other is a shell, the
actual user interface.
Of course, there are more parts, but these two are the real corner stones.

Although both are seen on the process list as processes, a true one is
usually the shell, because the kernel is in fact never explicitly
scheduled for execution. Its code is only executed when another process
calls a system function in order to use services offerred by the kernel.

In FreeMiNT the actual system binary (mint.prg) is the kernel. It cannot
run alone, because it does not contain any code that could work as an
operating system shell. The function of the mint.prg is to setup the
machine and rearrange its configuration for a multitasking environment,
setup the basic environment, which involves for example reinitializing the
memory management and preparing the scheduler to run, then finally provide
a number of functions programs can use to manage the machine resources.
After all that is done, the kernel tries to find, execute and hand the
control off to an external program, which could take care on further
initialization and (possibly) responsibility for interaction with the
user. In Unices such a program is commonly called 'init'.

 @{B}It is very important to understand, that the 'init' program, whatever it
 really is, is completely necessary for the system to operate.@{0}

In MultiTOS-like configuration of FreeMiNT, the 'init' program is normally
a GEM, or, strictly speaking, the multitasking AES @{B}XaAES@{0}. The AES
is not a part of the FreeMiNT kernel binary. XaAES for example is a so-
called "kernel module", a separate program which is started from mint.cnf.
There are also other AESes like n.aes or myaes.

But the 'init' program can also be any (non-GEM) program, e.g. a command-
line shell (such as bash) or an FTP daemon, ssh daemon, http server etc.

 @{B}Since the GEM is one of possible init programs, you cannot specify a
 GEM application or AUTO program in INIT= or GEM= keywords, since at this
 stage of the system initialization, the GEM itself is not yet active!@{0}

To start the 'init' program, you must specify its full pathname in the
INIT= keyword of the mint.cnf file. For example,

@{B}INIT=u:/c/mint/init.prg@{0}

Alternatively, if your init program is a GEM (Graphics Environmment
Manager), you can use the keyword "GEM=".
This is an instance of the aforementioned INIT= keyword with slightly
different meaning. It is generally no place here to explain technical
details, for now you just want to know, that you use "GEM=" keyword if
your init program is a GEM, and INIT= keyword otherwise.
Also, when starting via "GEM=" the current path is sysdrive (c:\) instead
of sysdir (FreeMiNT system directory).
Notice that @{B}only one of these two@{0} may be used in the mint.cnf file!

 @{B}The pathname given in INIT= or GEM= keyword must be accurate, and it
 must point to a valid executable file. If starting the init program
 fails, the FreeMiNT kernel halts the machine, and you can do nothing else
 except rebooting to TOS to fix the configuration.@{0}

Once started, the init program (whatever it is) takes the control on the
further boot process using own configuration files and/or scripts.
For example, the Atari GEM (the multitasking versions) and Geneva use
gem.cnf file, while the Un*x-like init -known as 'init.prg' or just
'init'- wants to execute shell scripts present in /etc (u:/etc) directory.
Hence you must refer to the documentation of the init program you choose
on how to setup it or tune the configuration to your own requirements.
 
@endnode


@node "misc_multi_fs" "The concept of multiple filesystems"
@toc "Contents"
@{U}The concept of multiple filesystems                               FreeMiNT@{0}

The FreeMiNT implements so called virtual filesystem (VFS), which
means, that you're no longer limited to the old, PC-DOS like style
of storing data on the disks. Specifically, various filesystem
types may provide various features, like additional attributes,
long filenames etc. Using the VFS gives you an access to
virtually any type of data storage only provided there is a
filesystem driver available. A good example is ext2.xfs module,
which allows read/write access to disks used by the Linux operating
system, spin.xfs, which provides access to many types of CD-ROM
disks, and so on. Such a module is called XFS, which stands for
'eXtended File System driver'.

Of course, the VFS mechanism is not only for accessing weird
storage media, when urgently necessary. It is for example a
standard way of implementing ramdisks under FreeMiNT. Also, some
kinds of setup and some software may want to run on a specific kind
of a filesystem, although it is usually not so that you couldn't
use a different one - just using the proper XFS allows programs to
expand their full possibilities. At the other hand, some old TOS
programs may refuse to run, when started on a filesystem, that
differs badly from the TOS filesystem they know about.

Apart from such 'external' filesystem drivers, the FreeMiNT kernel
contains several XFS modules compiled into it. In fact, almost all
of them, except the FAT FS, are pseudo-filesystems, which serve as
the 'front end' for various FreeMiNT internals, and all are mounted
on u:, the main pseudo-drive.

  unifs    biosfs    pipefs    procfs    kernfs    ramfs    shmfs

The remaining entries in u: are other filesystems, mostly floppy
disks and hard drive partitions, ramdisks etc. Apart from symbolic
links (which usually point to real directories stored somewhere on
your disks), all these entries do not represent real folders, but
other filesystem drivers 'mounted' on u:. When you enter such a
'folder', the FreeMiNT kernel activates the appropriate XFS
requesting it to handle the storage type the folder represents.

Apart from the aforementioned pseudo-filesystems, the FreeMiNT
kernel also contains a 'real' XFS, being the default one to handle
hard and floppy disks. Currently it is FAT filesystem (so called
NEWFAT FS, to be differentiated from 'old FAT FS', i.e. the TOS
filesystem), which is able to read/write Atari and PC disks
containing FAT12, FAT16, FAT32 and VFAT filesystems. Thanks to
that, you can access disks formatted for TOS, PC-DOS, Windows 95
and Windows NT (provided your hard disk driver supports XHDI
version at least 1.25).
 
@endnode


@node "unifs"
@toc "misc_multi_fs"
@{U}unifs                                                             FreeMiNT@{0}

@{B}unifs@{0} aka @{B}unified filesystem@{0}

This is what handles all references to the root directory of the
drive u:. The XFS allows to mount other filesystems on it, and
create symbolic links, but you cannot make @{"hard links" LINK "Symbolic links"}, create
folders the usual way, or use it as data storage for files.

The unified filesystem is considered the top directory (so called
'root filesystem' referenced as '/' by Un*x software) for all types
of regular and virtual files and directories present anywhere in
the system - and also outside it, if another machine is 'mounted'
locally via the Network File System (nfs).

@autorefoff
In other words, all files accessible by the GEMDOS can be referenced
from the unifs. For example, a file like @{B}mint.cnf@{0} present in
the @{B}mint@{0} directory of drive c:, what is 'normally' referenced as

@{B}c:\mint\mint.cnf@{0}

can be also accessed via the unifs as

@{B}u:\c\mint\mint.cnf@{0} or
@{B}/c/mint/mint.cnf@{0}
@autorefoff

because the drive c: is 'mounted' on the unified filesystem as a
folder.
 
@endnode


@node "biosfs"
@toc "misc_multi_fs"
@{U}biosfs                                                            FreeMiNT@{0}

@{B}biosfs@{0} aka @{B}BIOS filesystem@{0}

This one takes care on all references to the /dev directory. All
entries there are system devices actually active. You rather don't
do anything there manually.
 
@endnode


@node "pipefs"
@toc "misc_multi_fs"
@{U}pipefs                                                            FreeMiNT@{0}

@{B}pipefs@{0} aka @{B}pipeline filesystem@{0}

This is the /pipe folder. All entries there are FIFOs. They're
created by software wishing to use this way of interprocess
communication. As in the biosfs, no real use for a human, but
important for the software.
 
@endnode


@node "procfs"
@toc "misc_multi_fs"
@{U}procfs                                                            FreeMiNT@{0}

@{B}procfs@{0} aka @{B}process filesystem@{0}

This is the /proc directory. Each entry there represents a process.
You cannot explicitly create anything there, entries are made
automatically by the system when you start a program, but you can
'delete' them. When you drag a file to the trashcan, the system
attempts to terminate the process represented by the 'file' you
dragged. Be sure you know what you're doing, before you try that!

The date and time associated with the proc directory entry provide
information on the date and time the process was started. The
attribute field symbolizes the actual (this is changing
continuously) state of that process. The size provides information
on the actual amount of memory the process has access to.

Notice: that last is usually just the amount of memory the process
took from the system resources, but in some cases it may be not
completely true. For example, if there is a 16k block of memory
shared by two processes, the size of this block will be added to
the process 'size' displayed in the proc directory for @{B}both@{0}
programs those are sharing it. So you can have an impression, that
either process is using a separate 16k block and the size of the
free memory was lowered by 32k, while in fact only 16k is being
utilized. As a result, in an extreme case, if you have a lot of
processes running, the total amount of the memory used by all of
them (as indicated on the proc directory listing) may be bigger
than the total amount of physical memory your machine is equipped.
This is not a bug, it is expected to work this way.

The speciality of the procfs is, that although it is an 8+3
filesystem, the first 8 characters of the filename do NOT matter.
It is only the numeric extension (process identifier) that uniquely
distincts a process from another, the human readable name has
visual purpose only.

Apart from user processes (i.e. your programs) appearing, you can
see there are entries for programs you never explicitly started.
These are system processes. Typically you can see the following
system processes:

    mint.000        FreeMiNT kernel itself
    init.001        your init program, as specified in mint.cnf
    update.002      so called update daemon, syncing disk caches
    ...             more entries here are processes started by
    ...             the init program according to its startup
    ...             scritps
    AESSYS.043      the GEM AES
    SCREEN.282      the GEM AES screen manager
    ...             more processes started by AES

The special thing about the first three as shown above is, that
neither one can be signalled (killed with a signal). Any signals
delivered to the process 0 (the kernel) turn back to hit the
sender. The processes 1 and 2 are proofed against SIGKILL and
SIGSTOP signals, and have caught the rest.

Of course, you should not rely on this example and assume that e.g
process number 002 is always the sysupdate daemon. The process
identifier often depends on the system configuration, and although
the init so far has always been pid 1, the pid 2 may be a process
started by MiNT Net for example, if that last is installed. The
update daemon may then have pid 3, or greater.
 
@endnode


@node "shmfs"
@toc "misc_multi_fs"
@{U}shmfs                                                             FreeMiNT@{0}

@{B}shmfs@{0} aka @{B}shared memory filesystem@{0}

This one is the /shm directory. Entries there (if any) represent
memory blocks, those have been explicitly requested to be shared
between two or more processes. As such structures are usually
temporary, you rarely see anything there. Also, the shmfs has
completely no use for a human.
 
@endnode


@node "ramfs"
@toc "misc_multi_fs"
@{U}ramfs                                                             FreeMiNT@{0}

@{B}ramfs@{0} aka @{B}ramdisk filesystem@{0}

This one is the /ram directory. This one is not really used by the
system, it is just a dynamic ramdisk. It previously used to be a
separate xfs module, however, has been integrated into the kernel
as of version 1.15.0. If you have a lot of RAM, you can use the
ramdisk as a temporary directory (/tmp), for speed reasons,
although since disk filesystems are cached, the /tmp located on a
partition is fast too.
 
@endnode


@node "kernfs"
@toc "misc_multi_fs"
@{U}kernfs                                                            FreeMiNT@{0}

@{B}kernfs@{0} aka @{B}kernel filesystem@{0}

This is the /kern directory. It has been added in FreeMiNT 1.15.5
mainly as an expanded replacement for /proc.

Files present in the /kern directory contain global information
about the system. These are:

@{B}/kern/buildinfo@{0}
This file provides information about the compiler, options and
flags which were used to compile the kernel, for example:

CC: gcc version 2.95.2 19991024 (release)
CFLAGS: -mshort -m68030 -O2 -fomit-frame-pointer
CDEFS: -DMULTITOS -DVERBOSE_BOOT -DTRAPS_PRIVATE -DCRYPTO_CODE
       -DBOOT_MENU -DONLY030 -DCPU030

Obviously, the definitions set in the FreeMiNT's config.h are not
taken here into account.

@{B}/kern/cookiejar@{0}
The cookie jar slots listed in the order they have been installed,
for example:

# Slots available: 1024
# Slots used:        20
0x5F435055 (_CPU): 0x0000001E
0x5F465055 (_FPU): 0x00060000
0x5F56444F (_VDO): 0x00030000
0x5F4D4348 (_MCH): 0x00030000
0x5F535749 (_SWI): 0x000000BF
0x5F534E44 (_SND): 0x0000001F
0x5F464443 (_FDC): 0x01415443
0x5F414B50 (_AKP): 0x00000001
0x5F494454 (_IDT): 0x0000112D
0x53435349 (SCSI): 0x00164D58
0x55534844 (USHD): 0x0000FBFA
0x58484449 (XHDI): 0x0016124C
0x4E564449 (NVDI): 0x00076D1C
0x46534D43 (FSMC): 0x0005E1F4
0x4D694E54 (MiNT): 0x0000010F
0x5F464C4B (_FLK): 0x00000000
0x504D4D55 (PMMU): 0x00000000
0x6E414553 (nAES): 0x002EA000
0x45644449 (EdDI): 0x0005EEE6
0x44485354 (DHST): 0x00000006

Each line, except the first two, contains the jar tag
hexadecimally, the same value in ASCII and the entry value in hex
respectively.

@{B}/kern/cpuinfo@{0}
Here the basic information about the CPU is provided, it may look
like this (Falcon030):

CPU:        68030
MMU:        68030
FPU:        68882
Clockspeed: 16 MHz
BogoMips:   3.96

The 'BogoMIPS' field contains an approximate information about the
CPU speed measured in million instructions per second. The rest
should be self explaining.

@{B}/kern/filesystems@{0}
This is a list of installed filesystem drivers.

@{B}/kern/hz@{0}
The system timer resolution in ticks per second.

@{B}/kern/loadavg@{0}
This is the current load average information. The first three
numbers provide the information about the average system load last
1, 5 and 15 minutes respectively. The fourth one, presented as a
fraction, is the number of the currently running processes relative
to the total number of processes, e.g. 4/25 means, that four
processes are running, out of 25 total. This is continuously
changing as processes are scheduled. The last number currently
always equals 0.

@{B}/kern/meminfo@{0}
Info about total, used and free RAM.

@{B}/kern/sysdir@{0}
This is the pathname to the FreeMiNT system directory, usually
u:/c/mint.

@{B}/kern/time@{0}
Here is the information about the kernel time, i.e. the number of
seconds since January the 1st 1970, and the same number with
timezone value subtracted.

@{B}/kern/uptime@{0}
The system uptime and the total idling time in seconds.

@{B}/kern/version@{0}
The system name, version number and compile time.

@{B}/kern/welcome@{0}
The system welcome messages displayed at bootup.

@{B}/kern/devices@{0}
@{B}/kern/dma@{0}
These are not yet implemented.

Folders inside the /kern provide an extended information about
processes separately for each one.
 
@endnode


@node "misc_file_perm" "File ownership and access permissions"
@toc "Contents"
@{U}File ownership and access permissions                             FreeMiNT@{0}

The FreeMiNT is an operating system with multiuser support, which
means, that it is possible to create a setup, which could grant -
in a controlled way - multiple users an access to system resources.
Specifically, in a network, multiple users may want to access the
machine at the same time. The operating system must set things up
to eliminate all (or at least, most) possible conflicts could
happen that time, especially it must protect 'private' files of an
user from an unauthorized access made by another user.

These file ownership and access permission data is only available on
partitions with "advanced" filesystems like ext2 or minix!

For example, if you're receiving e-mails, your mailbox exists
physically somewhere on a hard disk - as a data file. Of course,
you don't want your mailbox to be read by other people, do you?
So privacy of your e-mails is protected by the software installed
on the computer you keep the mailbox on (or, strictly speaking, it
is protected, unless the machine is running MS Windows, but we're
generally discussing Unices here, so this question is out of topic).

This is not only (but also) a question of using proper network
software, like safe (read: 'considered safe') servers and clients;
the problem must be solved at the operating system level, so that
an unauthorized access can be denied even if the application
software is badly or maliciously written.

To accomplish that, all Unices (including the FreeMiNT) implement a
concept of data ownership. All users are granted 'accounts',
identified by username and password from the human side, and by so
called UID (short for 'user identifier') from the software side.
Additionally, users (or strictly speaking, user identifiers, UIDs)
are distributed among groups. A group of UIDs has own common
identifier, so called GID ('group identifier'). When a file is
created, the UID and GID of the creator is stored on the disk to
mark the file's ownership. They appear in the directory listing as
in the following example:

-rw-r--r--   1 draco    wheel       96470 Feb 22  1998 lice.irc
---------- --- -------- -------- -------- ------------ --------
    |       |      |        |        |         |          |
  access    |     UID      GID    length    creation   filename
permission  |                                 time
            |
     number of links

Really, the UID and GID are just numbers. However, they are
associated with human readable names using databases stored in
files /etc/passwd and /etc/groups, respectively. These databases
are used to convert numeric UID/GID to names as shown above, when
it is needed to display them in human readable form.

Although there may be many groups of many users in the system,
there are in fact only three classes of access privileges:

@{B}user@{0} (u)
The actual one who created the file, and whose UID is associated
with the file's directory entry.

@{B}group@{0} (g)
All users, who belong to the same group as the creator of the file.

@{B}others@{0} (o)
All users, who belong to group(s) other than the creator of the
file.

 @{B}NOTICE:
 In any case, the system administrator (Superuser), i.e. the user with
 UID 0 and GID 0, can override any attributes other users could set.@{0}

The actual access is controlled by the 'access permission' field as
shown above. This is encoded on a 10-character field, where the
first one (from the left) indicates a directory (d), link (l),
character device (c), pipe (p) or regular file (-), and the other
ones are three subfields of three characters each, indicating the
access permissions for three aforementioned classes, i.e. the user,
groups and others:

                     - r w x r w x r w x
                     - - - - - - - - - -
                       | | | | | | | | |
user can read      ----+ | | | | | | | |
         write     ------+ | | | | | | |
         execute   --------+ | | | | | |
group can read     ----------+ | | | | |
          write    ------------+ | | | |
          execute  --------------+ | | |
others can read    ----------------+ | |
           write   ------------------+ |
           execute --------------------+

If the access is given, it appears in the directory as the
appropriate letter as shown above (r, w, or x respectively). If the
access is denied, there is a minus mark (-) instead. You change
permission codes and ownership with shell command @{B}chmod@{0} or
any decent GEM desktop - please experiment with it for a while -
but not on valuable files or system binaries! - to learn how does
it really work.

 @{B}There are more permission marks, than the aforementioned 'r', 'w'
 or 'x'. They're not discussed here for sake of simplicity, but
 they do exist and have obviously special meaning. If you come
 across a file with 'weird' access permission codes, do not touch
 it, before you'll be absolutely sure what are you doing!@{0}

The way this works may be sometimes tricky. For instance, the read
and write permission (r/w) control an explicit and implicit data
reads and writes referring to the contents of the file.

However, and it may be important to know, operations on the
directory entry itself may depend on the ownership and permission
access of @{B}the directory the entry belongs to@{0} rather than
the ownership and permissions of the file the entry does represent.
So, if there is a file you don't have write access to, but it is
located in a directory, where you have the write access to, you can
delete the file, although you cannot overwrite its contents.

Symbolic links appear to always grant full permissions (lrwxrwxrwx)
but in fact the permission code of a symlink does not have any
meaning - when things are about an operation which requires
permission control, the link is dereferenced and the permission is
used as on the file the symlink points to.

The 'x' bit on a binary file or a shell script means an execution
ability, while the same bit on a folder (directory) means a
permission for entering the directory. A binary file with
permissions ---x--x--x cannot be read or written by anyone, but can
be run by everybody. When same permission codes are on a folder,
everybody can enter it and read/write/execute files in it, but
nobody can list the contents of this directory!

 @{B}NOTICE:
 On an Un*x filesystem, the 'x' flag (so called 'x-bit')
 exclusively marks a binary file as executable REGARDLESS of the
 filename extension, if any. In other words, the system won't
 execute an *.app file, if all 'x-bits' of the appropriate
 directory entry are cleared!@{0}

Again, all this works as expected only on filesystems, which
support the data ownership and access permissions, i.e. on ext2 and
minix filesystem. Actually, when you do 'ls -l' from a text shell
on a FAT disk, the directories will look similar, but don't get
fooled! The FAT filesystem does not really support this stuff, all
you see is emulated by the FreeMiNT kernel for better compatibility
with Un*x software. Of course, since most of these access codes are
fake, there is no real data safety and no real access control on a
FAT disk.
 
@endnode


@node "Regular files"
@toc "misc_file_perm"
@{U}Regular files                                                     FreeMiNT@{0}

A 'regular' file is the same as a normal data file on TOS - a number of
data blocks on a disk, associated with a directory entry.
It is called 'regular', because apart from that there are also 'links',
directories and 'special files', such as pipes or devices.
 
@endnode


@node "Symbolic links"
@toc "misc_file_perm"
@{U}Symbolic links                                                    FreeMiNT@{0}

Apart from regular files and directories (folders) you certainly
know from TOS and other operating systems, the FreeMiNT supports so
called links. A link is basically another name for a file (or a
folder), a pure reference, that is treated by the system equally as
the file (or the folder) the link "points" to.

For example, you have on your disk a file named n_aes030.sys. For a
certain reason, you need it to be referenced as gem.sys. You could
of course just rename the file, but say you want it another time to
be referenced with its original name (n_aes030.sys) too. On TOS, in
such a situation you had to make a copy of the file under a
different name, so that you had two physical instances of the same
data. Under FreeMiNT you do not make copies, but a link instead, so
that the file has two names, but its physical instance is one.

There are in fact two different types of links:

@{B}Hard link@{0}
This is litterally just another name for a file. Making a hard
link, the GEMDOS creates a regular directory entry just like for a
newly created file, but such an entry references data, that belong
to an already existing file instead.
Hard links have one big advantage, namely a reference done using a
hard link is equally fast as a reference done using the original
file name. They also do not take more place, than a normal
directory entry. But hard links have disadvantages too: first, you
can hardly :-) know, whether a directory entry is a "real" file
name, or a hard link, because they look identical (upto smallest
details) and are treated equally. Second, a hard link
@{B}cannot@{0} be created across different filesystems
(partitions). Third, hard links are supported only by few
filesystems, like Minix FS and Ext2 FS.

@{B}Symbolic links@{0}
Unlike a hard link, a symbolic link is more like a pseudo-file,
which holds an exact pathname (instead of holding data like
regular files do) for the file the link references. Symlinks take
data blocks - usually one block, to be strict - on a disk, and
additionally are much slower than hard links. However, their
biggest goal is, that they can reference files across different
filesystems, even across a network.

Unlike hardlink, a symlink is easily distinguishable from a regular
file. Symlinks are directory entries with permission encoding
'lrwxrwxrwx'. Read the File ownership and access permissions
chapter for more details.

There is also an important difference in how the system does treat
a hard link and a symlink, when the user disposes a file to be
deleted. If the file name of a symlink is given, only the symlink
will be removed and the original file remains intact. However, if
the file name of a @{B}hard link@{0} is given, the original file
remains intact @{B}provided there's at least yet one hard link@{0},
which references the data. In other words, deleting a last hard
link is equal to a physical deletion of the file referenced by that
one.

@{B}This may be important to know, because on Un*x filesystems there's
usually NO WAY to recover a deleted file.@{0}

In other cases links reference data blocks of the file they point
to - we say that they 'are dereferenced'. While copying, if you
give a link as the source file, this by default @{B}becomes a
regular file on the destination@{0}. This is always the case for
hard links. A symlink can be copied without dereferencing, see the
documentation of your desktop and to the system manual and help
option of the command cp (@{B}man cp@{0} and @{B}cp --help@{0}
respectively).
 
@endnode


@node "Number of links"
@toc "misc_file_perm"
@{U}Number of links                                                   FreeMiNT@{0}

The leftmost number in a directory entry displayed by the command "ls" is
a number of directory entries associated with (linked to) the file.
This can have two different meanings:

@{"Regular file" LINK "Regular files"}
This is the number of directory entries associated with the file.
In other words, it is the number of @{"hard links" LINK "Symbolic links"} made to this file.

@{B}Directory@{0} (folder)
This is the number of directories created inside the directory.
Notice even an 'empty' folder contains two such entries, i.e. the '.'
(reference to the folder itself) and '..' (reference to the parent
directory of the folder). Thus, practically, the number in question is
the number of directories inside the folder @{B}plus two@{0}.
 
@endnode


@node "misc_fs_limit" "Filesystem limits"
@toc "Contents"
@{U}Filesystem limits                                                 FreeMiNT@{0}

This is a list of theoretical and practical tested limits of
the FreeMiNT filesystem drivers.

Last change: 1999-06-06 by Frank Naumann

Please send your results or opinions the MiNT mailing list.


@{U}TOS-FS:@{0}

@{B}Not used anymore/replaced by NEWFATFS@{0}
(old filesystem driver, map all calls to the underlying GEMDOS)

- same restrictions as the underlying GEMDOS


@{U}NEWFATFS:@{0}

(default FAT filesystemdriver, completely new written, supports
FAT/VFAT/FAT32 filesystems; TOS, DOS and Windows compatible)

maximum partition size
                 FAT16 : 2 GB               tested:  2 GB
                 FAT32 : > 16 TB            tested: 10 GB
maximum file size      : 2 GB               tested:  2 GB
block size             : 512 byte - 32 kb   tested: 512 byte - 32 kb

physical blocksize must be smaller or
equal to logical blocksize                : yes

tested with physical blocksize > 512 byte : not yet tested


@{U}MinixFS:@{0}

(Unix filesystem; Minix compatible)

maximum partition size : 2 GB               tested:  2 GB
maximum file size      : 2 GB               tested:  1 GB
block size             : 1 kb               tested:  1 kb

physical blocksize must be smaller or
equal to logical blocksize                : yes

tested with physical blocksize > 512 byte : not supported


@{U}Ext2FS:@{0}

(Unix Filesystem; Linux ext2 compatible)

maximum partition size : > 16 TB            tested: 10 GB
maximum file size      : 2 GB               tested:  2 GB
block size             : 1, 2, 4 kb         tested: 1, 2, 4 kb

physical blocksize must be smaller or
equal to logical blocksize                : yes

tested with physical blocksize > 512 byte : not yet tested
 
@endnode


@node "misc_prior" "Prioritization"
@toc "Contents"
@{U}Prioritization                                                    FreeMiNT@{0}

The commonly known truth is that a CPU can run only one instruction
at once. Hence, even in a multitasking system, programs don't
really run in parallel - they're granted the CPU time in turns,
each one for a short period of time. This period is called a
'timeslice'. Each time the time slice 'expires', the operating
system executes some special code (called 'the scheduler') and this
decides, which process is about to be granted the CPU time for the
next slice.

All this allows to make two observations:

1) the shorter is the timeslice, the more processes are granted CPU
   time per second, so the time to wait for a program's reaction on
   an event is shorter. We say that 'the process response time is
   better'.

2) however, the shorter is the timeslice, the more often the
   scheduler is executed. Since the scheduler also takes the CPU
   time to run, making the tasks more responsive also arranges more
   of the general CPU power for the actual task switching. In other
   words, the shorter is the timeslice, the general system's
   performance is worse.

Changing the timeslice period is global and affects all the system
processes. Apart from that, the FreeMiNT offers a way to
individually control the amount of time granted processes by the
scheduler. Each process is assigned a special attribute called
'priority'. The higher the priority value, the more CPU time the
process is granted - hence it 'runs faster'.

Of course, the CPU time is a definite quantity, so if one process
gets higher priority, the rest of processes will be automatically
granted less time. And this is the reason, why the exact effect of
a priority change cannot be foreseen accurately. Namely, the actual
amount of time to be granted depends not only on the priority
value, but also, of course, on the actual number, state and
priority of all processes present in the system at the moment.
Generally, if you set maximum priority for a process, you can
expect it will get more timeslices, but if you set maximum priority
for all processes, there will be no visible effect.

To make things more complex, the operating system may automatically
tune priorities making them bigger or lower when necessary. Of
course, the preset priority value is considered default all the
time and it is used for the process most of the time. However, if
the OS decides, that a process may need more CPU time at the
moment, it can momentarily raise the priority level for the
process - and vice versa, when it turns over, that a process does
not need so much CPU power, its priority level can be lowered.
After all the priority level, obviously, sooner or later returns to
the default preset value. In other words, the priority you set is
considered a basic level, but the real ('current') priorities
change automatically around that level all the time depending on
the current requirements. This behaviour is called 'adaptive
prioritization'.

Notice there are no 'top priority' or 'background priority' presets
in FreeMiNT. The adaptive prioritization method used is considered
more flexible, than the way of using two fixed priorities, as it
can be observed on some systems.
 
@endnode


@node "misc_mem_frag" "Memory fragmentation"
@toc "Contents"
@{U}Memory fragmentation                                              FreeMiNT@{0}

When using the command 'free' from a text sheel, you can see text similar
to the following:

6365184 bytes (6216K) in 11 blocks free,
largest free block 4227072 (4128K)

The fragmentation is a phenomenon generally known to occur on data 
storage. Basically, if we have 1 MB of free disk space on a disk, then we
save there a file, that is 256k long, the amount of free space is lowered
by this 256k. Then we save another file, that is 100k long, and the free
space shrinks by further 100k. When we delete the first 256k file, the
total amount of the free space on the disks grows back by 256k, however, 
in fact, the other 100k splits the whole media to two free blocks 
('fragments') of 256k and 668k in size. The disk is 'fragmented'.

There's a very similar problem with the RAM space, that is likely to 
occur one very multitasking system. Similarly to the situation described 
above, when we have a 1 MB of free memory, then we load a program that is 
256k long, and subsequently another one which is 100k long, then we 
finally terminate that first one leaving the other one running, the 
terminated program leaves a free 'hole' in the memory so that the 
previously solid 1 MB block of free memory gets splitted into two blocks 
by 256 and 668k each. The memory has got fragmented.

And it is much worse, than with the disk space, because whilewriting data
to a disk, the file can be efficiently distributed among free clusters
even if they don't create a larger continuous area big enough for the
file to fit. It is actually satisfying, if the total amount of free
clustersis big enough, regardless of their position. Contrary to that,
when considering memory space, programs must unconditionally be loaded
into a continuous block of free bytes of requested size, and if they
additionally ask the system to allocate some more memory resources, it is
also expected, that these blocks will be solid and continuous as well. 

Thus, contrary to the storage media, where the total amount of free
clusters must be considered while saving data, the most important
memory parameter while requesting memory resources (e.g. to load
a program) is not the total amount of free RAM, but the actual size
of the largest free block, that is possible to allocate as a
continuous area. Basically, we won't be able to load a 256k program
to 1 MB of free memory, if the largest free block of this 1 MB area
is smaller, than 256k. And of course, unlike disks, the memory
cannot be defragmented on demand.

The solution for that may be memory virtualization, the FreeMiNT
however, being developed to run on machines equipped with an
ordinary 68000 processor, works in physical memory space, not
virtualized at all. Thus, eventhough this problem will most likely
be solved in some (near) future, the system can be at the moment
severly affected by memory fragmentation, similarly to other
OSes, which use memory space the same way as the FreeMiNT does.
Basically, since the memory is dynamically used all the time, the
longer the system is up, the memory fragmentation gets bigger and
bigger, up to the (sad) moment, when it is necessary to reboot
(because the largest free block is not large enough to fit
anything anymore).

Fortunately, the amount of time necessary for the memory to get
totally fragmented, is quite long - it is averagely several days or
a week being continuously up, without a reboot. The dynamical
memory management, which can momentarily raise the fragmentation
level, also serves for decreasing it, so that in longer time
periods of lower system's activity a number of small blocks of
memory may 'automagically' concatenate into a larger continuous
area, what may obviously prolongate the effective lifetime of the
system.

And even without that it is not so that the user (you) couldn't do
anything to decrease the memory fragmentation level allowing the
system to run successfully for bigger periods of time. There are
several rules worth to obey:

1) Don't use binaries packed with programs like ICE!, Sentry
   Packer etc. which are automatically depacking after the file
   has been loaded. The depacking routine embedded in such a packed
   binary unpacks the file into a different memory location, than
   the place it all has been loaded. Shortly, this increases memory
   fragmentation. If you have such packed programs, unpack it using
   dedicated depackers or use NewDepack from Sinister Developments.

2) Try to terminate programs in the reverse order than they have
   been loaded.

3) Try to never terminate daemon processes or applications, those
   are practically resident, like the Desktop, the Control Panel, a
   Taskbar (if you're using one). Let them run until the system
   shutdown time.

4) Remember, that the system component that greatly increases the
   fragmentation, is GEM, which needs to dynamically manage a
   larger amount of relatively small memory blocks to hold screen
   objects (like, for instance, windows).
 
@endnode


@node "FAQ" "FAQ"
@toc "Contents"
@{U}FAQ                                                               FreeMiNT@{0}

Here is a small FAQ (not specially) for FreeMiNT 1.16:

Q: How I can use a global folder for SLB's under FreeMiNT?

A: The default path(s) pointing to a folder which contains SLB
   libraries must be specified in the environment as SLBPATH
   variable. For example:

   SLBPATH=u:\usr\local\lib\slb

   If one wants the previous behaviour, just undefine the variable.

   Examples of valid SLBPATH variables:

    SLBPATH=c:\multitos;c:\multitos\slb
    SLBPATH=u:\c\multitos;u:\c\multitos\slb
    SLBPATH=u:\usr\local\lib\slb,u:\usr\lib\slb
    SLBPATH=u:/c/multitos;u:/c/multitos/slb
    SLBPATH=/c/multitos,/c/multitos/slb

   The usage of ':' character as separator instead of the
   comma or semicolon is not allowed (unlike in Unix).

Q: I don't need VFAT. Why is the NEWFATFS integrated in the kernel?

A: The NEWFATFS is mainly a FAT filesystem. VFAT extension
   is optional. Main advantage of the FAT filesystem
   is the speed. Also you can use TOS & DOS partitions
   of any size. And large FAT32 partitions are supported
   (FAT32 allows small clusters on large partitions).
   It can also be fixed and supported easily.


Q: I heard I must install MinixFS 0.70 for new 1.15?

A: No, you can use every MinixFS version you like.
   It's recommended to use MinixFS 0.70.
   Advantage is that MinixFS 0.70 use new global
   cache-management, inconvenient is that mount/unmount
   support is done (never worked reliable, wrong implementation).


Q: MinixFS 0.70 doesn't recognize my MinixFS partitions
   anymore. I use AHDI as harddiskdriver.

A: MinixFS 0.70 need XHDI for partitions larger than
   32 MB. It's recommended to use a XHDI compliant
   harddiskdriver.


Q: If I delete/copy/move a lot of interleaved folders
   I get the error message:
   "block_IO.c: bio_unit_get: no free unit in cache, abort".

A: The default cache size is very small, increase cache size in mint.cnf
   configuration file. Edit the value for keyword "FS_CACHE_SIZE=", we
   recommend a value of 512 (kB) or higher.


Q: I have a FAT32 formatted harddisk and it doesn't work
   under FreeMiNT 1.15. But I read FAT32 are supported?

A: Yes, FAT32 is supported. But you need at least HDDriver 7.55.


Q: Why do I need at least HDDriver 7.55 for FAT32 support?

A: Other harddisk drivers and older versions of HDDriver
   ignore FAT32 partitions completly. Only patch is to
   distribute our own harddisk driver or to update your
   driver. Or write an e-mail to the author of the harddisk
   driver and ask him to patch his driver, but the only
   supported driver at the moment is HDDriver.


Q: Can I use AHDI from ATARI corp. as harddisk driver?

A: Yes, this is possible. But it's strictly recommended
   to use a modern driver with XHDI interface.
   If you are going to access DOS partitions this is a must.
   It's not possible with AHDI to read/write DOS
   partitions.
   And also MinixFS 0.70 will no longer support large
   partitions under AHDI.
 
@endnode


@node "Glossary"
@toc "Contents"
@{U}Glossary                                                          FreeMiNT@{0}

@{B}FIFO@{0} aka @{B}pipe@{0}
'First In, First Out', a structure (a virtual file actually) used
for interprocess communication. Basically, if two programs open the
same FIFO, they can exchange data with read/write calls via the
FIFO without arranging disk space. Physically a FIFO is just a
memory buffer.

@{B}GEM@{0}
Graphic Environment Manager. On Atari computers the part of the
operating system, that creates and manages the graphic front end of
the OS, i.e. windows, dialog boxes, menus, mouse.

@{B}GEMDOS@{0}
On Atari computers, the part of the operating system that actually
manages data storage. The FreeMiNT kernel's core is a completely
new, multitasking GEMDOS, which replaces the old TOS' one, which is
located in ROM.

@{B}home@{0} aka @{B}home directory@{0}
In multiuser systems, a directory that contains files and
subdirectories private to the user, who 'owns' this directory.
The home directory usually has the same name as the corresponding
username. While the user is logged on, there is a variable called
$HOME in his environment, which points to the directory. All
programs started by the user inherit the $HOME as the default path
for dealing with user files. Obviously, to make it work painlessly,
there must be as many home directories in the system, as many users
are there.

@{B}manpage@{0}
System manual file accessible with the command man. When you need
to view the manpage of a program called 'gcc', you type
@{B}man gcc@{0}. These online manuals provide condensed and
specific information on the given topic, though the language
they've been written is not always fully understandable for people
not used to. Also, the first reference to the manpage can be slow,
because it (the page) need to be formatted for the current display
size. The formatted result is cached on the disk, so that all later
references to the same page are much faster.

@{B}MiNT@{0}
The multitasking kernel for Atari ST computers and compatibles. The
first version was released 18 May 1990. The abbreviation 'MiNT'
originally stands for 'MiNT is Not TOS', but later, after the
kernel was licensed to Atari Corp. and became MultiTOS, this was
changed to 'MiNT is Now TOS'. FreeMiNT is a MiNT derivative
copyrighted by Atari Corporation, and licensed under terms
described in the file COPYING included in the system distribution.

@{B}MultiTOS-like configuration@{0}
This is a term, which, as opposed to an Un*x like configuration,
describes a single user, multitasking setup, without the Un*x
filesystem structures built up on the disk and without Un*x
software. In other words, it is a multitasking TOS.

@{B}NFS@{0}
Network File System. A type of an XFS, which allows a networked
machine to access a storage media that physically exists on another
machine provided it has been connected to the same network and
allows its disks to be accessed this way (we say 'it exports own
filesystems over the network'). Disks mounted via the NFS appear on
the root filesystem (u:/) as folders and behave like local data
storage except they're usually much slower. Despite that, you can
mount and use this way any filesystem exported, even if the machine
it belongs to is located on another continent (provided both
machines are connected to the worldwide network).

@{B}root@{0}
Also known as @{B}Superuser@{0} (q.v.), the system administrator.
The name is 'root' because in earlier Unix systems the superuser's
home directory was the root directory of the entire filesystem,
i.e. the '/'.

@{B}scheduler@{0}
A piece of code inside the operating system kernel, that actually
deals with granting processes the CPU time for execution.

@{B}server@{0}
Surprisingly, a *program*, that manages some resources (especially
in networks) and allows clients to access them in standardized way.
Also common name for a computer running one or more server programs.

@{B}Superuser@{0} aka @{B}root@{0} aka @{B}System administrator@{0}
In a multiuser system an user, who is privileged enough to actually
control the operating system.

@{B}Supervisor@{0}
One of two (the higher one) privilege levels supported by the
Motorola 68k series of processors. The OS code usually runs the
supervisor mode since it grants the fullest possible control on the
hardware resources of the machine. Unfortunately, while the CPU is
switched to the supervisor mode, no multitasking is possible.

@{B}sysdir@{0}
'System directory', where MiNT keeps its configuration files,
modules etc. Usually u:/c/mint/<version>/.

@{B}XDD@{0}
Stands for 'eXtended Device Driver', a softloaded FreeMiNT module
that installs a device on the BIOS FS (u:/dev/).

@{B}XFS@{0}
Stands for 'eXtended File System driver', a softloaded FreeMiNT
module that installs a filesystem driver, what allows to mount a
filesystem (disk) on the drive u:

@{B}TSR@{0}
Terminate-and-Stay-Resident. A class of TOS extensions loaded from
the auto folder, which become resident system extensions after they
have been loaded.

@endnode


@node "Download" "Download"
@toc "Main"
@{U}Download                                                          FreeMiNT@{0}

Find the latest FreeMiNT/XaAES version on the GitHub snapshot page:
@{"https://freemint.github.io/#snapshots" system "https://freemint.github.io/#snapshots"}.

New compiled SpareMiNT packages (.tar.bz2 archives) can be found on:
@{"http://vincent.riviere.free.fr/soft/m68k-atari-mint/archives/mint/" system "http://vincent.riviere.free.fr/soft/m68k-atari-mint/archives/mint/"}

Old SpareMiNT packages (RPM archives) on GitHub:
@{"https://github.com/freemint/sparemint/tree/master/sparemint/RPMS/m68kmint" system "https://github.com/freemint/sparemint/tree/master/sparemint/RPMS/m68kmint"}

A lot of FreeMiNT software can be found also on:
@{"http://www.tho-otto.de/crossmint.php" system "http://www.tho-otto.de/crossmint.php"}.

@{"http://pmandin.atari.org/en/index.php?category/General" system "http://pmandin.atari.org/en/index.php?category/General"}.

@{"http://atarimint.blogspot.com/" system "http://atarimint.blogspot.com/"}.

@{"https://web.archive.org/web/20100112115937/http://www.radix.net/~atari/" system "https://web.archive.org/web/20100112115937/http://www.radix.net/~atari/"}.
@{"https://web.archive.org/web/20100524152011/http://www.radix.net/~atari/mint" system "https://web.archive.org/web/20100524152011/http://www.radix.net/~atari/mint"}.
 
@endnode


@node "Contact" "Contact"
@toc "Main"
@{U}Contact                                                           FreeMiNT@{0}

The texts in this document were written by various authors, thanks to
all of them!

If you find errors, bad english or want to contribute to this document,
feel free to contact me or even better join the @{"MiNT-mailinglist" system "https://sourceforge.net/p/freemint/mailman/freemint-discuss"}.

Edited 2020 by @{"Latz" LINK "Adresse"}.
 
@endnode


@pnode "Adresse"
Mailto:
Lars Schmidbauer
latzmaster@gmx.de
@endnode
