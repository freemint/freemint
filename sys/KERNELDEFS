#
# generic flags
#
# -DVERBOSE_BOOT	 include extensive messages
# -DCRYPTO_CODE		 include the cryptographic filesystem stuff
# -DSOFT_UNITABLE	 loadable unicode tables
# -DBUILTIN_SHELL	 include the built-in minimal shell
# -DWITH_MMU_SUPPORT	 include MMU support
# -DPCI_BIOS		 include PCI_BIOS interface emulation
# -DWITH_NATIVE_FEATURES include native features detection

#
# machine flags
#
# -DM68000		build for 68000 (no mmu, no caches)
# -DM68030		build for 68030
# -DM68040		build for 68040-060
# -DM68060		build for 68060
# -DMILAN		build Milan kernel

#
# debug flags
#
# -DDEBUG_INFO		include debugging information
# -DPROFILING		include profiling support
# -DMFP_DEBUG_DIRECT	direct MFP routines to output debug

#
# Flags for building a minimal 68000 kernel
#
# -DNO_RAMFS		disables the internal ramdisk (/ram)
# -DNO_FAKE_SUPER	disables the extended bus error handler
# -DNO_AKP_KEYBOARD	disables the extended keyboard routines

#
# experimental; for developers only
#
# -DOLDTOSFS		use GEMDOS FS instead of real FAT XFS
# -DJAR_PRIVATE		make Cookie Jar private for processes
# -DWITHOUT_TOS		exclude TOS dependencies
# 			warning, experimental and work in progress


# mandatory for kernel source now
KERNELDEFAULTDEFS = -D__KERNEL__
KERNELDEFAULTDEFS += -DLANG_ENGLISH
KERNELDEFAULTDEFS += -DVERBOSE_BOOT
MMU_SUPPORT = -DWITH_MMU_SUPPORT

# added this to default-options for test-purpose for now
KERNELDEFAULTDEFS += -DWITH_SINGLE_TASK_SUPPORT

# for all but m68000
KERNELNON000DEFS += -DCRYPTO_CODE
KERNELNON000DEFS += -DSOFT_UNITABLE
KERNELNON000DEFS += -DBUILTIN_SHELL


#
# These are mapped according to kerneltargets below
#
MINT_000 = mint000.prg
KERNELDEFS_000 = -DM68000 -DNO_RAMFS -DNO_FAKE_SUPER -DNO_DEV_RANDOM

MINT_030 = mint030.prg
KERNELDEFS_030 = $(KERNELNON000DEFS) -DM68030 $(MMU_SUPPORT)

MINT_040 = mint040.prg
KERNELDEFS_040 = $(KERNELNON000DEFS) -DM68040 $(MMU_SUPPORT)

MINT_080 = mint080.prg
KERNELDEFS_080 = $(KERNELNON000DEFS) -DM68040 -DWITH_68080 $(MMU_SUPPORT)

MINT_060 = mint060.prg
KERNELDEFS_060 = $(KERNELNON000DEFS) -DM68060 -DPCI_BIOS $(MMU_SUPPORT)

MINT_020 = mint020.prg
KERNELDEFS_020 = $(KERNELNON000DEFS) -DM68000

MINT_deb = mintdeb.prg
KERNELDEFS_deb = $(KERNELNON000DEFS) -DDEBUG_INFO -DM68040 -DWITH_NATIVE_FEATURES $(MMU_SUPPORT)

MINT_col = mintv4e.prg
KERNELDEFS_col = $(KERNELNON000DEFS) -DNO_FAKE_SUPER -DPCI_BIOS

MINT_mil = mintmil.prg
KERNELDEFS_mil = $(KERNELNON000DEFS) -DMILAN -DM68040 -DPCI_BIOS $(MMU_SUPPORT)

MINT_ara = mintara.prg
KERNELDEFS_ara = $(KERNELNON000DEFS) -DM68040 -DWITH_HOSTFS -DBOOTSTRAPABLE -DWITH_NATIVE_FEATURES $(MMU_SUPPORT)
MODULEDIRS_ara = xfs/hostfs

MINT_hat = mint000h.prg
KERNELDEFS_hat = $(KERNELNON000DEFS) -DM68000 -DOLDTOSFS -DNO_RAMFS -DNO_FAKE_SUPER -DNO_DEV_RANDOM -DWITH_NATIVE_FEATURES

MINT_hat030 = mint030h.prg
KERNELDEFS_hat030 = $(KERNELNON000DEFS) -DM68030 -DOLDTOSFS -DWITH_NATIVE_FEATURES $(MMU_SUPPORT)

# Example for a custom build:
# Add my1 to "kerneltargets" below
# Type in your shell "make my1"
MINT_my1 = mintmy1.prg
KERNELDEFS_my1 = -DDEBUG_INFO -DM68040 -DMILAN $(KERNELNON000DEFS) $(MMU_SUPPORT)
KERNELDEFS_my1 += -DMFP_DEBUG_DIRECT
#KERNELDEFS_my1 += -DPROFILING
# add this to ../RULES
CPU_my1  = 02060

#
# all default targets
#
kerneltargets = 000 020 030 040 060 080 deb mil ara hat hat030 col
# cputargets = $(sort $(foreach TARGET, $(kerneltargets), $(CPU_$(TARGET))))
cputargets = 000 020 030 040 060 02060 v4e
