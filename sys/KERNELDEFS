
#
# generic flags
#
# -DVERBOSE_BOOT	include extensive messages
# -DCRYPTO_CODE		include the cryptographic filesystem stuff
# -DSOFT_UNITABLE	loadable unicode tables
# -DBUILTIN_SHELL	include the built-in minimal shell
# -DC_ONLY		replace some assembly function by C compatible one
# -DWITH_MMU_SUPPORT	include MMU support
# -DPCI_BIOS		include PCI_BIOS interface emulation

#
# machine flags
#
# -DM68000		build for 68000 (no mmu, no caches)
# -DM68030		build for 68030
# -DM68040		build for 68040-060
# -DMILAN		build Milan kernel
# -DARANYM		build Aranym kernel

#
# debug flags
#
# -DDEBUG_INFO		include debugging information
# -DPROFILING		include profiling support
# -DMFP_DEBUG_DIRECT	direct MFP routines to output debug

#
# Flags for building a minimal 68000 kernel
#
# -DNO_RAMFS		disables the internal ramdisk (/ram)
# -DNO_FAKE_SUPER	disables the extended bus error handler
# -DNO_AKP_KEYBOARD	disables the extended keyboard routines
# -DQUANTUM_SMALLER	changes QUANTUM to 2k, experimental!

#
# experimental; for developers only
#
# -DOLDTOSFS		use GEMDOS FS instead of real FAT XFS (pending removal)
# -DJAR_PRIVATE		make Cookie Jar private for processes
# -DWITHOUT_TOS		exclude TOS dependencies
# 			warning, experimental and work in progress


# mandatory for kernel source now
KERNELDEFAULTDEFS = -D__KERNEL__
KERNELDEFAULTDEFS += -DLANG_ENGLISH
KERNELDEFAULTDEFS += -DVERBOSE_BOOT
KERNELDEFAULTDEFS += -DWITH_MMU_SUPPORT

# added this to default-options for test-purpose for now
KERNELDEFAULTDEFS += -DWITH_SINGLE_TASK_SUPPORT

ifneq ($(kernel),000)
KERNELDEFAULTDEFS += -DCRYPTO_CODE
KERNELDEFAULTDEFS += -DSOFT_UNITABLE
KERNELDEFAULTDEFS += -DBUILTIN_SHELL
endif

ifeq ($(kernel),deb)
MINT = mintdeb.prg
CPU  = 020-60
KERNELDEFS = -DDEBUG_INFO -DM68040
endif

# ST, STE, 020+ MMU-less machines
ifeq ($(kernel),000)
MINT = mint000.prg
CPU  = 000
KERNELDEFS = -DM68000 -DNO_RAMFS -DNO_FAKE_SUPER -DNO_DEV_RANDOM
kernel_nocflags = -DWITH_MMU_SUPPORT
endif

# TT030, Falcon030, CT2, PAK68/3
ifeq ($(kernel),030)
MINT = mint030.prg
CPU  = 020-60
KERNELDEFS = -DM68030
endif

# AfterBurner040, CT60, CTPCI
ifeq ($(kernel),04060)
MINT = mint4060.prg
CPU  = 020-60
KERNELDEFS = -DM68040 -DPCI_BIOS
endif

# Milan040, Milan060
ifeq ($(kernel),mil)
MINT = mintmil.prg
CPU  = 020-60
KERNELDEFS = -DMILAN -DM68040 -DPCI_BIOS
endif

# FireBee
ifeq ($(kernel),col)
MINT = mintv4e.prg
CPU  = v4e
KERNELDEFS = -DM68040 -DNO_FAKE_SUPER -DC_ONLY -DPCI_BIOS
kernel_nocflags = -DWITH_MMU_SUPPORT
endif

# ARAnyM with built-in hostfs.xfs
ifeq ($(kernel),ara)
MINT = mintara.prg
CPU  = 020-60
KERNELDEFS = -DARANYM -DM68040 -DWITH_HOSTFS -DBOOTSTRAPABLE -DC_ONLY
MODULEDIRS = xfs/hostfs
endif

# Hatari with GEMDOS emulation
ifeq ($(kernel),hat)
MINT = minthat.prg
CPU  = 000
KERNELDEFS = -DM68000 -DOLDTOSFS -DNO_RAMFS -DNO_FAKE_SUPER -DNO_DEV_RANDOM
kernel_nocflags = -DWITH_MMU_SUPPORT
endif

#
# all default targets
#
kerneltargets = deb 000 030 04060 mil col ara hat
cputargets = 000 020-60 v4e
